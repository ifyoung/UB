// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GBoss.proto

#ifndef PROTOBUF_GBoss_2eproto__INCLUDED
#define PROTOBUF_GBoss_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace gboss {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_GBoss_2eproto();
void protobuf_AssignDesc_GBoss_2eproto();
void protobuf_ShutdownFile_GBoss_2eproto();

class MapEntry;
class OBDInfo;
class GpsSimpleInfo;
class BaseStationInfo;
class BaseStationAddress;
class YDWInfo;
class NodeLostInfo;
class NodeFaultInfo;
class FaultLightStatus;
class GpsBaseInfo;
class GpsRoadInfo;
class GpsPointInfo;
class GpsReferPosition;
class GpsInfo;
class AlarmInfo;
class UnitVersion;
class OperateDataBaseInfo;
class OperateData;
class ShortMessage;
class TravelInfo;
class FaultDefine;
class FaultInfo;
class AppNoticeInfo;
class ECUConfig;

// ===================================================================

class MapEntry : public ::google_public::protobuf::Message {
 public:
  MapEntry();
  virtual ~MapEntry();

  MapEntry(const MapEntry& from);

  inline MapEntry& operator=(const MapEntry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const MapEntry& default_instance();

  void Swap(MapEntry* other);

  // implements Message ----------------------------------------------

  MapEntry* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const MapEntry& from);
  void MergeFrom(const MapEntry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline const ::std::string& key() const;
  inline void set_key(const ::std::string& value);
  inline void set_key(const char* value);
  inline void set_key(const char* value, size_t size);
  inline ::std::string* mutable_key();
  inline ::std::string* release_key();
  inline void set_allocated_key(::std::string* key);

  // required string value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline const ::std::string& value() const;
  inline void set_value(const ::std::string& value);
  inline void set_value(const char* value);
  inline void set_value(const char* value, size_t size);
  inline ::std::string* mutable_value();
  inline ::std::string* release_value();
  inline void set_allocated_value(::std::string* value);

  // @@protoc_insertion_point(class_scope:gboss.MapEntry)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_value();
  inline void clear_has_value();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* key_;
  ::std::string* value_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static MapEntry* default_instance_;
};
// -------------------------------------------------------------------

class OBDInfo : public ::google_public::protobuf::Message {
 public:
  OBDInfo();
  virtual ~OBDInfo();

  OBDInfo(const OBDInfo& from);

  inline OBDInfo& operator=(const OBDInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const OBDInfo& default_instance();

  void Swap(OBDInfo* other);

  // implements Message ----------------------------------------------

  OBDInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const OBDInfo& from);
  void MergeFrom(const OBDInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 remainOil = 1;
  inline bool has_remainoil() const;
  inline void clear_remainoil();
  static const int kRemainOilFieldNumber = 1;
  inline ::google_public::protobuf::int32 remainoil() const;
  inline void set_remainoil(::google_public::protobuf::int32 value);

  // optional int32 remainPercentOil = 2;
  inline bool has_remainpercentoil() const;
  inline void clear_remainpercentoil();
  static const int kRemainPercentOilFieldNumber = 2;
  inline ::google_public::protobuf::int32 remainpercentoil() const;
  inline void set_remainpercentoil(::google_public::protobuf::int32 value);

  // optional int32 averageOil = 3;
  inline bool has_averageoil() const;
  inline void clear_averageoil();
  static const int kAverageOilFieldNumber = 3;
  inline ::google_public::protobuf::int32 averageoil() const;
  inline void set_averageoil(::google_public::protobuf::int32 value);

  // optional int32 hourOil = 4;
  inline bool has_houroil() const;
  inline void clear_houroil();
  static const int kHourOilFieldNumber = 4;
  inline ::google_public::protobuf::int32 houroil() const;
  inline void set_houroil(::google_public::protobuf::int32 value);

  // optional int32 totalDistance = 5;
  inline bool has_totaldistance() const;
  inline void clear_totaldistance();
  static const int kTotalDistanceFieldNumber = 5;
  inline ::google_public::protobuf::int32 totaldistance() const;
  inline void set_totaldistance(::google_public::protobuf::int32 value);

  // optional int32 waterTemperature = 6;
  inline bool has_watertemperature() const;
  inline void clear_watertemperature();
  static const int kWaterTemperatureFieldNumber = 6;
  inline ::google_public::protobuf::int32 watertemperature() const;
  inline void set_watertemperature(::google_public::protobuf::int32 value);

  // optional int32 reviseOil = 7;
  inline bool has_reviseoil() const;
  inline void clear_reviseoil();
  static const int kReviseOilFieldNumber = 7;
  inline ::google_public::protobuf::int32 reviseoil() const;
  inline void set_reviseoil(::google_public::protobuf::int32 value);

  // optional int32 rotationSpeed = 8;
  inline bool has_rotationspeed() const;
  inline void clear_rotationspeed();
  static const int kRotationSpeedFieldNumber = 8;
  inline ::google_public::protobuf::int32 rotationspeed() const;
  inline void set_rotationspeed(::google_public::protobuf::int32 value);

  // optional int32 intakeAirTemperature = 9;
  inline bool has_intakeairtemperature() const;
  inline void clear_intakeairtemperature();
  static const int kIntakeAirTemperatureFieldNumber = 9;
  inline ::google_public::protobuf::int32 intakeairtemperature() const;
  inline void set_intakeairtemperature(::google_public::protobuf::int32 value);

  // optional int32 airDischange = 10;
  inline bool has_airdischange() const;
  inline void clear_airdischange();
  static const int kAirDischangeFieldNumber = 10;
  inline ::google_public::protobuf::int32 airdischange() const;
  inline void set_airdischange(::google_public::protobuf::int32 value);

  // repeated .gboss.MapEntry otherInfo = 11;
  inline int otherinfo_size() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 11;
  inline const ::gboss::MapEntry& otherinfo(int index) const;
  inline ::gboss::MapEntry* mutable_otherinfo(int index);
  inline ::gboss::MapEntry* add_otherinfo();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >&
      otherinfo() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >*
      mutable_otherinfo();

  // optional string callLetter = 12;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 12;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // optional int64 gpsTime = 13;
  inline bool has_gpstime() const;
  inline void clear_gpstime();
  static const int kGpsTimeFieldNumber = 13;
  inline ::google_public::protobuf::int64 gpstime() const;
  inline void set_gpstime(::google_public::protobuf::int64 value);

  // optional int32 speed = 14;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 14;
  inline ::google_public::protobuf::int32 speed() const;
  inline void set_speed(::google_public::protobuf::int32 value);

  // optional int32 remainDistance = 15;
  inline bool has_remaindistance() const;
  inline void clear_remaindistance();
  static const int kRemainDistanceFieldNumber = 15;
  inline ::google_public::protobuf::int32 remaindistance() const;
  inline void set_remaindistance(::google_public::protobuf::int32 value);

  // optional int32 unitType = 16;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 16;
  inline ::google_public::protobuf::int32 unittype() const;
  inline void set_unittype(::google_public::protobuf::int32 value);

  // optional int32 history = 17;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 17;
  inline ::google_public::protobuf::int32 history() const;
  inline void set_history(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.OBDInfo)
 private:
  inline void set_has_remainoil();
  inline void clear_has_remainoil();
  inline void set_has_remainpercentoil();
  inline void clear_has_remainpercentoil();
  inline void set_has_averageoil();
  inline void clear_has_averageoil();
  inline void set_has_houroil();
  inline void clear_has_houroil();
  inline void set_has_totaldistance();
  inline void clear_has_totaldistance();
  inline void set_has_watertemperature();
  inline void clear_has_watertemperature();
  inline void set_has_reviseoil();
  inline void clear_has_reviseoil();
  inline void set_has_rotationspeed();
  inline void clear_has_rotationspeed();
  inline void set_has_intakeairtemperature();
  inline void clear_has_intakeairtemperature();
  inline void set_has_airdischange();
  inline void clear_has_airdischange();
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_gpstime();
  inline void clear_has_gpstime();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_remaindistance();
  inline void clear_has_remaindistance();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_history();
  inline void clear_has_history();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int32 remainoil_;
  ::google_public::protobuf::int32 remainpercentoil_;
  ::google_public::protobuf::int32 averageoil_;
  ::google_public::protobuf::int32 houroil_;
  ::google_public::protobuf::int32 totaldistance_;
  ::google_public::protobuf::int32 watertemperature_;
  ::google_public::protobuf::int32 reviseoil_;
  ::google_public::protobuf::int32 rotationspeed_;
  ::google_public::protobuf::int32 intakeairtemperature_;
  ::google_public::protobuf::int32 airdischange_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry > otherinfo_;
  ::std::string* callletter_;
  ::google_public::protobuf::int64 gpstime_;
  ::google_public::protobuf::int32 speed_;
  ::google_public::protobuf::int32 remaindistance_;
  ::google_public::protobuf::int32 unittype_;
  ::google_public::protobuf::int32 history_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static OBDInfo* default_instance_;
};
// -------------------------------------------------------------------

class GpsSimpleInfo : public ::google_public::protobuf::Message {
 public:
  GpsSimpleInfo();
  virtual ~GpsSimpleInfo();

  GpsSimpleInfo(const GpsSimpleInfo& from);

  inline GpsSimpleInfo& operator=(const GpsSimpleInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GpsSimpleInfo& default_instance();

  void Swap(GpsSimpleInfo* other);

  // implements Message ----------------------------------------------

  GpsSimpleInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GpsSimpleInfo& from);
  void MergeFrom(const GpsSimpleInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gpsTime = 1;
  inline bool has_gpstime() const;
  inline void clear_gpstime();
  static const int kGpsTimeFieldNumber = 1;
  inline ::google_public::protobuf::int64 gpstime() const;
  inline void set_gpstime(::google_public::protobuf::int64 value);

  // required bool loc = 2;
  inline bool has_loc() const;
  inline void clear_loc();
  static const int kLocFieldNumber = 2;
  inline bool loc() const;
  inline void set_loc(bool value);

  // required int32 lat = 3;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 3;
  inline ::google_public::protobuf::int32 lat() const;
  inline void set_lat(::google_public::protobuf::int32 value);

  // required int32 lng = 4;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 4;
  inline ::google_public::protobuf::int32 lng() const;
  inline void set_lng(::google_public::protobuf::int32 value);

  // required int32 speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline ::google_public::protobuf::int32 speed() const;
  inline void set_speed(::google_public::protobuf::int32 value);

  // required int32 course = 6;
  inline bool has_course() const;
  inline void clear_course();
  static const int kCourseFieldNumber = 6;
  inline ::google_public::protobuf::int32 course() const;
  inline void set_course(::google_public::protobuf::int32 value);

  // repeated int32 status = 7;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google_public::protobuf::int32 status(int index) const;
  inline void set_status(int index, ::google_public::protobuf::int32 value);
  inline void add_status(::google_public::protobuf::int32 value);
  inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
      status() const;
  inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
      mutable_status();

  // optional int32 totalDistance = 8;
  inline bool has_totaldistance() const;
  inline void clear_totaldistance();
  static const int kTotalDistanceFieldNumber = 8;
  inline ::google_public::protobuf::int32 totaldistance() const;
  inline void set_totaldistance(::google_public::protobuf::int32 value);

  // optional int32 oil = 9;
  inline bool has_oil() const;
  inline void clear_oil();
  static const int kOilFieldNumber = 9;
  inline ::google_public::protobuf::int32 oil() const;
  inline void set_oil(::google_public::protobuf::int32 value);

  // optional int32 remainPercentOil = 10;
  inline bool has_remainpercentoil() const;
  inline void clear_remainpercentoil();
  static const int kRemainPercentOilFieldNumber = 10;
  inline ::google_public::protobuf::int32 remainpercentoil() const;
  inline void set_remainpercentoil(::google_public::protobuf::int32 value);

  // optional int32 canspeed = 11;
  inline bool has_canspeed() const;
  inline void clear_canspeed();
  static const int kCanspeedFieldNumber = 11;
  inline ::google_public::protobuf::int32 canspeed() const;
  inline void set_canspeed(::google_public::protobuf::int32 value);

  // optional int32 remainDistance = 12;
  inline bool has_remaindistance() const;
  inline void clear_remaindistance();
  static const int kRemainDistanceFieldNumber = 12;
  inline ::google_public::protobuf::int32 remaindistance() const;
  inline void set_remaindistance(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.GpsSimpleInfo)
 private:
  inline void set_has_gpstime();
  inline void clear_has_gpstime();
  inline void set_has_loc();
  inline void clear_has_loc();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_course();
  inline void clear_has_course();
  inline void set_has_totaldistance();
  inline void clear_has_totaldistance();
  inline void set_has_oil();
  inline void clear_has_oil();
  inline void set_has_remainpercentoil();
  inline void clear_has_remainpercentoil();
  inline void set_has_canspeed();
  inline void clear_has_canspeed();
  inline void set_has_remaindistance();
  inline void clear_has_remaindistance();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int64 gpstime_;
  bool loc_;
  ::google_public::protobuf::int32 lat_;
  ::google_public::protobuf::int32 lng_;
  ::google_public::protobuf::int32 speed_;
  ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 > status_;
  ::google_public::protobuf::int32 course_;
  ::google_public::protobuf::int32 totaldistance_;
  ::google_public::protobuf::int32 oil_;
  ::google_public::protobuf::int32 remainpercentoil_;
  ::google_public::protobuf::int32 canspeed_;
  ::google_public::protobuf::int32 remaindistance_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static GpsSimpleInfo* default_instance_;
};
// -------------------------------------------------------------------

class BaseStationInfo : public ::google_public::protobuf::Message {
 public:
  BaseStationInfo();
  virtual ~BaseStationInfo();

  BaseStationInfo(const BaseStationInfo& from);

  inline BaseStationInfo& operator=(const BaseStationInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const BaseStationInfo& default_instance();

  void Swap(BaseStationInfo* other);

  // implements Message ----------------------------------------------

  BaseStationInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const BaseStationInfo& from);
  void MergeFrom(const BaseStationInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string mcc = 1;
  inline bool has_mcc() const;
  inline void clear_mcc();
  static const int kMccFieldNumber = 1;
  inline const ::std::string& mcc() const;
  inline void set_mcc(const ::std::string& value);
  inline void set_mcc(const char* value);
  inline void set_mcc(const char* value, size_t size);
  inline ::std::string* mutable_mcc();
  inline ::std::string* release_mcc();
  inline void set_allocated_mcc(::std::string* mcc);

  // required string mnc = 2;
  inline bool has_mnc() const;
  inline void clear_mnc();
  static const int kMncFieldNumber = 2;
  inline const ::std::string& mnc() const;
  inline void set_mnc(const ::std::string& value);
  inline void set_mnc(const char* value);
  inline void set_mnc(const char* value, size_t size);
  inline ::std::string* mutable_mnc();
  inline ::std::string* release_mnc();
  inline void set_allocated_mnc(::std::string* mnc);

  // required int32 lac = 3;
  inline bool has_lac() const;
  inline void clear_lac();
  static const int kLacFieldNumber = 3;
  inline ::google_public::protobuf::int32 lac() const;
  inline void set_lac(::google_public::protobuf::int32 value);

  // required int32 cid = 4;
  inline bool has_cid() const;
  inline void clear_cid();
  static const int kCidFieldNumber = 4;
  inline ::google_public::protobuf::int32 cid() const;
  inline void set_cid(::google_public::protobuf::int32 value);

  // optional int32 bsss = 5;
  inline bool has_bsss() const;
  inline void clear_bsss();
  static const int kBsssFieldNumber = 5;
  inline ::google_public::protobuf::int32 bsss() const;
  inline void set_bsss(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.BaseStationInfo)
 private:
  inline void set_has_mcc();
  inline void clear_has_mcc();
  inline void set_has_mnc();
  inline void clear_has_mnc();
  inline void set_has_lac();
  inline void clear_has_lac();
  inline void set_has_cid();
  inline void clear_has_cid();
  inline void set_has_bsss();
  inline void clear_has_bsss();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* mcc_;
  ::std::string* mnc_;
  ::google_public::protobuf::int32 lac_;
  ::google_public::protobuf::int32 cid_;
  ::google_public::protobuf::int32 bsss_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static BaseStationInfo* default_instance_;
};
// -------------------------------------------------------------------

class BaseStationAddress : public ::google_public::protobuf::Message {
 public:
  BaseStationAddress();
  virtual ~BaseStationAddress();

  BaseStationAddress(const BaseStationAddress& from);

  inline BaseStationAddress& operator=(const BaseStationAddress& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const BaseStationAddress& default_instance();

  void Swap(BaseStationAddress* other);

  // implements Message ----------------------------------------------

  BaseStationAddress* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const BaseStationAddress& from);
  void MergeFrom(const BaseStationAddress& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 lat = 1;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 1;
  inline ::google_public::protobuf::int32 lat() const;
  inline void set_lat(::google_public::protobuf::int32 value);

  // required int32 lng = 2;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 2;
  inline ::google_public::protobuf::int32 lng() const;
  inline void set_lng(::google_public::protobuf::int32 value);

  // optional int32 precision = 3;
  inline bool has_precision() const;
  inline void clear_precision();
  static const int kPrecisionFieldNumber = 3;
  inline ::google_public::protobuf::int32 precision() const;
  inline void set_precision(::google_public::protobuf::int32 value);

  // optional string addressDesc = 4;
  inline bool has_addressdesc() const;
  inline void clear_addressdesc();
  static const int kAddressDescFieldNumber = 4;
  inline const ::std::string& addressdesc() const;
  inline void set_addressdesc(const ::std::string& value);
  inline void set_addressdesc(const char* value);
  inline void set_addressdesc(const char* value, size_t size);
  inline ::std::string* mutable_addressdesc();
  inline ::std::string* release_addressdesc();
  inline void set_allocated_addressdesc(::std::string* addressdesc);

  // @@protoc_insertion_point(class_scope:gboss.BaseStationAddress)
 private:
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();
  inline void set_has_precision();
  inline void clear_has_precision();
  inline void set_has_addressdesc();
  inline void clear_has_addressdesc();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int32 lat_;
  ::google_public::protobuf::int32 lng_;
  ::std::string* addressdesc_;
  ::google_public::protobuf::int32 precision_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static BaseStationAddress* default_instance_;
};
// -------------------------------------------------------------------

class YDWInfo : public ::google_public::protobuf::Message {
 public:
  YDWInfo();
  virtual ~YDWInfo();

  YDWInfo(const YDWInfo& from);

  inline YDWInfo& operator=(const YDWInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const YDWInfo& default_instance();

  void Swap(YDWInfo* other);

  // implements Message ----------------------------------------------

  YDWInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const YDWInfo& from);
  void MergeFrom(const YDWInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 temperature = 1;
  inline bool has_temperature() const;
  inline void clear_temperature();
  static const int kTemperatureFieldNumber = 1;
  inline ::google_public::protobuf::int32 temperature() const;
  inline void set_temperature(::google_public::protobuf::int32 value);

  // required int32 drivingTime = 2;
  inline bool has_drivingtime() const;
  inline void clear_drivingtime();
  static const int kDrivingTimeFieldNumber = 2;
  inline ::google_public::protobuf::int32 drivingtime() const;
  inline void set_drivingtime(::google_public::protobuf::int32 value);

  // required int32 totalDistance = 3;
  inline bool has_totaldistance() const;
  inline void clear_totaldistance();
  static const int kTotalDistanceFieldNumber = 3;
  inline ::google_public::protobuf::int32 totaldistance() const;
  inline void set_totaldistance(::google_public::protobuf::int32 value);

  // required int32 unitPower = 4;
  inline bool has_unitpower() const;
  inline void clear_unitpower();
  static const int kUnitPowerFieldNumber = 4;
  inline ::google_public::protobuf::int32 unitpower() const;
  inline void set_unitpower(::google_public::protobuf::int32 value);

  // required int32 bluetoothPower = 5;
  inline bool has_bluetoothpower() const;
  inline void clear_bluetoothpower();
  static const int kBluetoothPowerFieldNumber = 5;
  inline ::google_public::protobuf::int32 bluetoothpower() const;
  inline void set_bluetoothpower(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.YDWInfo)
 private:
  inline void set_has_temperature();
  inline void clear_has_temperature();
  inline void set_has_drivingtime();
  inline void clear_has_drivingtime();
  inline void set_has_totaldistance();
  inline void clear_has_totaldistance();
  inline void set_has_unitpower();
  inline void clear_has_unitpower();
  inline void set_has_bluetoothpower();
  inline void clear_has_bluetoothpower();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int32 temperature_;
  ::google_public::protobuf::int32 drivingtime_;
  ::google_public::protobuf::int32 totaldistance_;
  ::google_public::protobuf::int32 unitpower_;
  ::google_public::protobuf::int32 bluetoothpower_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static YDWInfo* default_instance_;
};
// -------------------------------------------------------------------

class NodeLostInfo : public ::google_public::protobuf::Message {
 public:
  NodeLostInfo();
  virtual ~NodeLostInfo();

  NodeLostInfo(const NodeLostInfo& from);

  inline NodeLostInfo& operator=(const NodeLostInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const NodeLostInfo& default_instance();

  void Swap(NodeLostInfo* other);

  // implements Message ----------------------------------------------

  NodeLostInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const NodeLostInfo& from);
  void MergeFrom(const NodeLostInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 abs = 1;
  inline bool has_abs() const;
  inline void clear_abs();
  static const int kAbsFieldNumber = 1;
  inline ::google_public::protobuf::int32 abs() const;
  inline void set_abs(::google_public::protobuf::int32 value);

  // optional int32 esp = 2;
  inline bool has_esp() const;
  inline void clear_esp();
  static const int kEspFieldNumber = 2;
  inline ::google_public::protobuf::int32 esp() const;
  inline void set_esp(::google_public::protobuf::int32 value);

  // optional int32 ems = 3;
  inline bool has_ems() const;
  inline void clear_ems();
  static const int kEmsFieldNumber = 3;
  inline ::google_public::protobuf::int32 ems() const;
  inline void set_ems(::google_public::protobuf::int32 value);

  // optional int32 peps = 4;
  inline bool has_peps() const;
  inline void clear_peps();
  static const int kPepsFieldNumber = 4;
  inline ::google_public::protobuf::int32 peps() const;
  inline void set_peps(::google_public::protobuf::int32 value);

  // optional int32 tcu = 5;
  inline bool has_tcu() const;
  inline void clear_tcu();
  static const int kTcuFieldNumber = 5;
  inline ::google_public::protobuf::int32 tcu() const;
  inline void set_tcu(::google_public::protobuf::int32 value);

  // optional int32 bcm = 6;
  inline bool has_bcm() const;
  inline void clear_bcm();
  static const int kBcmFieldNumber = 6;
  inline ::google_public::protobuf::int32 bcm() const;
  inline void set_bcm(::google_public::protobuf::int32 value);

  // optional int32 icm = 7;
  inline bool has_icm() const;
  inline void clear_icm();
  static const int kIcmFieldNumber = 7;
  inline ::google_public::protobuf::int32 icm() const;
  inline void set_icm(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.NodeLostInfo)
 private:
  inline void set_has_abs();
  inline void clear_has_abs();
  inline void set_has_esp();
  inline void clear_has_esp();
  inline void set_has_ems();
  inline void clear_has_ems();
  inline void set_has_peps();
  inline void clear_has_peps();
  inline void set_has_tcu();
  inline void clear_has_tcu();
  inline void set_has_bcm();
  inline void clear_has_bcm();
  inline void set_has_icm();
  inline void clear_has_icm();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int32 abs_;
  ::google_public::protobuf::int32 esp_;
  ::google_public::protobuf::int32 ems_;
  ::google_public::protobuf::int32 peps_;
  ::google_public::protobuf::int32 tcu_;
  ::google_public::protobuf::int32 bcm_;
  ::google_public::protobuf::int32 icm_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static NodeLostInfo* default_instance_;
};
// -------------------------------------------------------------------

class NodeFaultInfo : public ::google_public::protobuf::Message {
 public:
  NodeFaultInfo();
  virtual ~NodeFaultInfo();

  NodeFaultInfo(const NodeFaultInfo& from);

  inline NodeFaultInfo& operator=(const NodeFaultInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const NodeFaultInfo& default_instance();

  void Swap(NodeFaultInfo* other);

  // implements Message ----------------------------------------------

  NodeFaultInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const NodeFaultInfo& from);
  void MergeFrom(const NodeFaultInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ebd = 1;
  inline bool has_ebd() const;
  inline void clear_ebd();
  static const int kEbdFieldNumber = 1;
  inline ::google_public::protobuf::int32 ebd() const;
  inline void set_ebd(::google_public::protobuf::int32 value);

  // optional int32 abs = 2;
  inline bool has_abs() const;
  inline void clear_abs();
  static const int kAbsFieldNumber = 2;
  inline ::google_public::protobuf::int32 abs() const;
  inline void set_abs(::google_public::protobuf::int32 value);

  // optional int32 esp = 3;
  inline bool has_esp() const;
  inline void clear_esp();
  static const int kEspFieldNumber = 3;
  inline ::google_public::protobuf::int32 esp() const;
  inline void set_esp(::google_public::protobuf::int32 value);

  // optional int32 svs = 4;
  inline bool has_svs() const;
  inline void clear_svs();
  static const int kSvsFieldNumber = 4;
  inline ::google_public::protobuf::int32 svs() const;
  inline void set_svs(::google_public::protobuf::int32 value);

  // optional int32 mil = 5;
  inline bool has_mil() const;
  inline void clear_mil();
  static const int kMilFieldNumber = 5;
  inline ::google_public::protobuf::int32 mil() const;
  inline void set_mil(::google_public::protobuf::int32 value);

  // optional int32 tcu = 6;
  inline bool has_tcu() const;
  inline void clear_tcu();
  static const int kTcuFieldNumber = 6;
  inline ::google_public::protobuf::int32 tcu() const;
  inline void set_tcu(::google_public::protobuf::int32 value);

  // optional int32 peps = 7;
  inline bool has_peps() const;
  inline void clear_peps();
  static const int kPepsFieldNumber = 7;
  inline ::google_public::protobuf::int32 peps() const;
  inline void set_peps(::google_public::protobuf::int32 value);

  // optional int32 tbox = 8;
  inline bool has_tbox() const;
  inline void clear_tbox();
  static const int kTboxFieldNumber = 8;
  inline ::google_public::protobuf::int32 tbox() const;
  inline void set_tbox(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.NodeFaultInfo)
 private:
  inline void set_has_ebd();
  inline void clear_has_ebd();
  inline void set_has_abs();
  inline void clear_has_abs();
  inline void set_has_esp();
  inline void clear_has_esp();
  inline void set_has_svs();
  inline void clear_has_svs();
  inline void set_has_mil();
  inline void clear_has_mil();
  inline void set_has_tcu();
  inline void clear_has_tcu();
  inline void set_has_peps();
  inline void clear_has_peps();
  inline void set_has_tbox();
  inline void clear_has_tbox();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int32 ebd_;
  ::google_public::protobuf::int32 abs_;
  ::google_public::protobuf::int32 esp_;
  ::google_public::protobuf::int32 svs_;
  ::google_public::protobuf::int32 mil_;
  ::google_public::protobuf::int32 tcu_;
  ::google_public::protobuf::int32 peps_;
  ::google_public::protobuf::int32 tbox_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static NodeFaultInfo* default_instance_;
};
// -------------------------------------------------------------------

class FaultLightStatus : public ::google_public::protobuf::Message {
 public:
  FaultLightStatus();
  virtual ~FaultLightStatus();

  FaultLightStatus(const FaultLightStatus& from);

  inline FaultLightStatus& operator=(const FaultLightStatus& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const FaultLightStatus& default_instance();

  void Swap(FaultLightStatus* other);

  // implements Message ----------------------------------------------

  FaultLightStatus* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const FaultLightStatus& from);
  void MergeFrom(const FaultLightStatus& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .gboss.NodeLostInfo nodeLostInfo = 1;
  inline bool has_nodelostinfo() const;
  inline void clear_nodelostinfo();
  static const int kNodeLostInfoFieldNumber = 1;
  inline const ::gboss::NodeLostInfo& nodelostinfo() const;
  inline ::gboss::NodeLostInfo* mutable_nodelostinfo();
  inline ::gboss::NodeLostInfo* release_nodelostinfo();
  inline void set_allocated_nodelostinfo(::gboss::NodeLostInfo* nodelostinfo);

  // optional .gboss.NodeFaultInfo nodeFaultInfo = 2;
  inline bool has_nodefaultinfo() const;
  inline void clear_nodefaultinfo();
  static const int kNodeFaultInfoFieldNumber = 2;
  inline const ::gboss::NodeFaultInfo& nodefaultinfo() const;
  inline ::gboss::NodeFaultInfo* mutable_nodefaultinfo();
  inline ::gboss::NodeFaultInfo* release_nodefaultinfo();
  inline void set_allocated_nodefaultinfo(::gboss::NodeFaultInfo* nodefaultinfo);

  // @@protoc_insertion_point(class_scope:gboss.FaultLightStatus)
 private:
  inline void set_has_nodelostinfo();
  inline void clear_has_nodelostinfo();
  inline void set_has_nodefaultinfo();
  inline void clear_has_nodefaultinfo();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::NodeLostInfo* nodelostinfo_;
  ::gboss::NodeFaultInfo* nodefaultinfo_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static FaultLightStatus* default_instance_;
};
// -------------------------------------------------------------------

class GpsBaseInfo : public ::google_public::protobuf::Message {
 public:
  GpsBaseInfo();
  virtual ~GpsBaseInfo();

  GpsBaseInfo(const GpsBaseInfo& from);

  inline GpsBaseInfo& operator=(const GpsBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GpsBaseInfo& default_instance();

  void Swap(GpsBaseInfo* other);

  // implements Message ----------------------------------------------

  GpsBaseInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GpsBaseInfo& from);
  void MergeFrom(const GpsBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 gpsTime = 1;
  inline bool has_gpstime() const;
  inline void clear_gpstime();
  static const int kGpsTimeFieldNumber = 1;
  inline ::google_public::protobuf::int64 gpstime() const;
  inline void set_gpstime(::google_public::protobuf::int64 value);

  // required bool loc = 2;
  inline bool has_loc() const;
  inline void clear_loc();
  static const int kLocFieldNumber = 2;
  inline bool loc() const;
  inline void set_loc(bool value);

  // required int32 lat = 3;
  inline bool has_lat() const;
  inline void clear_lat();
  static const int kLatFieldNumber = 3;
  inline ::google_public::protobuf::int32 lat() const;
  inline void set_lat(::google_public::protobuf::int32 value);

  // required int32 lng = 4;
  inline bool has_lng() const;
  inline void clear_lng();
  static const int kLngFieldNumber = 4;
  inline ::google_public::protobuf::int32 lng() const;
  inline void set_lng(::google_public::protobuf::int32 value);

  // required int32 speed = 5;
  inline bool has_speed() const;
  inline void clear_speed();
  static const int kSpeedFieldNumber = 5;
  inline ::google_public::protobuf::int32 speed() const;
  inline void set_speed(::google_public::protobuf::int32 value);

  // required int32 course = 6;
  inline bool has_course() const;
  inline void clear_course();
  static const int kCourseFieldNumber = 6;
  inline ::google_public::protobuf::int32 course() const;
  inline void set_course(::google_public::protobuf::int32 value);

  // repeated int32 status = 7;
  inline int status_size() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google_public::protobuf::int32 status(int index) const;
  inline void set_status(int index, ::google_public::protobuf::int32 value);
  inline void add_status(::google_public::protobuf::int32 value);
  inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
      status() const;
  inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
      mutable_status();

  // optional int32 totalDistance = 8;
  inline bool has_totaldistance() const;
  inline void clear_totaldistance();
  static const int kTotalDistanceFieldNumber = 8;
  inline ::google_public::protobuf::int32 totaldistance() const;
  inline void set_totaldistance(::google_public::protobuf::int32 value);

  // optional int32 oil = 9;
  inline bool has_oil() const;
  inline void clear_oil();
  static const int kOilFieldNumber = 9;
  inline ::google_public::protobuf::int32 oil() const;
  inline void set_oil(::google_public::protobuf::int32 value);

  // optional int32 oilPercent = 10;
  inline bool has_oilpercent() const;
  inline void clear_oilpercent();
  static const int kOilPercentFieldNumber = 10;
  inline ::google_public::protobuf::int32 oilpercent() const;
  inline void set_oilpercent(::google_public::protobuf::int32 value);

  // optional int32 temperature1 = 11;
  inline bool has_temperature1() const;
  inline void clear_temperature1();
  static const int kTemperature1FieldNumber = 11;
  inline ::google_public::protobuf::int32 temperature1() const;
  inline void set_temperature1(::google_public::protobuf::int32 value);

  // optional int32 temperature2 = 12;
  inline bool has_temperature2() const;
  inline void clear_temperature2();
  static const int kTemperature2FieldNumber = 12;
  inline ::google_public::protobuf::int32 temperature2() const;
  inline void set_temperature2(::google_public::protobuf::int32 value);

  // repeated .gboss.MapEntry appendParams = 13;
  inline int appendparams_size() const;
  inline void clear_appendparams();
  static const int kAppendParamsFieldNumber = 13;
  inline const ::gboss::MapEntry& appendparams(int index) const;
  inline ::gboss::MapEntry* mutable_appendparams(int index);
  inline ::gboss::MapEntry* add_appendparams();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >&
      appendparams() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >*
      mutable_appendparams();

  // optional .gboss.OBDInfo obdInfo = 14;
  inline bool has_obdinfo() const;
  inline void clear_obdinfo();
  static const int kObdInfoFieldNumber = 14;
  inline const ::gboss::OBDInfo& obdinfo() const;
  inline ::gboss::OBDInfo* mutable_obdinfo();
  inline ::gboss::OBDInfo* release_obdinfo();
  inline void set_allocated_obdinfo(::gboss::OBDInfo* obdinfo);

  // repeated .gboss.BaseStationInfo baseStations = 15;
  inline int basestations_size() const;
  inline void clear_basestations();
  static const int kBaseStationsFieldNumber = 15;
  inline const ::gboss::BaseStationInfo& basestations(int index) const;
  inline ::gboss::BaseStationInfo* mutable_basestations(int index);
  inline ::gboss::BaseStationInfo* add_basestations();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::BaseStationInfo >&
      basestations() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::BaseStationInfo >*
      mutable_basestations();

  // optional .gboss.BaseStationAddress address = 16;
  inline bool has_address() const;
  inline void clear_address();
  static const int kAddressFieldNumber = 16;
  inline const ::gboss::BaseStationAddress& address() const;
  inline ::gboss::BaseStationAddress* mutable_address();
  inline ::gboss::BaseStationAddress* release_address();
  inline void set_allocated_address(::gboss::BaseStationAddress* address);

  // optional .gboss.YDWInfo ydwInfo = 17;
  inline bool has_ydwinfo() const;
  inline void clear_ydwinfo();
  static const int kYdwInfoFieldNumber = 17;
  inline const ::gboss::YDWInfo& ydwinfo() const;
  inline ::gboss::YDWInfo* mutable_ydwinfo();
  inline ::gboss::YDWInfo* release_ydwinfo();
  inline void set_allocated_ydwinfo(::gboss::YDWInfo* ydwinfo);

  // optional int32 signal = 18;
  inline bool has_signal() const;
  inline void clear_signal();
  static const int kSignalFieldNumber = 18;
  inline ::google_public::protobuf::int32 signal() const;
  inline void set_signal(::google_public::protobuf::int32 value);

  // optional .gboss.FaultLightStatus faultLightStatus = 19;
  inline bool has_faultlightstatus() const;
  inline void clear_faultlightstatus();
  static const int kFaultLightStatusFieldNumber = 19;
  inline const ::gboss::FaultLightStatus& faultlightstatus() const;
  inline ::gboss::FaultLightStatus* mutable_faultlightstatus();
  inline ::gboss::FaultLightStatus* release_faultlightstatus();
  inline void set_allocated_faultlightstatus(::gboss::FaultLightStatus* faultlightstatus);

  // @@protoc_insertion_point(class_scope:gboss.GpsBaseInfo)
 private:
  inline void set_has_gpstime();
  inline void clear_has_gpstime();
  inline void set_has_loc();
  inline void clear_has_loc();
  inline void set_has_lat();
  inline void clear_has_lat();
  inline void set_has_lng();
  inline void clear_has_lng();
  inline void set_has_speed();
  inline void clear_has_speed();
  inline void set_has_course();
  inline void clear_has_course();
  inline void set_has_totaldistance();
  inline void clear_has_totaldistance();
  inline void set_has_oil();
  inline void clear_has_oil();
  inline void set_has_oilpercent();
  inline void clear_has_oilpercent();
  inline void set_has_temperature1();
  inline void clear_has_temperature1();
  inline void set_has_temperature2();
  inline void clear_has_temperature2();
  inline void set_has_obdinfo();
  inline void clear_has_obdinfo();
  inline void set_has_address();
  inline void clear_has_address();
  inline void set_has_ydwinfo();
  inline void clear_has_ydwinfo();
  inline void set_has_signal();
  inline void clear_has_signal();
  inline void set_has_faultlightstatus();
  inline void clear_has_faultlightstatus();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int64 gpstime_;
  bool loc_;
  ::google_public::protobuf::int32 lat_;
  ::google_public::protobuf::int32 lng_;
  ::google_public::protobuf::int32 speed_;
  ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 > status_;
  ::google_public::protobuf::int32 course_;
  ::google_public::protobuf::int32 totaldistance_;
  ::google_public::protobuf::int32 oil_;
  ::google_public::protobuf::int32 oilpercent_;
  ::google_public::protobuf::int32 temperature1_;
  ::google_public::protobuf::int32 temperature2_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry > appendparams_;
  ::gboss::OBDInfo* obdinfo_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::BaseStationInfo > basestations_;
  ::gboss::BaseStationAddress* address_;
  ::gboss::YDWInfo* ydwinfo_;
  ::gboss::FaultLightStatus* faultlightstatus_;
  ::google_public::protobuf::int32 signal_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static GpsBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class GpsRoadInfo : public ::google_public::protobuf::Message {
 public:
  GpsRoadInfo();
  virtual ~GpsRoadInfo();

  GpsRoadInfo(const GpsRoadInfo& from);

  inline GpsRoadInfo& operator=(const GpsRoadInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GpsRoadInfo& default_instance();

  void Swap(GpsRoadInfo* other);

  // implements Message ----------------------------------------------

  GpsRoadInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GpsRoadInfo& from);
  void MergeFrom(const GpsRoadInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google_public::protobuf::int32 level() const;
  inline void set_level(::google_public::protobuf::int32 value);

  // required int32 distance = 3;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 3;
  inline ::google_public::protobuf::int32 distance() const;
  inline void set_distance(::google_public::protobuf::int32 value);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google_public::protobuf::int32 id() const;
  inline void set_id(::google_public::protobuf::int32 value);

  // optional int32 latOnRoad = 5;
  inline bool has_latonroad() const;
  inline void clear_latonroad();
  static const int kLatOnRoadFieldNumber = 5;
  inline ::google_public::protobuf::int32 latonroad() const;
  inline void set_latonroad(::google_public::protobuf::int32 value);

  // optional int32 lngOnRoad = 6;
  inline bool has_lngonroad() const;
  inline void clear_lngonroad();
  static const int kLngOnRoadFieldNumber = 6;
  inline ::google_public::protobuf::int32 lngonroad() const;
  inline void set_lngonroad(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.GpsRoadInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_latonroad();
  inline void clear_has_latonroad();
  inline void set_has_lngonroad();
  inline void clear_has_lngonroad();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google_public::protobuf::int32 level_;
  ::google_public::protobuf::int32 distance_;
  ::google_public::protobuf::int32 id_;
  ::google_public::protobuf::int32 latonroad_;
  ::google_public::protobuf::int32 lngonroad_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static GpsRoadInfo* default_instance_;
};
// -------------------------------------------------------------------

class GpsPointInfo : public ::google_public::protobuf::Message {
 public:
  GpsPointInfo();
  virtual ~GpsPointInfo();

  GpsPointInfo(const GpsPointInfo& from);

  inline GpsPointInfo& operator=(const GpsPointInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GpsPointInfo& default_instance();

  void Swap(GpsPointInfo* other);

  // implements Message ----------------------------------------------

  GpsPointInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GpsPointInfo& from);
  void MergeFrom(const GpsPointInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google_public::protobuf::int32 type() const;
  inline void set_type(::google_public::protobuf::int32 value);

  // required int32 distance = 3;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 3;
  inline ::google_public::protobuf::int32 distance() const;
  inline void set_distance(::google_public::protobuf::int32 value);

  // optional int32 id = 4;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 4;
  inline ::google_public::protobuf::int32 id() const;
  inline void set_id(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.GpsPointInfo)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_id();
  inline void clear_has_id();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* name_;
  ::google_public::protobuf::int32 type_;
  ::google_public::protobuf::int32 distance_;
  ::google_public::protobuf::int32 id_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static GpsPointInfo* default_instance_;
};
// -------------------------------------------------------------------

class GpsReferPosition : public ::google_public::protobuf::Message {
 public:
  GpsReferPosition();
  virtual ~GpsReferPosition();

  GpsReferPosition(const GpsReferPosition& from);

  inline GpsReferPosition& operator=(const GpsReferPosition& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GpsReferPosition& default_instance();

  void Swap(GpsReferPosition* other);

  // implements Message ----------------------------------------------

  GpsReferPosition* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GpsReferPosition& from);
  void MergeFrom(const GpsReferPosition& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string province = 1;
  inline bool has_province() const;
  inline void clear_province();
  static const int kProvinceFieldNumber = 1;
  inline const ::std::string& province() const;
  inline void set_province(const ::std::string& value);
  inline void set_province(const char* value);
  inline void set_province(const char* value, size_t size);
  inline ::std::string* mutable_province();
  inline ::std::string* release_province();
  inline void set_allocated_province(::std::string* province);

  // required string city = 2;
  inline bool has_city() const;
  inline void clear_city();
  static const int kCityFieldNumber = 2;
  inline const ::std::string& city() const;
  inline void set_city(const ::std::string& value);
  inline void set_city(const char* value);
  inline void set_city(const char* value, size_t size);
  inline ::std::string* mutable_city();
  inline ::std::string* release_city();
  inline void set_allocated_city(::std::string* city);

  // required string county = 3;
  inline bool has_county() const;
  inline void clear_county();
  static const int kCountyFieldNumber = 3;
  inline const ::std::string& county() const;
  inline void set_county(const ::std::string& value);
  inline void set_county(const char* value);
  inline void set_county(const char* value, size_t size);
  inline ::std::string* mutable_county();
  inline ::std::string* release_county();
  inline void set_allocated_county(::std::string* county);

  // repeated .gboss.GpsRoadInfo roads = 4;
  inline int roads_size() const;
  inline void clear_roads();
  static const int kRoadsFieldNumber = 4;
  inline const ::gboss::GpsRoadInfo& roads(int index) const;
  inline ::gboss::GpsRoadInfo* mutable_roads(int index);
  inline ::gboss::GpsRoadInfo* add_roads();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsRoadInfo >&
      roads() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsRoadInfo >*
      mutable_roads();

  // repeated .gboss.GpsPointInfo points = 5;
  inline int points_size() const;
  inline void clear_points();
  static const int kPointsFieldNumber = 5;
  inline const ::gboss::GpsPointInfo& points(int index) const;
  inline ::gboss::GpsPointInfo* mutable_points(int index);
  inline ::gboss::GpsPointInfo* add_points();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsPointInfo >&
      points() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsPointInfo >*
      mutable_points();

  // @@protoc_insertion_point(class_scope:gboss.GpsReferPosition)
 private:
  inline void set_has_province();
  inline void clear_has_province();
  inline void set_has_city();
  inline void clear_has_city();
  inline void set_has_county();
  inline void clear_has_county();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* province_;
  ::std::string* city_;
  ::std::string* county_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsRoadInfo > roads_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsPointInfo > points_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static GpsReferPosition* default_instance_;
};
// -------------------------------------------------------------------

class GpsInfo : public ::google_public::protobuf::Message {
 public:
  GpsInfo();
  virtual ~GpsInfo();

  GpsInfo(const GpsInfo& from);

  inline GpsInfo& operator=(const GpsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GpsInfo& default_instance();

  void Swap(GpsInfo* other);

  // implements Message ----------------------------------------------

  GpsInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GpsInfo& from);
  void MergeFrom(const GpsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required .gboss.GpsBaseInfo baseInfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::gboss::GpsBaseInfo& baseinfo() const;
  inline ::gboss::GpsBaseInfo* mutable_baseinfo();
  inline ::gboss::GpsBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::gboss::GpsBaseInfo* baseinfo);

  // optional .gboss.GpsReferPosition referPosition = 3;
  inline bool has_referposition() const;
  inline void clear_referposition();
  static const int kReferPositionFieldNumber = 3;
  inline const ::gboss::GpsReferPosition& referposition() const;
  inline ::gboss::GpsReferPosition* mutable_referposition();
  inline ::gboss::GpsReferPosition* release_referposition();
  inline void set_allocated_referposition(::gboss::GpsReferPosition* referposition);

  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 history = 5;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 5;
  inline ::google_public::protobuf::int32 history() const;
  inline void set_history(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.GpsInfo)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_referposition();
  inline void clear_has_referposition();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_history();
  inline void clear_has_history();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::gboss::GpsBaseInfo* baseinfo_;
  ::gboss::GpsReferPosition* referposition_;
  ::std::string* content_;
  ::google_public::protobuf::int32 history_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static GpsInfo* default_instance_;
};
// -------------------------------------------------------------------

class AlarmInfo : public ::google_public::protobuf::Message {
 public:
  AlarmInfo();
  virtual ~AlarmInfo();

  AlarmInfo(const AlarmInfo& from);

  inline AlarmInfo& operator=(const AlarmInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const AlarmInfo& default_instance();

  void Swap(AlarmInfo* other);

  // implements Message ----------------------------------------------

  AlarmInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const AlarmInfo& from);
  void MergeFrom(const AlarmInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required .gboss.GpsBaseInfo baseInfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::gboss::GpsBaseInfo& baseinfo() const;
  inline ::gboss::GpsBaseInfo* mutable_baseinfo();
  inline ::gboss::GpsBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::gboss::GpsBaseInfo* baseinfo);

  // optional .gboss.GpsReferPosition referPosition = 3;
  inline bool has_referposition() const;
  inline void clear_referposition();
  static const int kReferPositionFieldNumber = 3;
  inline const ::gboss::GpsReferPosition& referposition() const;
  inline ::gboss::GpsReferPosition* mutable_referposition();
  inline ::gboss::GpsReferPosition* release_referposition();
  inline void set_allocated_referposition(::gboss::GpsReferPosition* referposition);

  // optional bytes content = 4;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 4;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 history = 5;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 5;
  inline ::google_public::protobuf::int32 history() const;
  inline void set_history(::google_public::protobuf::int32 value);

  // optional int32 unittype = 6;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnittypeFieldNumber = 6;
  inline ::google_public::protobuf::int32 unittype() const;
  inline void set_unittype(::google_public::protobuf::int32 value);

  // optional int32 trigger = 7;
  inline bool has_trigger() const;
  inline void clear_trigger();
  static const int kTriggerFieldNumber = 7;
  inline ::google_public::protobuf::int32 trigger() const;
  inline void set_trigger(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.AlarmInfo)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_referposition();
  inline void clear_has_referposition();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_history();
  inline void clear_has_history();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_trigger();
  inline void clear_has_trigger();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::gboss::GpsBaseInfo* baseinfo_;
  ::gboss::GpsReferPosition* referposition_;
  ::std::string* content_;
  ::google_public::protobuf::int32 history_;
  ::google_public::protobuf::int32 unittype_;
  ::google_public::protobuf::int32 trigger_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static AlarmInfo* default_instance_;
};
// -------------------------------------------------------------------

class UnitVersion : public ::google_public::protobuf::Message {
 public:
  UnitVersion();
  virtual ~UnitVersion();

  UnitVersion(const UnitVersion& from);

  inline UnitVersion& operator=(const UnitVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const UnitVersion& default_instance();

  void Swap(UnitVersion* other);

  // implements Message ----------------------------------------------

  UnitVersion* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const UnitVersion& from);
  void MergeFrom(const UnitVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required string version = 2;
  inline bool has_version() const;
  inline void clear_version();
  static const int kVersionFieldNumber = 2;
  inline const ::std::string& version() const;
  inline void set_version(const ::std::string& value);
  inline void set_version(const char* value);
  inline void set_version(const char* value, size_t size);
  inline ::std::string* mutable_version();
  inline ::std::string* release_version();
  inline void set_allocated_version(::std::string* version);

  // optional int32 result = 3;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 3;
  inline ::google_public::protobuf::int32 result() const;
  inline void set_result(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.UnitVersion)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_version();
  inline void clear_has_version();
  inline void set_has_result();
  inline void clear_has_result();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::std::string* version_;
  ::google_public::protobuf::int32 result_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static UnitVersion* default_instance_;
};
// -------------------------------------------------------------------

class OperateDataBaseInfo : public ::google_public::protobuf::Message {
 public:
  OperateDataBaseInfo();
  virtual ~OperateDataBaseInfo();

  OperateDataBaseInfo(const OperateDataBaseInfo& from);

  inline OperateDataBaseInfo& operator=(const OperateDataBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const OperateDataBaseInfo& default_instance();

  void Swap(OperateDataBaseInfo* other);

  // implements Message ----------------------------------------------

  OperateDataBaseInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const OperateDataBaseInfo& from);
  void MergeFrom(const OperateDataBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 price = 1;
  inline bool has_price() const;
  inline void clear_price();
  static const int kPriceFieldNumber = 1;
  inline ::google_public::protobuf::int32 price() const;
  inline void set_price(::google_public::protobuf::int32 value);

  // required int32 countTime = 2;
  inline bool has_counttime() const;
  inline void clear_counttime();
  static const int kCountTimeFieldNumber = 2;
  inline ::google_public::protobuf::int32 counttime() const;
  inline void set_counttime(::google_public::protobuf::int32 value);

  // required int32 operateMoney = 3;
  inline bool has_operatemoney() const;
  inline void clear_operatemoney();
  static const int kOperateMoneyFieldNumber = 3;
  inline ::google_public::protobuf::int32 operatemoney() const;
  inline void set_operatemoney(::google_public::protobuf::int32 value);

  // required int32 operateMile = 4;
  inline bool has_operatemile() const;
  inline void clear_operatemile();
  static const int kOperateMileFieldNumber = 4;
  inline ::google_public::protobuf::int32 operatemile() const;
  inline void set_operatemile(::google_public::protobuf::int32 value);

  // optional int32 nullMile = 5;
  inline bool has_nullmile() const;
  inline void clear_nullmile();
  static const int kNullMileFieldNumber = 5;
  inline ::google_public::protobuf::int32 nullmile() const;
  inline void set_nullmile(::google_public::protobuf::int32 value);

  // optional int32 overSpeedMile = 6;
  inline bool has_overspeedmile() const;
  inline void clear_overspeedmile();
  static const int kOverSpeedMileFieldNumber = 6;
  inline ::google_public::protobuf::int32 overspeedmile() const;
  inline void set_overspeedmile(::google_public::protobuf::int32 value);

  // optional int32 overSpeedCount = 7;
  inline bool has_overspeedcount() const;
  inline void clear_overspeedcount();
  static const int kOverSpeedCountFieldNumber = 7;
  inline ::google_public::protobuf::int32 overspeedcount() const;
  inline void set_overspeedcount(::google_public::protobuf::int32 value);

  // optional int32 powerOffCount = 8;
  inline bool has_poweroffcount() const;
  inline void clear_poweroffcount();
  static const int kPowerOffCountFieldNumber = 8;
  inline ::google_public::protobuf::int32 poweroffcount() const;
  inline void set_poweroffcount(::google_public::protobuf::int32 value);

  // optional int32 powerOffTime = 9;
  inline bool has_powerofftime() const;
  inline void clear_powerofftime();
  static const int kPowerOffTimeFieldNumber = 9;
  inline ::google_public::protobuf::int32 powerofftime() const;
  inline void set_powerofftime(::google_public::protobuf::int32 value);

  // optional int32 sequenceNo = 10;
  inline bool has_sequenceno() const;
  inline void clear_sequenceno();
  static const int kSequenceNoFieldNumber = 10;
  inline ::google_public::protobuf::int32 sequenceno() const;
  inline void set_sequenceno(::google_public::protobuf::int32 value);

  // repeated .gboss.MapEntry appendParams = 11;
  inline int appendparams_size() const;
  inline void clear_appendparams();
  static const int kAppendParamsFieldNumber = 11;
  inline const ::gboss::MapEntry& appendparams(int index) const;
  inline ::gboss::MapEntry* mutable_appendparams(int index);
  inline ::gboss::MapEntry* add_appendparams();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >&
      appendparams() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >*
      mutable_appendparams();

  // optional int32 perprice = 12;
  inline bool has_perprice() const;
  inline void clear_perprice();
  static const int kPerpriceFieldNumber = 12;
  inline ::google_public::protobuf::int32 perprice() const;
  inline void set_perprice(::google_public::protobuf::int32 value);

  // optional string licenseno = 13;
  inline bool has_licenseno() const;
  inline void clear_licenseno();
  static const int kLicensenoFieldNumber = 13;
  inline const ::std::string& licenseno() const;
  inline void set_licenseno(const ::std::string& value);
  inline void set_licenseno(const char* value);
  inline void set_licenseno(const char* value, size_t size);
  inline ::std::string* mutable_licenseno();
  inline ::std::string* release_licenseno();
  inline void set_allocated_licenseno(::std::string* licenseno);

  // @@protoc_insertion_point(class_scope:gboss.OperateDataBaseInfo)
 private:
  inline void set_has_price();
  inline void clear_has_price();
  inline void set_has_counttime();
  inline void clear_has_counttime();
  inline void set_has_operatemoney();
  inline void clear_has_operatemoney();
  inline void set_has_operatemile();
  inline void clear_has_operatemile();
  inline void set_has_nullmile();
  inline void clear_has_nullmile();
  inline void set_has_overspeedmile();
  inline void clear_has_overspeedmile();
  inline void set_has_overspeedcount();
  inline void clear_has_overspeedcount();
  inline void set_has_poweroffcount();
  inline void clear_has_poweroffcount();
  inline void set_has_powerofftime();
  inline void clear_has_powerofftime();
  inline void set_has_sequenceno();
  inline void clear_has_sequenceno();
  inline void set_has_perprice();
  inline void clear_has_perprice();
  inline void set_has_licenseno();
  inline void clear_has_licenseno();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::int32 price_;
  ::google_public::protobuf::int32 counttime_;
  ::google_public::protobuf::int32 operatemoney_;
  ::google_public::protobuf::int32 operatemile_;
  ::google_public::protobuf::int32 nullmile_;
  ::google_public::protobuf::int32 overspeedmile_;
  ::google_public::protobuf::int32 overspeedcount_;
  ::google_public::protobuf::int32 poweroffcount_;
  ::google_public::protobuf::int32 powerofftime_;
  ::google_public::protobuf::int32 sequenceno_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry > appendparams_;
  ::std::string* licenseno_;
  ::google_public::protobuf::int32 perprice_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static OperateDataBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class OperateData : public ::google_public::protobuf::Message {
 public:
  OperateData();
  virtual ~OperateData();

  OperateData(const OperateData& from);

  inline OperateData& operator=(const OperateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const OperateData& default_instance();

  void Swap(OperateData* other);

  // implements Message ----------------------------------------------

  OperateData* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const OperateData& from);
  void MergeFrom(const OperateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required .gboss.OperateDataBaseInfo baseInfo = 2;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 2;
  inline const ::gboss::OperateDataBaseInfo& baseinfo() const;
  inline ::gboss::OperateDataBaseInfo* mutable_baseinfo();
  inline ::gboss::OperateDataBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::gboss::OperateDataBaseInfo* baseinfo);

  // required .gboss.GpsBaseInfo startGps = 3;
  inline bool has_startgps() const;
  inline void clear_startgps();
  static const int kStartGpsFieldNumber = 3;
  inline const ::gboss::GpsBaseInfo& startgps() const;
  inline ::gboss::GpsBaseInfo* mutable_startgps();
  inline ::gboss::GpsBaseInfo* release_startgps();
  inline void set_allocated_startgps(::gboss::GpsBaseInfo* startgps);

  // optional .gboss.GpsReferPosition startPoi = 4;
  inline bool has_startpoi() const;
  inline void clear_startpoi();
  static const int kStartPoiFieldNumber = 4;
  inline const ::gboss::GpsReferPosition& startpoi() const;
  inline ::gboss::GpsReferPosition* mutable_startpoi();
  inline ::gboss::GpsReferPosition* release_startpoi();
  inline void set_allocated_startpoi(::gboss::GpsReferPosition* startpoi);

  // required .gboss.GpsBaseInfo stopGps = 5;
  inline bool has_stopgps() const;
  inline void clear_stopgps();
  static const int kStopGpsFieldNumber = 5;
  inline const ::gboss::GpsBaseInfo& stopgps() const;
  inline ::gboss::GpsBaseInfo* mutable_stopgps();
  inline ::gboss::GpsBaseInfo* release_stopgps();
  inline void set_allocated_stopgps(::gboss::GpsBaseInfo* stopgps);

  // optional .gboss.GpsReferPosition stopPoi = 6;
  inline bool has_stoppoi() const;
  inline void clear_stoppoi();
  static const int kStopPoiFieldNumber = 6;
  inline const ::gboss::GpsReferPosition& stoppoi() const;
  inline ::gboss::GpsReferPosition* mutable_stoppoi();
  inline ::gboss::GpsReferPosition* release_stoppoi();
  inline void set_allocated_stoppoi(::gboss::GpsReferPosition* stoppoi);

  // optional bytes content = 7;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 7;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional int32 history = 8;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 8;
  inline ::google_public::protobuf::int32 history() const;
  inline void set_history(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.OperateData)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_startgps();
  inline void clear_has_startgps();
  inline void set_has_startpoi();
  inline void clear_has_startpoi();
  inline void set_has_stopgps();
  inline void clear_has_stopgps();
  inline void set_has_stoppoi();
  inline void clear_has_stoppoi();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_history();
  inline void clear_has_history();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::gboss::OperateDataBaseInfo* baseinfo_;
  ::gboss::GpsBaseInfo* startgps_;
  ::gboss::GpsReferPosition* startpoi_;
  ::gboss::GpsBaseInfo* stopgps_;
  ::gboss::GpsReferPosition* stoppoi_;
  ::std::string* content_;
  ::google_public::protobuf::int32 history_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static OperateData* default_instance_;
};
// -------------------------------------------------------------------

class ShortMessage : public ::google_public::protobuf::Message {
 public:
  ShortMessage();
  virtual ~ShortMessage();

  ShortMessage(const ShortMessage& from);

  inline ShortMessage& operator=(const ShortMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ShortMessage& default_instance();

  void Swap(ShortMessage* other);

  // implements Message ----------------------------------------------

  ShortMessage* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ShortMessage& from);
  void MergeFrom(const ShortMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required string msg = 2;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 2;
  inline const ::std::string& msg() const;
  inline void set_msg(const ::std::string& value);
  inline void set_msg(const char* value);
  inline void set_msg(const char* value, size_t size);
  inline ::std::string* mutable_msg();
  inline ::std::string* release_msg();
  inline void set_allocated_msg(::std::string* msg);

  // optional int64 recvTime = 3;
  inline bool has_recvtime() const;
  inline void clear_recvtime();
  static const int kRecvTimeFieldNumber = 3;
  inline ::google_public::protobuf::int64 recvtime() const;
  inline void set_recvtime(::google_public::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:gboss.ShortMessage)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_recvtime();
  inline void clear_has_recvtime();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::std::string* msg_;
  ::google_public::protobuf::int64 recvtime_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static ShortMessage* default_instance_;
};
// -------------------------------------------------------------------

class TravelInfo : public ::google_public::protobuf::Message {
 public:
  TravelInfo();
  virtual ~TravelInfo();

  TravelInfo(const TravelInfo& from);

  inline TravelInfo& operator=(const TravelInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const TravelInfo& default_instance();

  void Swap(TravelInfo* other);

  // implements Message ----------------------------------------------

  TravelInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const TravelInfo& from);
  void MergeFrom(const TravelInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int64 startTime = 2;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStartTimeFieldNumber = 2;
  inline ::google_public::protobuf::int64 starttime() const;
  inline void set_starttime(::google_public::protobuf::int64 value);

  // required int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google_public::protobuf::int64 endtime() const;
  inline void set_endtime(::google_public::protobuf::int64 value);

  // optional int32 distance = 4;
  inline bool has_distance() const;
  inline void clear_distance();
  static const int kDistanceFieldNumber = 4;
  inline ::google_public::protobuf::int32 distance() const;
  inline void set_distance(::google_public::protobuf::int32 value);

  // optional int32 maxSpeed = 5;
  inline bool has_maxspeed() const;
  inline void clear_maxspeed();
  static const int kMaxSpeedFieldNumber = 5;
  inline ::google_public::protobuf::int32 maxspeed() const;
  inline void set_maxspeed(::google_public::protobuf::int32 value);

  // optional int32 overSpeedTime = 6;
  inline bool has_overspeedtime() const;
  inline void clear_overspeedtime();
  static const int kOverSpeedTimeFieldNumber = 6;
  inline ::google_public::protobuf::int32 overspeedtime() const;
  inline void set_overspeedtime(::google_public::protobuf::int32 value);

  // optional int32 quickBrakeCount = 7;
  inline bool has_quickbrakecount() const;
  inline void clear_quickbrakecount();
  static const int kQuickBrakeCountFieldNumber = 7;
  inline ::google_public::protobuf::int32 quickbrakecount() const;
  inline void set_quickbrakecount(::google_public::protobuf::int32 value);

  // optional int32 emergencyBrakeCount = 8;
  inline bool has_emergencybrakecount() const;
  inline void clear_emergencybrakecount();
  static const int kEmergencyBrakeCountFieldNumber = 8;
  inline ::google_public::protobuf::int32 emergencybrakecount() const;
  inline void set_emergencybrakecount(::google_public::protobuf::int32 value);

  // optional int32 quickSpeedUpCount = 9;
  inline bool has_quickspeedupcount() const;
  inline void clear_quickspeedupcount();
  static const int kQuickSpeedUpCountFieldNumber = 9;
  inline ::google_public::protobuf::int32 quickspeedupcount() const;
  inline void set_quickspeedupcount(::google_public::protobuf::int32 value);

  // optional int32 emergencySpeedUpCount = 10;
  inline bool has_emergencyspeedupcount() const;
  inline void clear_emergencyspeedupcount();
  static const int kEmergencySpeedUpCountFieldNumber = 10;
  inline ::google_public::protobuf::int32 emergencyspeedupcount() const;
  inline void set_emergencyspeedupcount(::google_public::protobuf::int32 value);

  // optional int32 averageSpeed = 11;
  inline bool has_averagespeed() const;
  inline void clear_averagespeed();
  static const int kAverageSpeedFieldNumber = 11;
  inline ::google_public::protobuf::int32 averagespeed() const;
  inline void set_averagespeed(::google_public::protobuf::int32 value);

  // optional int32 maxWaterTemperature = 12;
  inline bool has_maxwatertemperature() const;
  inline void clear_maxwatertemperature();
  static const int kMaxWaterTemperatureFieldNumber = 12;
  inline ::google_public::protobuf::int32 maxwatertemperature() const;
  inline void set_maxwatertemperature(::google_public::protobuf::int32 value);

  // optional int32 maxRotationSpeed = 13;
  inline bool has_maxrotationspeed() const;
  inline void clear_maxrotationspeed();
  static const int kMaxRotationSpeedFieldNumber = 13;
  inline ::google_public::protobuf::int32 maxrotationspeed() const;
  inline void set_maxrotationspeed(::google_public::protobuf::int32 value);

  // optional int32 voltage = 14;
  inline bool has_voltage() const;
  inline void clear_voltage();
  static const int kVoltageFieldNumber = 14;
  inline ::google_public::protobuf::int32 voltage() const;
  inline void set_voltage(::google_public::protobuf::int32 value);

  // optional int32 totalOil = 15;
  inline bool has_totaloil() const;
  inline void clear_totaloil();
  static const int kTotalOilFieldNumber = 15;
  inline ::google_public::protobuf::int32 totaloil() const;
  inline void set_totaloil(::google_public::protobuf::int32 value);

  // optional int32 averageOil = 16;
  inline bool has_averageoil() const;
  inline void clear_averageoil();
  static const int kAverageOilFieldNumber = 16;
  inline ::google_public::protobuf::int32 averageoil() const;
  inline void set_averageoil(::google_public::protobuf::int32 value);

  // optional int32 tiredDrivingTime = 17;
  inline bool has_tireddrivingtime() const;
  inline void clear_tireddrivingtime();
  static const int kTiredDrivingTimeFieldNumber = 17;
  inline ::google_public::protobuf::int32 tireddrivingtime() const;
  inline void set_tireddrivingtime(::google_public::protobuf::int32 value);

  // optional int32 serialNumber = 18;
  inline bool has_serialnumber() const;
  inline void clear_serialnumber();
  static const int kSerialNumberFieldNumber = 18;
  inline ::google_public::protobuf::int32 serialnumber() const;
  inline void set_serialnumber(::google_public::protobuf::int32 value);

  // optional int32 averageRotationSpeed = 19;
  inline bool has_averagerotationspeed() const;
  inline void clear_averagerotationspeed();
  static const int kAverageRotationSpeedFieldNumber = 19;
  inline ::google_public::protobuf::int32 averagerotationspeed() const;
  inline void set_averagerotationspeed(::google_public::protobuf::int32 value);

  // optional int32 maxOil = 20;
  inline bool has_maxoil() const;
  inline void clear_maxoil();
  static const int kMaxOilFieldNumber = 20;
  inline ::google_public::protobuf::int32 maxoil() const;
  inline void set_maxoil(::google_public::protobuf::int32 value);

  // optional int32 idleTime = 21;
  inline bool has_idletime() const;
  inline void clear_idletime();
  static const int kIdleTimeFieldNumber = 21;
  inline ::google_public::protobuf::int32 idletime() const;
  inline void set_idletime(::google_public::protobuf::int32 value);

  // optional .gboss.GpsBaseInfo startGps = 22;
  inline bool has_startgps() const;
  inline void clear_startgps();
  static const int kStartGpsFieldNumber = 22;
  inline const ::gboss::GpsBaseInfo& startgps() const;
  inline ::gboss::GpsBaseInfo* mutable_startgps();
  inline ::gboss::GpsBaseInfo* release_startgps();
  inline void set_allocated_startgps(::gboss::GpsBaseInfo* startgps);

  // optional .gboss.GpsReferPosition startReferPos = 23;
  inline bool has_startreferpos() const;
  inline void clear_startreferpos();
  static const int kStartReferPosFieldNumber = 23;
  inline const ::gboss::GpsReferPosition& startreferpos() const;
  inline ::gboss::GpsReferPosition* mutable_startreferpos();
  inline ::gboss::GpsReferPosition* release_startreferpos();
  inline void set_allocated_startreferpos(::gboss::GpsReferPosition* startreferpos);

  // optional .gboss.GpsBaseInfo endGps = 24;
  inline bool has_endgps() const;
  inline void clear_endgps();
  static const int kEndGpsFieldNumber = 24;
  inline const ::gboss::GpsBaseInfo& endgps() const;
  inline ::gboss::GpsBaseInfo* mutable_endgps();
  inline ::gboss::GpsBaseInfo* release_endgps();
  inline void set_allocated_endgps(::gboss::GpsBaseInfo* endgps);

  // optional .gboss.GpsReferPosition endReferPos = 25;
  inline bool has_endreferpos() const;
  inline void clear_endreferpos();
  static const int kEndReferPosFieldNumber = 25;
  inline const ::gboss::GpsReferPosition& endreferpos() const;
  inline ::gboss::GpsReferPosition* mutable_endreferpos();
  inline ::gboss::GpsReferPosition* release_endreferpos();
  inline void set_allocated_endreferpos(::gboss::GpsReferPosition* endreferpos);

  // optional int32 history = 26;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 26;
  inline ::google_public::protobuf::int32 history() const;
  inline void set_history(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.TravelInfo)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_distance();
  inline void clear_has_distance();
  inline void set_has_maxspeed();
  inline void clear_has_maxspeed();
  inline void set_has_overspeedtime();
  inline void clear_has_overspeedtime();
  inline void set_has_quickbrakecount();
  inline void clear_has_quickbrakecount();
  inline void set_has_emergencybrakecount();
  inline void clear_has_emergencybrakecount();
  inline void set_has_quickspeedupcount();
  inline void clear_has_quickspeedupcount();
  inline void set_has_emergencyspeedupcount();
  inline void clear_has_emergencyspeedupcount();
  inline void set_has_averagespeed();
  inline void clear_has_averagespeed();
  inline void set_has_maxwatertemperature();
  inline void clear_has_maxwatertemperature();
  inline void set_has_maxrotationspeed();
  inline void clear_has_maxrotationspeed();
  inline void set_has_voltage();
  inline void clear_has_voltage();
  inline void set_has_totaloil();
  inline void clear_has_totaloil();
  inline void set_has_averageoil();
  inline void clear_has_averageoil();
  inline void set_has_tireddrivingtime();
  inline void clear_has_tireddrivingtime();
  inline void set_has_serialnumber();
  inline void clear_has_serialnumber();
  inline void set_has_averagerotationspeed();
  inline void clear_has_averagerotationspeed();
  inline void set_has_maxoil();
  inline void clear_has_maxoil();
  inline void set_has_idletime();
  inline void clear_has_idletime();
  inline void set_has_startgps();
  inline void clear_has_startgps();
  inline void set_has_startreferpos();
  inline void clear_has_startreferpos();
  inline void set_has_endgps();
  inline void clear_has_endgps();
  inline void set_has_endreferpos();
  inline void clear_has_endreferpos();
  inline void set_has_history();
  inline void clear_has_history();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::google_public::protobuf::int64 starttime_;
  ::google_public::protobuf::int64 endtime_;
  ::google_public::protobuf::int32 distance_;
  ::google_public::protobuf::int32 maxspeed_;
  ::google_public::protobuf::int32 overspeedtime_;
  ::google_public::protobuf::int32 quickbrakecount_;
  ::google_public::protobuf::int32 emergencybrakecount_;
  ::google_public::protobuf::int32 quickspeedupcount_;
  ::google_public::protobuf::int32 emergencyspeedupcount_;
  ::google_public::protobuf::int32 averagespeed_;
  ::google_public::protobuf::int32 maxwatertemperature_;
  ::google_public::protobuf::int32 maxrotationspeed_;
  ::google_public::protobuf::int32 voltage_;
  ::google_public::protobuf::int32 totaloil_;
  ::google_public::protobuf::int32 averageoil_;
  ::google_public::protobuf::int32 tireddrivingtime_;
  ::google_public::protobuf::int32 serialnumber_;
  ::google_public::protobuf::int32 averagerotationspeed_;
  ::google_public::protobuf::int32 maxoil_;
  ::google_public::protobuf::int32 idletime_;
  ::gboss::GpsBaseInfo* startgps_;
  ::gboss::GpsReferPosition* startreferpos_;
  ::gboss::GpsBaseInfo* endgps_;
  ::gboss::GpsReferPosition* endreferpos_;
  ::google_public::protobuf::int32 history_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static TravelInfo* default_instance_;
};
// -------------------------------------------------------------------

class FaultDefine : public ::google_public::protobuf::Message {
 public:
  FaultDefine();
  virtual ~FaultDefine();

  FaultDefine(const FaultDefine& from);

  inline FaultDefine& operator=(const FaultDefine& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const FaultDefine& default_instance();

  void Swap(FaultDefine* other);

  // implements Message ----------------------------------------------

  FaultDefine* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const FaultDefine& from);
  void MergeFrom(const FaultDefine& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 faultType = 1;
  inline bool has_faulttype() const;
  inline void clear_faulttype();
  static const int kFaultTypeFieldNumber = 1;
  inline ::google_public::protobuf::int32 faulttype() const;
  inline void set_faulttype(::google_public::protobuf::int32 value);

  // repeated string faultCode = 2;
  inline int faultcode_size() const;
  inline void clear_faultcode();
  static const int kFaultCodeFieldNumber = 2;
  inline const ::std::string& faultcode(int index) const;
  inline ::std::string* mutable_faultcode(int index);
  inline void set_faultcode(int index, const ::std::string& value);
  inline void set_faultcode(int index, const char* value);
  inline void set_faultcode(int index, const char* value, size_t size);
  inline ::std::string* add_faultcode();
  inline void add_faultcode(const ::std::string& value);
  inline void add_faultcode(const char* value);
  inline void add_faultcode(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& faultcode() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_faultcode();

  // @@protoc_insertion_point(class_scope:gboss.FaultDefine)
 private:
  inline void set_has_faulttype();
  inline void clear_has_faulttype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> faultcode_;
  ::google_public::protobuf::int32 faulttype_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static FaultDefine* default_instance_;
};
// -------------------------------------------------------------------

class FaultInfo : public ::google_public::protobuf::Message {
 public:
  FaultInfo();
  virtual ~FaultInfo();

  FaultInfo(const FaultInfo& from);

  inline FaultInfo& operator=(const FaultInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const FaultInfo& default_instance();

  void Swap(FaultInfo* other);

  // implements Message ----------------------------------------------

  FaultInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const FaultInfo& from);
  void MergeFrom(const FaultInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int64 faultTime = 2;
  inline bool has_faulttime() const;
  inline void clear_faulttime();
  static const int kFaultTimeFieldNumber = 2;
  inline ::google_public::protobuf::int64 faulttime() const;
  inline void set_faulttime(::google_public::protobuf::int64 value);

  // repeated .gboss.FaultDefine faults = 3;
  inline int faults_size() const;
  inline void clear_faults();
  static const int kFaultsFieldNumber = 3;
  inline const ::gboss::FaultDefine& faults(int index) const;
  inline ::gboss::FaultDefine* mutable_faults(int index);
  inline ::gboss::FaultDefine* add_faults();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultDefine >&
      faults() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultDefine >*
      mutable_faults();

  // optional int32 unitType = 4;
  inline bool has_unittype() const;
  inline void clear_unittype();
  static const int kUnitTypeFieldNumber = 4;
  inline ::google_public::protobuf::int32 unittype() const;
  inline void set_unittype(::google_public::protobuf::int32 value);

  // optional int32 history = 5;
  inline bool has_history() const;
  inline void clear_history();
  static const int kHistoryFieldNumber = 5;
  inline ::google_public::protobuf::int32 history() const;
  inline void set_history(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.FaultInfo)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_faulttime();
  inline void clear_has_faulttime();
  inline void set_has_unittype();
  inline void clear_has_unittype();
  inline void set_has_history();
  inline void clear_has_history();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::google_public::protobuf::int64 faulttime_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultDefine > faults_;
  ::google_public::protobuf::int32 unittype_;
  ::google_public::protobuf::int32 history_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static FaultInfo* default_instance_;
};
// -------------------------------------------------------------------

class AppNoticeInfo : public ::google_public::protobuf::Message {
 public:
  AppNoticeInfo();
  virtual ~AppNoticeInfo();

  AppNoticeInfo(const AppNoticeInfo& from);

  inline AppNoticeInfo& operator=(const AppNoticeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const AppNoticeInfo& default_instance();

  void Swap(AppNoticeInfo* other);

  // implements Message ----------------------------------------------

  AppNoticeInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const AppNoticeInfo& from);
  void MergeFrom(const AppNoticeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required string title = 2;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 2;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // required string content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional .gboss.GpsBaseInfo baseInfo = 4;
  inline bool has_baseinfo() const;
  inline void clear_baseinfo();
  static const int kBaseInfoFieldNumber = 4;
  inline const ::gboss::GpsBaseInfo& baseinfo() const;
  inline ::gboss::GpsBaseInfo* mutable_baseinfo();
  inline ::gboss::GpsBaseInfo* release_baseinfo();
  inline void set_allocated_baseinfo(::gboss::GpsBaseInfo* baseinfo);

  // optional .gboss.GpsReferPosition referPosition = 5;
  inline bool has_referposition() const;
  inline void clear_referposition();
  static const int kReferPositionFieldNumber = 5;
  inline const ::gboss::GpsReferPosition& referposition() const;
  inline ::gboss::GpsReferPosition* mutable_referposition();
  inline ::gboss::GpsReferPosition* release_referposition();
  inline void set_allocated_referposition(::gboss::GpsReferPosition* referposition);

  // optional int32 cmdId = 6;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdIdFieldNumber = 6;
  inline ::google_public::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google_public::protobuf::int32 value);

  // optional int32 cmdretcode = 7;
  inline bool has_cmdretcode() const;
  inline void clear_cmdretcode();
  static const int kCmdretcodeFieldNumber = 7;
  inline ::google_public::protobuf::int32 cmdretcode() const;
  inline void set_cmdretcode(::google_public::protobuf::int32 value);

  // optional string cmdretmsg = 8;
  inline bool has_cmdretmsg() const;
  inline void clear_cmdretmsg();
  static const int kCmdretmsgFieldNumber = 8;
  inline const ::std::string& cmdretmsg() const;
  inline void set_cmdretmsg(const ::std::string& value);
  inline void set_cmdretmsg(const char* value);
  inline void set_cmdretmsg(const char* value, size_t size);
  inline ::std::string* mutable_cmdretmsg();
  inline ::std::string* release_cmdretmsg();
  inline void set_allocated_cmdretmsg(::std::string* cmdretmsg);

  // optional int32 noticetype = 9;
  inline bool has_noticetype() const;
  inline void clear_noticetype();
  static const int kNoticetypeFieldNumber = 9;
  inline ::google_public::protobuf::int32 noticetype() const;
  inline void set_noticetype(::google_public::protobuf::int32 value);

  // optional int32 alarmstatus = 10;
  inline bool has_alarmstatus() const;
  inline void clear_alarmstatus();
  static const int kAlarmstatusFieldNumber = 10;
  inline ::google_public::protobuf::int32 alarmstatus() const;
  inline void set_alarmstatus(::google_public::protobuf::int32 value);

  // optional string cmdsn = 11;
  inline bool has_cmdsn() const;
  inline void clear_cmdsn();
  static const int kCmdsnFieldNumber = 11;
  inline const ::std::string& cmdsn() const;
  inline void set_cmdsn(const ::std::string& value);
  inline void set_cmdsn(const char* value);
  inline void set_cmdsn(const char* value, size_t size);
  inline ::std::string* mutable_cmdsn();
  inline ::std::string* release_cmdsn();
  inline void set_allocated_cmdsn(::std::string* cmdsn);

  // @@protoc_insertion_point(class_scope:gboss.AppNoticeInfo)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_baseinfo();
  inline void clear_has_baseinfo();
  inline void set_has_referposition();
  inline void clear_has_referposition();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_cmdretcode();
  inline void clear_has_cmdretcode();
  inline void set_has_cmdretmsg();
  inline void clear_has_cmdretmsg();
  inline void set_has_noticetype();
  inline void clear_has_noticetype();
  inline void set_has_alarmstatus();
  inline void clear_has_alarmstatus();
  inline void set_has_cmdsn();
  inline void clear_has_cmdsn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::std::string* title_;
  ::std::string* content_;
  ::gboss::GpsBaseInfo* baseinfo_;
  ::gboss::GpsReferPosition* referposition_;
  ::google_public::protobuf::int32 cmdid_;
  ::google_public::protobuf::int32 cmdretcode_;
  ::std::string* cmdretmsg_;
  ::google_public::protobuf::int32 noticetype_;
  ::google_public::protobuf::int32 alarmstatus_;
  ::std::string* cmdsn_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static AppNoticeInfo* default_instance_;
};
// -------------------------------------------------------------------

class ECUConfig : public ::google_public::protobuf::Message {
 public:
  ECUConfig();
  virtual ~ECUConfig();

  ECUConfig(const ECUConfig& from);

  inline ECUConfig& operator=(const ECUConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ECUConfig& default_instance();

  void Swap(ECUConfig* other);

  // implements Message ----------------------------------------------

  ECUConfig* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ECUConfig& from);
  void MergeFrom(const ECUConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int64 updateTime = 2;
  inline bool has_updatetime() const;
  inline void clear_updatetime();
  static const int kUpdateTimeFieldNumber = 2;
  inline ::google_public::protobuf::int64 updatetime() const;
  inline void set_updatetime(::google_public::protobuf::int64 value);

  // optional int32 abs = 3;
  inline bool has_abs() const;
  inline void clear_abs();
  static const int kAbsFieldNumber = 3;
  inline ::google_public::protobuf::int32 abs() const;
  inline void set_abs(::google_public::protobuf::int32 value);

  // optional int32 esp = 4;
  inline bool has_esp() const;
  inline void clear_esp();
  static const int kEspFieldNumber = 4;
  inline ::google_public::protobuf::int32 esp() const;
  inline void set_esp(::google_public::protobuf::int32 value);

  // optional int32 srs = 5;
  inline bool has_srs() const;
  inline void clear_srs();
  static const int kSrsFieldNumber = 5;
  inline ::google_public::protobuf::int32 srs() const;
  inline void set_srs(::google_public::protobuf::int32 value);

  // optional int32 ems = 6;
  inline bool has_ems() const;
  inline void clear_ems();
  static const int kEmsFieldNumber = 6;
  inline ::google_public::protobuf::int32 ems() const;
  inline void set_ems(::google_public::protobuf::int32 value);

  // optional int32 immo = 7;
  inline bool has_immo() const;
  inline void clear_immo();
  static const int kImmoFieldNumber = 7;
  inline ::google_public::protobuf::int32 immo() const;
  inline void set_immo(::google_public::protobuf::int32 value);

  // optional int32 peps = 8;
  inline bool has_peps() const;
  inline void clear_peps();
  static const int kPepsFieldNumber = 8;
  inline ::google_public::protobuf::int32 peps() const;
  inline void set_peps(::google_public::protobuf::int32 value);

  // optional int32 bcm = 9;
  inline bool has_bcm() const;
  inline void clear_bcm();
  static const int kBcmFieldNumber = 9;
  inline ::google_public::protobuf::int32 bcm() const;
  inline void set_bcm(::google_public::protobuf::int32 value);

  // optional int32 tcu = 10;
  inline bool has_tcu() const;
  inline void clear_tcu();
  static const int kTcuFieldNumber = 10;
  inline ::google_public::protobuf::int32 tcu() const;
  inline void set_tcu(::google_public::protobuf::int32 value);

  // optional int32 tpms = 11;
  inline bool has_tpms() const;
  inline void clear_tpms();
  static const int kTpmsFieldNumber = 11;
  inline ::google_public::protobuf::int32 tpms() const;
  inline void set_tpms(::google_public::protobuf::int32 value);

  // optional int32 apm = 12;
  inline bool has_apm() const;
  inline void clear_apm();
  static const int kApmFieldNumber = 12;
  inline ::google_public::protobuf::int32 apm() const;
  inline void set_apm(::google_public::protobuf::int32 value);

  // optional int32 icm = 13;
  inline bool has_icm() const;
  inline void clear_icm();
  static const int kIcmFieldNumber = 13;
  inline ::google_public::protobuf::int32 icm() const;
  inline void set_icm(::google_public::protobuf::int32 value);

  // optional int32 eps = 14;
  inline bool has_eps() const;
  inline void clear_eps();
  static const int kEpsFieldNumber = 14;
  inline ::google_public::protobuf::int32 eps() const;
  inline void set_eps(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.ECUConfig)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_updatetime();
  inline void clear_has_updatetime();
  inline void set_has_abs();
  inline void clear_has_abs();
  inline void set_has_esp();
  inline void clear_has_esp();
  inline void set_has_srs();
  inline void clear_has_srs();
  inline void set_has_ems();
  inline void clear_has_ems();
  inline void set_has_immo();
  inline void clear_has_immo();
  inline void set_has_peps();
  inline void clear_has_peps();
  inline void set_has_bcm();
  inline void clear_has_bcm();
  inline void set_has_tcu();
  inline void clear_has_tcu();
  inline void set_has_tpms();
  inline void clear_has_tpms();
  inline void set_has_apm();
  inline void clear_has_apm();
  inline void set_has_icm();
  inline void clear_has_icm();
  inline void set_has_eps();
  inline void clear_has_eps();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::google_public::protobuf::int64 updatetime_;
  ::google_public::protobuf::int32 abs_;
  ::google_public::protobuf::int32 esp_;
  ::google_public::protobuf::int32 srs_;
  ::google_public::protobuf::int32 ems_;
  ::google_public::protobuf::int32 immo_;
  ::google_public::protobuf::int32 peps_;
  ::google_public::protobuf::int32 bcm_;
  ::google_public::protobuf::int32 tcu_;
  ::google_public::protobuf::int32 tpms_;
  ::google_public::protobuf::int32 apm_;
  ::google_public::protobuf::int32 icm_;
  ::google_public::protobuf::int32 eps_;
  friend void  protobuf_AddDesc_GBoss_2eproto();
  friend void protobuf_AssignDesc_GBoss_2eproto();
  friend void protobuf_ShutdownFile_GBoss_2eproto();

  void InitAsDefaultInstance();
  static ECUConfig* default_instance_;
};
// ===================================================================


// ===================================================================

// MapEntry

// required string key = 1;
inline bool MapEntry::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MapEntry::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MapEntry::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MapEntry::clear_key() {
  if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_->clear();
  }
  clear_has_key();
}
inline const ::std::string& MapEntry::key() const {
  // @@protoc_insertion_point(field_get:gboss.MapEntry.key)
  return *key_;
}
inline void MapEntry::set_key(const ::std::string& value) {
  set_has_key();
  if (key_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.MapEntry.key)
}
inline void MapEntry::set_key(const char* value) {
  set_has_key();
  if (key_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.MapEntry.key)
}
inline void MapEntry::set_key(const char* value, size_t size) {
  set_has_key();
  if (key_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  key_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.MapEntry.key)
}
inline ::std::string* MapEntry::mutable_key() {
  set_has_key();
  if (key_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    key_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.MapEntry.key)
  return key_;
}
inline ::std::string* MapEntry::release_key() {
  clear_has_key();
  if (key_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = key_;
    key_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapEntry::set_allocated_key(::std::string* key) {
  if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (key) {
    set_has_key();
    key_ = key;
  } else {
    clear_has_key();
    key_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.MapEntry.key)
}

// required string value = 2;
inline bool MapEntry::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MapEntry::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MapEntry::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MapEntry::clear_value() {
  if (value_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_->clear();
  }
  clear_has_value();
}
inline const ::std::string& MapEntry::value() const {
  // @@protoc_insertion_point(field_get:gboss.MapEntry.value)
  return *value_;
}
inline void MapEntry::set_value(const ::std::string& value) {
  set_has_value();
  if (value_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.MapEntry.value)
}
inline void MapEntry::set_value(const char* value) {
  set_has_value();
  if (value_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.MapEntry.value)
}
inline void MapEntry::set_value(const char* value, size_t size) {
  set_has_value();
  if (value_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  value_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.MapEntry.value)
}
inline ::std::string* MapEntry::mutable_value() {
  set_has_value();
  if (value_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    value_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.MapEntry.value)
  return value_;
}
inline ::std::string* MapEntry::release_value() {
  clear_has_value();
  if (value_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = value_;
    value_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void MapEntry::set_allocated_value(::std::string* value) {
  if (value_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (value) {
    set_has_value();
    value_ = value;
  } else {
    clear_has_value();
    value_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.MapEntry.value)
}

// -------------------------------------------------------------------

// OBDInfo

// optional int32 remainOil = 1;
inline bool OBDInfo::has_remainoil() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OBDInfo::set_has_remainoil() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OBDInfo::clear_has_remainoil() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OBDInfo::clear_remainoil() {
  remainoil_ = 0;
  clear_has_remainoil();
}
inline ::google_public::protobuf::int32 OBDInfo::remainoil() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.remainOil)
  return remainoil_;
}
inline void OBDInfo::set_remainoil(::google_public::protobuf::int32 value) {
  set_has_remainoil();
  remainoil_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.remainOil)
}

// optional int32 remainPercentOil = 2;
inline bool OBDInfo::has_remainpercentoil() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OBDInfo::set_has_remainpercentoil() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OBDInfo::clear_has_remainpercentoil() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OBDInfo::clear_remainpercentoil() {
  remainpercentoil_ = 0;
  clear_has_remainpercentoil();
}
inline ::google_public::protobuf::int32 OBDInfo::remainpercentoil() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.remainPercentOil)
  return remainpercentoil_;
}
inline void OBDInfo::set_remainpercentoil(::google_public::protobuf::int32 value) {
  set_has_remainpercentoil();
  remainpercentoil_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.remainPercentOil)
}

// optional int32 averageOil = 3;
inline bool OBDInfo::has_averageoil() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OBDInfo::set_has_averageoil() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OBDInfo::clear_has_averageoil() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OBDInfo::clear_averageoil() {
  averageoil_ = 0;
  clear_has_averageoil();
}
inline ::google_public::protobuf::int32 OBDInfo::averageoil() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.averageOil)
  return averageoil_;
}
inline void OBDInfo::set_averageoil(::google_public::protobuf::int32 value) {
  set_has_averageoil();
  averageoil_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.averageOil)
}

// optional int32 hourOil = 4;
inline bool OBDInfo::has_houroil() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OBDInfo::set_has_houroil() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OBDInfo::clear_has_houroil() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OBDInfo::clear_houroil() {
  houroil_ = 0;
  clear_has_houroil();
}
inline ::google_public::protobuf::int32 OBDInfo::houroil() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.hourOil)
  return houroil_;
}
inline void OBDInfo::set_houroil(::google_public::protobuf::int32 value) {
  set_has_houroil();
  houroil_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.hourOil)
}

// optional int32 totalDistance = 5;
inline bool OBDInfo::has_totaldistance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OBDInfo::set_has_totaldistance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OBDInfo::clear_has_totaldistance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OBDInfo::clear_totaldistance() {
  totaldistance_ = 0;
  clear_has_totaldistance();
}
inline ::google_public::protobuf::int32 OBDInfo::totaldistance() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.totalDistance)
  return totaldistance_;
}
inline void OBDInfo::set_totaldistance(::google_public::protobuf::int32 value) {
  set_has_totaldistance();
  totaldistance_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.totalDistance)
}

// optional int32 waterTemperature = 6;
inline bool OBDInfo::has_watertemperature() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OBDInfo::set_has_watertemperature() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OBDInfo::clear_has_watertemperature() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OBDInfo::clear_watertemperature() {
  watertemperature_ = 0;
  clear_has_watertemperature();
}
inline ::google_public::protobuf::int32 OBDInfo::watertemperature() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.waterTemperature)
  return watertemperature_;
}
inline void OBDInfo::set_watertemperature(::google_public::protobuf::int32 value) {
  set_has_watertemperature();
  watertemperature_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.waterTemperature)
}

// optional int32 reviseOil = 7;
inline bool OBDInfo::has_reviseoil() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OBDInfo::set_has_reviseoil() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OBDInfo::clear_has_reviseoil() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OBDInfo::clear_reviseoil() {
  reviseoil_ = 0;
  clear_has_reviseoil();
}
inline ::google_public::protobuf::int32 OBDInfo::reviseoil() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.reviseOil)
  return reviseoil_;
}
inline void OBDInfo::set_reviseoil(::google_public::protobuf::int32 value) {
  set_has_reviseoil();
  reviseoil_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.reviseOil)
}

// optional int32 rotationSpeed = 8;
inline bool OBDInfo::has_rotationspeed() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OBDInfo::set_has_rotationspeed() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OBDInfo::clear_has_rotationspeed() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OBDInfo::clear_rotationspeed() {
  rotationspeed_ = 0;
  clear_has_rotationspeed();
}
inline ::google_public::protobuf::int32 OBDInfo::rotationspeed() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.rotationSpeed)
  return rotationspeed_;
}
inline void OBDInfo::set_rotationspeed(::google_public::protobuf::int32 value) {
  set_has_rotationspeed();
  rotationspeed_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.rotationSpeed)
}

// optional int32 intakeAirTemperature = 9;
inline bool OBDInfo::has_intakeairtemperature() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OBDInfo::set_has_intakeairtemperature() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OBDInfo::clear_has_intakeairtemperature() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OBDInfo::clear_intakeairtemperature() {
  intakeairtemperature_ = 0;
  clear_has_intakeairtemperature();
}
inline ::google_public::protobuf::int32 OBDInfo::intakeairtemperature() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.intakeAirTemperature)
  return intakeairtemperature_;
}
inline void OBDInfo::set_intakeairtemperature(::google_public::protobuf::int32 value) {
  set_has_intakeairtemperature();
  intakeairtemperature_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.intakeAirTemperature)
}

// optional int32 airDischange = 10;
inline bool OBDInfo::has_airdischange() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OBDInfo::set_has_airdischange() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OBDInfo::clear_has_airdischange() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OBDInfo::clear_airdischange() {
  airdischange_ = 0;
  clear_has_airdischange();
}
inline ::google_public::protobuf::int32 OBDInfo::airdischange() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.airDischange)
  return airdischange_;
}
inline void OBDInfo::set_airdischange(::google_public::protobuf::int32 value) {
  set_has_airdischange();
  airdischange_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.airDischange)
}

// repeated .gboss.MapEntry otherInfo = 11;
inline int OBDInfo::otherinfo_size() const {
  return otherinfo_.size();
}
inline void OBDInfo::clear_otherinfo() {
  otherinfo_.Clear();
}
inline const ::gboss::MapEntry& OBDInfo::otherinfo(int index) const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.otherInfo)
  return otherinfo_.Get(index);
}
inline ::gboss::MapEntry* OBDInfo::mutable_otherinfo(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.OBDInfo.otherInfo)
  return otherinfo_.Mutable(index);
}
inline ::gboss::MapEntry* OBDInfo::add_otherinfo() {
  // @@protoc_insertion_point(field_add:gboss.OBDInfo.otherInfo)
  return otherinfo_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >&
OBDInfo::otherinfo() const {
  // @@protoc_insertion_point(field_list:gboss.OBDInfo.otherInfo)
  return otherinfo_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >*
OBDInfo::mutable_otherinfo() {
  // @@protoc_insertion_point(field_mutable_list:gboss.OBDInfo.otherInfo)
  return &otherinfo_;
}

// optional string callLetter = 12;
inline bool OBDInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OBDInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OBDInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OBDInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& OBDInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.callLetter)
  return *callletter_;
}
inline void OBDInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.callLetter)
}
inline void OBDInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.OBDInfo.callLetter)
}
inline void OBDInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.OBDInfo.callLetter)
}
inline ::std::string* OBDInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.OBDInfo.callLetter)
  return callletter_;
}
inline ::std::string* OBDInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OBDInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OBDInfo.callLetter)
}

// optional int64 gpsTime = 13;
inline bool OBDInfo::has_gpstime() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OBDInfo::set_has_gpstime() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OBDInfo::clear_has_gpstime() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OBDInfo::clear_gpstime() {
  gpstime_ = GOOGLE_LONGLONG(0);
  clear_has_gpstime();
}
inline ::google_public::protobuf::int64 OBDInfo::gpstime() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.gpsTime)
  return gpstime_;
}
inline void OBDInfo::set_gpstime(::google_public::protobuf::int64 value) {
  set_has_gpstime();
  gpstime_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.gpsTime)
}

// optional int32 speed = 14;
inline bool OBDInfo::has_speed() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void OBDInfo::set_has_speed() {
  _has_bits_[0] |= 0x00002000u;
}
inline void OBDInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void OBDInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google_public::protobuf::int32 OBDInfo::speed() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.speed)
  return speed_;
}
inline void OBDInfo::set_speed(::google_public::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.speed)
}

// optional int32 remainDistance = 15;
inline bool OBDInfo::has_remaindistance() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void OBDInfo::set_has_remaindistance() {
  _has_bits_[0] |= 0x00004000u;
}
inline void OBDInfo::clear_has_remaindistance() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void OBDInfo::clear_remaindistance() {
  remaindistance_ = 0;
  clear_has_remaindistance();
}
inline ::google_public::protobuf::int32 OBDInfo::remaindistance() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.remainDistance)
  return remaindistance_;
}
inline void OBDInfo::set_remaindistance(::google_public::protobuf::int32 value) {
  set_has_remaindistance();
  remaindistance_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.remainDistance)
}

// optional int32 unitType = 16;
inline bool OBDInfo::has_unittype() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void OBDInfo::set_has_unittype() {
  _has_bits_[0] |= 0x00008000u;
}
inline void OBDInfo::clear_has_unittype() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void OBDInfo::clear_unittype() {
  unittype_ = 0;
  clear_has_unittype();
}
inline ::google_public::protobuf::int32 OBDInfo::unittype() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.unitType)
  return unittype_;
}
inline void OBDInfo::set_unittype(::google_public::protobuf::int32 value) {
  set_has_unittype();
  unittype_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.unitType)
}

// optional int32 history = 17;
inline bool OBDInfo::has_history() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void OBDInfo::set_has_history() {
  _has_bits_[0] |= 0x00010000u;
}
inline void OBDInfo::clear_has_history() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void OBDInfo::clear_history() {
  history_ = 0;
  clear_has_history();
}
inline ::google_public::protobuf::int32 OBDInfo::history() const {
  // @@protoc_insertion_point(field_get:gboss.OBDInfo.history)
  return history_;
}
inline void OBDInfo::set_history(::google_public::protobuf::int32 value) {
  set_has_history();
  history_ = value;
  // @@protoc_insertion_point(field_set:gboss.OBDInfo.history)
}

// -------------------------------------------------------------------

// GpsSimpleInfo

// required int64 gpsTime = 1;
inline bool GpsSimpleInfo::has_gpstime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpsSimpleInfo::set_has_gpstime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GpsSimpleInfo::clear_has_gpstime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GpsSimpleInfo::clear_gpstime() {
  gpstime_ = GOOGLE_LONGLONG(0);
  clear_has_gpstime();
}
inline ::google_public::protobuf::int64 GpsSimpleInfo::gpstime() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.gpsTime)
  return gpstime_;
}
inline void GpsSimpleInfo::set_gpstime(::google_public::protobuf::int64 value) {
  set_has_gpstime();
  gpstime_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.gpsTime)
}

// required bool loc = 2;
inline bool GpsSimpleInfo::has_loc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpsSimpleInfo::set_has_loc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GpsSimpleInfo::clear_has_loc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GpsSimpleInfo::clear_loc() {
  loc_ = false;
  clear_has_loc();
}
inline bool GpsSimpleInfo::loc() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.loc)
  return loc_;
}
inline void GpsSimpleInfo::set_loc(bool value) {
  set_has_loc();
  loc_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.loc)
}

// required int32 lat = 3;
inline bool GpsSimpleInfo::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpsSimpleInfo::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GpsSimpleInfo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GpsSimpleInfo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::lat() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.lat)
  return lat_;
}
inline void GpsSimpleInfo::set_lat(::google_public::protobuf::int32 value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.lat)
}

// required int32 lng = 4;
inline bool GpsSimpleInfo::has_lng() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpsSimpleInfo::set_has_lng() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GpsSimpleInfo::clear_has_lng() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GpsSimpleInfo::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::lng() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.lng)
  return lng_;
}
inline void GpsSimpleInfo::set_lng(::google_public::protobuf::int32 value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.lng)
}

// required int32 speed = 5;
inline bool GpsSimpleInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GpsSimpleInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GpsSimpleInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GpsSimpleInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::speed() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.speed)
  return speed_;
}
inline void GpsSimpleInfo::set_speed(::google_public::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.speed)
}

// required int32 course = 6;
inline bool GpsSimpleInfo::has_course() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GpsSimpleInfo::set_has_course() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GpsSimpleInfo::clear_has_course() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GpsSimpleInfo::clear_course() {
  course_ = 0;
  clear_has_course();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::course() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.course)
  return course_;
}
inline void GpsSimpleInfo::set_course(::google_public::protobuf::int32 value) {
  set_has_course();
  course_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.course)
}

// repeated int32 status = 7;
inline int GpsSimpleInfo::status_size() const {
  return status_.size();
}
inline void GpsSimpleInfo::clear_status() {
  status_.Clear();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::status(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.status)
  return status_.Get(index);
}
inline void GpsSimpleInfo::set_status(int index, ::google_public::protobuf::int32 value) {
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.status)
}
inline void GpsSimpleInfo::add_status(::google_public::protobuf::int32 value) {
  status_.Add(value);
  // @@protoc_insertion_point(field_add:gboss.GpsSimpleInfo.status)
}
inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
GpsSimpleInfo::status() const {
  // @@protoc_insertion_point(field_list:gboss.GpsSimpleInfo.status)
  return status_;
}
inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
GpsSimpleInfo::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GpsSimpleInfo.status)
  return &status_;
}

// optional int32 totalDistance = 8;
inline bool GpsSimpleInfo::has_totaldistance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GpsSimpleInfo::set_has_totaldistance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GpsSimpleInfo::clear_has_totaldistance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GpsSimpleInfo::clear_totaldistance() {
  totaldistance_ = 0;
  clear_has_totaldistance();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::totaldistance() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.totalDistance)
  return totaldistance_;
}
inline void GpsSimpleInfo::set_totaldistance(::google_public::protobuf::int32 value) {
  set_has_totaldistance();
  totaldistance_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.totalDistance)
}

// optional int32 oil = 9;
inline bool GpsSimpleInfo::has_oil() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GpsSimpleInfo::set_has_oil() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GpsSimpleInfo::clear_has_oil() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GpsSimpleInfo::clear_oil() {
  oil_ = 0;
  clear_has_oil();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::oil() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.oil)
  return oil_;
}
inline void GpsSimpleInfo::set_oil(::google_public::protobuf::int32 value) {
  set_has_oil();
  oil_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.oil)
}

// optional int32 remainPercentOil = 10;
inline bool GpsSimpleInfo::has_remainpercentoil() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GpsSimpleInfo::set_has_remainpercentoil() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GpsSimpleInfo::clear_has_remainpercentoil() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GpsSimpleInfo::clear_remainpercentoil() {
  remainpercentoil_ = 0;
  clear_has_remainpercentoil();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::remainpercentoil() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.remainPercentOil)
  return remainpercentoil_;
}
inline void GpsSimpleInfo::set_remainpercentoil(::google_public::protobuf::int32 value) {
  set_has_remainpercentoil();
  remainpercentoil_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.remainPercentOil)
}

// optional int32 canspeed = 11;
inline bool GpsSimpleInfo::has_canspeed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GpsSimpleInfo::set_has_canspeed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GpsSimpleInfo::clear_has_canspeed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GpsSimpleInfo::clear_canspeed() {
  canspeed_ = 0;
  clear_has_canspeed();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::canspeed() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.canspeed)
  return canspeed_;
}
inline void GpsSimpleInfo::set_canspeed(::google_public::protobuf::int32 value) {
  set_has_canspeed();
  canspeed_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.canspeed)
}

// optional int32 remainDistance = 12;
inline bool GpsSimpleInfo::has_remaindistance() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GpsSimpleInfo::set_has_remaindistance() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GpsSimpleInfo::clear_has_remaindistance() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GpsSimpleInfo::clear_remaindistance() {
  remaindistance_ = 0;
  clear_has_remaindistance();
}
inline ::google_public::protobuf::int32 GpsSimpleInfo::remaindistance() const {
  // @@protoc_insertion_point(field_get:gboss.GpsSimpleInfo.remainDistance)
  return remaindistance_;
}
inline void GpsSimpleInfo::set_remaindistance(::google_public::protobuf::int32 value) {
  set_has_remaindistance();
  remaindistance_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsSimpleInfo.remainDistance)
}

// -------------------------------------------------------------------

// BaseStationInfo

// required string mcc = 1;
inline bool BaseStationInfo::has_mcc() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseStationInfo::set_has_mcc() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseStationInfo::clear_has_mcc() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseStationInfo::clear_mcc() {
  if (mcc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mcc_->clear();
  }
  clear_has_mcc();
}
inline const ::std::string& BaseStationInfo::mcc() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationInfo.mcc)
  return *mcc_;
}
inline void BaseStationInfo::set_mcc(const ::std::string& value) {
  set_has_mcc();
  if (mcc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.BaseStationInfo.mcc)
}
inline void BaseStationInfo::set_mcc(const char* value) {
  set_has_mcc();
  if (mcc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.BaseStationInfo.mcc)
}
inline void BaseStationInfo::set_mcc(const char* value, size_t size) {
  set_has_mcc();
  if (mcc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mcc_ = new ::std::string;
  }
  mcc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.BaseStationInfo.mcc)
}
inline ::std::string* BaseStationInfo::mutable_mcc() {
  set_has_mcc();
  if (mcc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mcc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.BaseStationInfo.mcc)
  return mcc_;
}
inline ::std::string* BaseStationInfo::release_mcc() {
  clear_has_mcc();
  if (mcc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mcc_;
    mcc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BaseStationInfo::set_allocated_mcc(::std::string* mcc) {
  if (mcc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mcc_;
  }
  if (mcc) {
    set_has_mcc();
    mcc_ = mcc;
  } else {
    clear_has_mcc();
    mcc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.BaseStationInfo.mcc)
}

// required string mnc = 2;
inline bool BaseStationInfo::has_mnc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseStationInfo::set_has_mnc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseStationInfo::clear_has_mnc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseStationInfo::clear_mnc() {
  if (mnc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mnc_->clear();
  }
  clear_has_mnc();
}
inline const ::std::string& BaseStationInfo::mnc() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationInfo.mnc)
  return *mnc_;
}
inline void BaseStationInfo::set_mnc(const ::std::string& value) {
  set_has_mnc();
  if (mnc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.BaseStationInfo.mnc)
}
inline void BaseStationInfo::set_mnc(const char* value) {
  set_has_mnc();
  if (mnc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.BaseStationInfo.mnc)
}
inline void BaseStationInfo::set_mnc(const char* value, size_t size) {
  set_has_mnc();
  if (mnc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mnc_ = new ::std::string;
  }
  mnc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.BaseStationInfo.mnc)
}
inline ::std::string* BaseStationInfo::mutable_mnc() {
  set_has_mnc();
  if (mnc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    mnc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.BaseStationInfo.mnc)
  return mnc_;
}
inline ::std::string* BaseStationInfo::release_mnc() {
  clear_has_mnc();
  if (mnc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = mnc_;
    mnc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BaseStationInfo::set_allocated_mnc(::std::string* mnc) {
  if (mnc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mnc_;
  }
  if (mnc) {
    set_has_mnc();
    mnc_ = mnc;
  } else {
    clear_has_mnc();
    mnc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.BaseStationInfo.mnc)
}

// required int32 lac = 3;
inline bool BaseStationInfo::has_lac() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseStationInfo::set_has_lac() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseStationInfo::clear_has_lac() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseStationInfo::clear_lac() {
  lac_ = 0;
  clear_has_lac();
}
inline ::google_public::protobuf::int32 BaseStationInfo::lac() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationInfo.lac)
  return lac_;
}
inline void BaseStationInfo::set_lac(::google_public::protobuf::int32 value) {
  set_has_lac();
  lac_ = value;
  // @@protoc_insertion_point(field_set:gboss.BaseStationInfo.lac)
}

// required int32 cid = 4;
inline bool BaseStationInfo::has_cid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseStationInfo::set_has_cid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseStationInfo::clear_has_cid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseStationInfo::clear_cid() {
  cid_ = 0;
  clear_has_cid();
}
inline ::google_public::protobuf::int32 BaseStationInfo::cid() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationInfo.cid)
  return cid_;
}
inline void BaseStationInfo::set_cid(::google_public::protobuf::int32 value) {
  set_has_cid();
  cid_ = value;
  // @@protoc_insertion_point(field_set:gboss.BaseStationInfo.cid)
}

// optional int32 bsss = 5;
inline bool BaseStationInfo::has_bsss() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BaseStationInfo::set_has_bsss() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BaseStationInfo::clear_has_bsss() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BaseStationInfo::clear_bsss() {
  bsss_ = 0;
  clear_has_bsss();
}
inline ::google_public::protobuf::int32 BaseStationInfo::bsss() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationInfo.bsss)
  return bsss_;
}
inline void BaseStationInfo::set_bsss(::google_public::protobuf::int32 value) {
  set_has_bsss();
  bsss_ = value;
  // @@protoc_insertion_point(field_set:gboss.BaseStationInfo.bsss)
}

// -------------------------------------------------------------------

// BaseStationAddress

// required int32 lat = 1;
inline bool BaseStationAddress::has_lat() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BaseStationAddress::set_has_lat() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BaseStationAddress::clear_has_lat() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BaseStationAddress::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline ::google_public::protobuf::int32 BaseStationAddress::lat() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationAddress.lat)
  return lat_;
}
inline void BaseStationAddress::set_lat(::google_public::protobuf::int32 value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:gboss.BaseStationAddress.lat)
}

// required int32 lng = 2;
inline bool BaseStationAddress::has_lng() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BaseStationAddress::set_has_lng() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BaseStationAddress::clear_has_lng() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BaseStationAddress::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline ::google_public::protobuf::int32 BaseStationAddress::lng() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationAddress.lng)
  return lng_;
}
inline void BaseStationAddress::set_lng(::google_public::protobuf::int32 value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:gboss.BaseStationAddress.lng)
}

// optional int32 precision = 3;
inline bool BaseStationAddress::has_precision() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BaseStationAddress::set_has_precision() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BaseStationAddress::clear_has_precision() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BaseStationAddress::clear_precision() {
  precision_ = 0;
  clear_has_precision();
}
inline ::google_public::protobuf::int32 BaseStationAddress::precision() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationAddress.precision)
  return precision_;
}
inline void BaseStationAddress::set_precision(::google_public::protobuf::int32 value) {
  set_has_precision();
  precision_ = value;
  // @@protoc_insertion_point(field_set:gboss.BaseStationAddress.precision)
}

// optional string addressDesc = 4;
inline bool BaseStationAddress::has_addressdesc() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BaseStationAddress::set_has_addressdesc() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BaseStationAddress::clear_has_addressdesc() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BaseStationAddress::clear_addressdesc() {
  if (addressdesc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addressdesc_->clear();
  }
  clear_has_addressdesc();
}
inline const ::std::string& BaseStationAddress::addressdesc() const {
  // @@protoc_insertion_point(field_get:gboss.BaseStationAddress.addressDesc)
  return *addressdesc_;
}
inline void BaseStationAddress::set_addressdesc(const ::std::string& value) {
  set_has_addressdesc();
  if (addressdesc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addressdesc_ = new ::std::string;
  }
  addressdesc_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.BaseStationAddress.addressDesc)
}
inline void BaseStationAddress::set_addressdesc(const char* value) {
  set_has_addressdesc();
  if (addressdesc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addressdesc_ = new ::std::string;
  }
  addressdesc_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.BaseStationAddress.addressDesc)
}
inline void BaseStationAddress::set_addressdesc(const char* value, size_t size) {
  set_has_addressdesc();
  if (addressdesc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addressdesc_ = new ::std::string;
  }
  addressdesc_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.BaseStationAddress.addressDesc)
}
inline ::std::string* BaseStationAddress::mutable_addressdesc() {
  set_has_addressdesc();
  if (addressdesc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    addressdesc_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.BaseStationAddress.addressDesc)
  return addressdesc_;
}
inline ::std::string* BaseStationAddress::release_addressdesc() {
  clear_has_addressdesc();
  if (addressdesc_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = addressdesc_;
    addressdesc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void BaseStationAddress::set_allocated_addressdesc(::std::string* addressdesc) {
  if (addressdesc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addressdesc_;
  }
  if (addressdesc) {
    set_has_addressdesc();
    addressdesc_ = addressdesc;
  } else {
    clear_has_addressdesc();
    addressdesc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.BaseStationAddress.addressDesc)
}

// -------------------------------------------------------------------

// YDWInfo

// required int32 temperature = 1;
inline bool YDWInfo::has_temperature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void YDWInfo::set_has_temperature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void YDWInfo::clear_has_temperature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void YDWInfo::clear_temperature() {
  temperature_ = 0;
  clear_has_temperature();
}
inline ::google_public::protobuf::int32 YDWInfo::temperature() const {
  // @@protoc_insertion_point(field_get:gboss.YDWInfo.temperature)
  return temperature_;
}
inline void YDWInfo::set_temperature(::google_public::protobuf::int32 value) {
  set_has_temperature();
  temperature_ = value;
  // @@protoc_insertion_point(field_set:gboss.YDWInfo.temperature)
}

// required int32 drivingTime = 2;
inline bool YDWInfo::has_drivingtime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void YDWInfo::set_has_drivingtime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void YDWInfo::clear_has_drivingtime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void YDWInfo::clear_drivingtime() {
  drivingtime_ = 0;
  clear_has_drivingtime();
}
inline ::google_public::protobuf::int32 YDWInfo::drivingtime() const {
  // @@protoc_insertion_point(field_get:gboss.YDWInfo.drivingTime)
  return drivingtime_;
}
inline void YDWInfo::set_drivingtime(::google_public::protobuf::int32 value) {
  set_has_drivingtime();
  drivingtime_ = value;
  // @@protoc_insertion_point(field_set:gboss.YDWInfo.drivingTime)
}

// required int32 totalDistance = 3;
inline bool YDWInfo::has_totaldistance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void YDWInfo::set_has_totaldistance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void YDWInfo::clear_has_totaldistance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void YDWInfo::clear_totaldistance() {
  totaldistance_ = 0;
  clear_has_totaldistance();
}
inline ::google_public::protobuf::int32 YDWInfo::totaldistance() const {
  // @@protoc_insertion_point(field_get:gboss.YDWInfo.totalDistance)
  return totaldistance_;
}
inline void YDWInfo::set_totaldistance(::google_public::protobuf::int32 value) {
  set_has_totaldistance();
  totaldistance_ = value;
  // @@protoc_insertion_point(field_set:gboss.YDWInfo.totalDistance)
}

// required int32 unitPower = 4;
inline bool YDWInfo::has_unitpower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void YDWInfo::set_has_unitpower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void YDWInfo::clear_has_unitpower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void YDWInfo::clear_unitpower() {
  unitpower_ = 0;
  clear_has_unitpower();
}
inline ::google_public::protobuf::int32 YDWInfo::unitpower() const {
  // @@protoc_insertion_point(field_get:gboss.YDWInfo.unitPower)
  return unitpower_;
}
inline void YDWInfo::set_unitpower(::google_public::protobuf::int32 value) {
  set_has_unitpower();
  unitpower_ = value;
  // @@protoc_insertion_point(field_set:gboss.YDWInfo.unitPower)
}

// required int32 bluetoothPower = 5;
inline bool YDWInfo::has_bluetoothpower() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void YDWInfo::set_has_bluetoothpower() {
  _has_bits_[0] |= 0x00000010u;
}
inline void YDWInfo::clear_has_bluetoothpower() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void YDWInfo::clear_bluetoothpower() {
  bluetoothpower_ = 0;
  clear_has_bluetoothpower();
}
inline ::google_public::protobuf::int32 YDWInfo::bluetoothpower() const {
  // @@protoc_insertion_point(field_get:gboss.YDWInfo.bluetoothPower)
  return bluetoothpower_;
}
inline void YDWInfo::set_bluetoothpower(::google_public::protobuf::int32 value) {
  set_has_bluetoothpower();
  bluetoothpower_ = value;
  // @@protoc_insertion_point(field_set:gboss.YDWInfo.bluetoothPower)
}

// -------------------------------------------------------------------

// NodeLostInfo

// optional int32 abs = 1;
inline bool NodeLostInfo::has_abs() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeLostInfo::set_has_abs() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeLostInfo::clear_has_abs() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeLostInfo::clear_abs() {
  abs_ = 0;
  clear_has_abs();
}
inline ::google_public::protobuf::int32 NodeLostInfo::abs() const {
  // @@protoc_insertion_point(field_get:gboss.NodeLostInfo.abs)
  return abs_;
}
inline void NodeLostInfo::set_abs(::google_public::protobuf::int32 value) {
  set_has_abs();
  abs_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeLostInfo.abs)
}

// optional int32 esp = 2;
inline bool NodeLostInfo::has_esp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeLostInfo::set_has_esp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeLostInfo::clear_has_esp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeLostInfo::clear_esp() {
  esp_ = 0;
  clear_has_esp();
}
inline ::google_public::protobuf::int32 NodeLostInfo::esp() const {
  // @@protoc_insertion_point(field_get:gboss.NodeLostInfo.esp)
  return esp_;
}
inline void NodeLostInfo::set_esp(::google_public::protobuf::int32 value) {
  set_has_esp();
  esp_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeLostInfo.esp)
}

// optional int32 ems = 3;
inline bool NodeLostInfo::has_ems() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeLostInfo::set_has_ems() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeLostInfo::clear_has_ems() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeLostInfo::clear_ems() {
  ems_ = 0;
  clear_has_ems();
}
inline ::google_public::protobuf::int32 NodeLostInfo::ems() const {
  // @@protoc_insertion_point(field_get:gboss.NodeLostInfo.ems)
  return ems_;
}
inline void NodeLostInfo::set_ems(::google_public::protobuf::int32 value) {
  set_has_ems();
  ems_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeLostInfo.ems)
}

// optional int32 peps = 4;
inline bool NodeLostInfo::has_peps() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeLostInfo::set_has_peps() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeLostInfo::clear_has_peps() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeLostInfo::clear_peps() {
  peps_ = 0;
  clear_has_peps();
}
inline ::google_public::protobuf::int32 NodeLostInfo::peps() const {
  // @@protoc_insertion_point(field_get:gboss.NodeLostInfo.peps)
  return peps_;
}
inline void NodeLostInfo::set_peps(::google_public::protobuf::int32 value) {
  set_has_peps();
  peps_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeLostInfo.peps)
}

// optional int32 tcu = 5;
inline bool NodeLostInfo::has_tcu() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NodeLostInfo::set_has_tcu() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NodeLostInfo::clear_has_tcu() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NodeLostInfo::clear_tcu() {
  tcu_ = 0;
  clear_has_tcu();
}
inline ::google_public::protobuf::int32 NodeLostInfo::tcu() const {
  // @@protoc_insertion_point(field_get:gboss.NodeLostInfo.tcu)
  return tcu_;
}
inline void NodeLostInfo::set_tcu(::google_public::protobuf::int32 value) {
  set_has_tcu();
  tcu_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeLostInfo.tcu)
}

// optional int32 bcm = 6;
inline bool NodeLostInfo::has_bcm() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NodeLostInfo::set_has_bcm() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NodeLostInfo::clear_has_bcm() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NodeLostInfo::clear_bcm() {
  bcm_ = 0;
  clear_has_bcm();
}
inline ::google_public::protobuf::int32 NodeLostInfo::bcm() const {
  // @@protoc_insertion_point(field_get:gboss.NodeLostInfo.bcm)
  return bcm_;
}
inline void NodeLostInfo::set_bcm(::google_public::protobuf::int32 value) {
  set_has_bcm();
  bcm_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeLostInfo.bcm)
}

// optional int32 icm = 7;
inline bool NodeLostInfo::has_icm() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NodeLostInfo::set_has_icm() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NodeLostInfo::clear_has_icm() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NodeLostInfo::clear_icm() {
  icm_ = 0;
  clear_has_icm();
}
inline ::google_public::protobuf::int32 NodeLostInfo::icm() const {
  // @@protoc_insertion_point(field_get:gboss.NodeLostInfo.icm)
  return icm_;
}
inline void NodeLostInfo::set_icm(::google_public::protobuf::int32 value) {
  set_has_icm();
  icm_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeLostInfo.icm)
}

// -------------------------------------------------------------------

// NodeFaultInfo

// optional int32 ebd = 1;
inline bool NodeFaultInfo::has_ebd() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NodeFaultInfo::set_has_ebd() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NodeFaultInfo::clear_has_ebd() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NodeFaultInfo::clear_ebd() {
  ebd_ = 0;
  clear_has_ebd();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::ebd() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.ebd)
  return ebd_;
}
inline void NodeFaultInfo::set_ebd(::google_public::protobuf::int32 value) {
  set_has_ebd();
  ebd_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.ebd)
}

// optional int32 abs = 2;
inline bool NodeFaultInfo::has_abs() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NodeFaultInfo::set_has_abs() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NodeFaultInfo::clear_has_abs() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NodeFaultInfo::clear_abs() {
  abs_ = 0;
  clear_has_abs();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::abs() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.abs)
  return abs_;
}
inline void NodeFaultInfo::set_abs(::google_public::protobuf::int32 value) {
  set_has_abs();
  abs_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.abs)
}

// optional int32 esp = 3;
inline bool NodeFaultInfo::has_esp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NodeFaultInfo::set_has_esp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NodeFaultInfo::clear_has_esp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NodeFaultInfo::clear_esp() {
  esp_ = 0;
  clear_has_esp();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::esp() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.esp)
  return esp_;
}
inline void NodeFaultInfo::set_esp(::google_public::protobuf::int32 value) {
  set_has_esp();
  esp_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.esp)
}

// optional int32 svs = 4;
inline bool NodeFaultInfo::has_svs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NodeFaultInfo::set_has_svs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NodeFaultInfo::clear_has_svs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NodeFaultInfo::clear_svs() {
  svs_ = 0;
  clear_has_svs();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::svs() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.svs)
  return svs_;
}
inline void NodeFaultInfo::set_svs(::google_public::protobuf::int32 value) {
  set_has_svs();
  svs_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.svs)
}

// optional int32 mil = 5;
inline bool NodeFaultInfo::has_mil() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NodeFaultInfo::set_has_mil() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NodeFaultInfo::clear_has_mil() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NodeFaultInfo::clear_mil() {
  mil_ = 0;
  clear_has_mil();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::mil() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.mil)
  return mil_;
}
inline void NodeFaultInfo::set_mil(::google_public::protobuf::int32 value) {
  set_has_mil();
  mil_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.mil)
}

// optional int32 tcu = 6;
inline bool NodeFaultInfo::has_tcu() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NodeFaultInfo::set_has_tcu() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NodeFaultInfo::clear_has_tcu() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NodeFaultInfo::clear_tcu() {
  tcu_ = 0;
  clear_has_tcu();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::tcu() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.tcu)
  return tcu_;
}
inline void NodeFaultInfo::set_tcu(::google_public::protobuf::int32 value) {
  set_has_tcu();
  tcu_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.tcu)
}

// optional int32 peps = 7;
inline bool NodeFaultInfo::has_peps() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NodeFaultInfo::set_has_peps() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NodeFaultInfo::clear_has_peps() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NodeFaultInfo::clear_peps() {
  peps_ = 0;
  clear_has_peps();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::peps() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.peps)
  return peps_;
}
inline void NodeFaultInfo::set_peps(::google_public::protobuf::int32 value) {
  set_has_peps();
  peps_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.peps)
}

// optional int32 tbox = 8;
inline bool NodeFaultInfo::has_tbox() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void NodeFaultInfo::set_has_tbox() {
  _has_bits_[0] |= 0x00000080u;
}
inline void NodeFaultInfo::clear_has_tbox() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void NodeFaultInfo::clear_tbox() {
  tbox_ = 0;
  clear_has_tbox();
}
inline ::google_public::protobuf::int32 NodeFaultInfo::tbox() const {
  // @@protoc_insertion_point(field_get:gboss.NodeFaultInfo.tbox)
  return tbox_;
}
inline void NodeFaultInfo::set_tbox(::google_public::protobuf::int32 value) {
  set_has_tbox();
  tbox_ = value;
  // @@protoc_insertion_point(field_set:gboss.NodeFaultInfo.tbox)
}

// -------------------------------------------------------------------

// FaultLightStatus

// optional .gboss.NodeLostInfo nodeLostInfo = 1;
inline bool FaultLightStatus::has_nodelostinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaultLightStatus::set_has_nodelostinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaultLightStatus::clear_has_nodelostinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaultLightStatus::clear_nodelostinfo() {
  if (nodelostinfo_ != NULL) nodelostinfo_->::gboss::NodeLostInfo::Clear();
  clear_has_nodelostinfo();
}
inline const ::gboss::NodeLostInfo& FaultLightStatus::nodelostinfo() const {
  // @@protoc_insertion_point(field_get:gboss.FaultLightStatus.nodeLostInfo)
  return nodelostinfo_ != NULL ? *nodelostinfo_ : *default_instance_->nodelostinfo_;
}
inline ::gboss::NodeLostInfo* FaultLightStatus::mutable_nodelostinfo() {
  set_has_nodelostinfo();
  if (nodelostinfo_ == NULL) nodelostinfo_ = new ::gboss::NodeLostInfo;
  // @@protoc_insertion_point(field_mutable:gboss.FaultLightStatus.nodeLostInfo)
  return nodelostinfo_;
}
inline ::gboss::NodeLostInfo* FaultLightStatus::release_nodelostinfo() {
  clear_has_nodelostinfo();
  ::gboss::NodeLostInfo* temp = nodelostinfo_;
  nodelostinfo_ = NULL;
  return temp;
}
inline void FaultLightStatus::set_allocated_nodelostinfo(::gboss::NodeLostInfo* nodelostinfo) {
  delete nodelostinfo_;
  nodelostinfo_ = nodelostinfo;
  if (nodelostinfo) {
    set_has_nodelostinfo();
  } else {
    clear_has_nodelostinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.FaultLightStatus.nodeLostInfo)
}

// optional .gboss.NodeFaultInfo nodeFaultInfo = 2;
inline bool FaultLightStatus::has_nodefaultinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaultLightStatus::set_has_nodefaultinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaultLightStatus::clear_has_nodefaultinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaultLightStatus::clear_nodefaultinfo() {
  if (nodefaultinfo_ != NULL) nodefaultinfo_->::gboss::NodeFaultInfo::Clear();
  clear_has_nodefaultinfo();
}
inline const ::gboss::NodeFaultInfo& FaultLightStatus::nodefaultinfo() const {
  // @@protoc_insertion_point(field_get:gboss.FaultLightStatus.nodeFaultInfo)
  return nodefaultinfo_ != NULL ? *nodefaultinfo_ : *default_instance_->nodefaultinfo_;
}
inline ::gboss::NodeFaultInfo* FaultLightStatus::mutable_nodefaultinfo() {
  set_has_nodefaultinfo();
  if (nodefaultinfo_ == NULL) nodefaultinfo_ = new ::gboss::NodeFaultInfo;
  // @@protoc_insertion_point(field_mutable:gboss.FaultLightStatus.nodeFaultInfo)
  return nodefaultinfo_;
}
inline ::gboss::NodeFaultInfo* FaultLightStatus::release_nodefaultinfo() {
  clear_has_nodefaultinfo();
  ::gboss::NodeFaultInfo* temp = nodefaultinfo_;
  nodefaultinfo_ = NULL;
  return temp;
}
inline void FaultLightStatus::set_allocated_nodefaultinfo(::gboss::NodeFaultInfo* nodefaultinfo) {
  delete nodefaultinfo_;
  nodefaultinfo_ = nodefaultinfo;
  if (nodefaultinfo) {
    set_has_nodefaultinfo();
  } else {
    clear_has_nodefaultinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.FaultLightStatus.nodeFaultInfo)
}

// -------------------------------------------------------------------

// GpsBaseInfo

// required int64 gpsTime = 1;
inline bool GpsBaseInfo::has_gpstime() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpsBaseInfo::set_has_gpstime() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GpsBaseInfo::clear_has_gpstime() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GpsBaseInfo::clear_gpstime() {
  gpstime_ = GOOGLE_LONGLONG(0);
  clear_has_gpstime();
}
inline ::google_public::protobuf::int64 GpsBaseInfo::gpstime() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.gpsTime)
  return gpstime_;
}
inline void GpsBaseInfo::set_gpstime(::google_public::protobuf::int64 value) {
  set_has_gpstime();
  gpstime_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.gpsTime)
}

// required bool loc = 2;
inline bool GpsBaseInfo::has_loc() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpsBaseInfo::set_has_loc() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GpsBaseInfo::clear_has_loc() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GpsBaseInfo::clear_loc() {
  loc_ = false;
  clear_has_loc();
}
inline bool GpsBaseInfo::loc() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.loc)
  return loc_;
}
inline void GpsBaseInfo::set_loc(bool value) {
  set_has_loc();
  loc_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.loc)
}

// required int32 lat = 3;
inline bool GpsBaseInfo::has_lat() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpsBaseInfo::set_has_lat() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GpsBaseInfo::clear_has_lat() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GpsBaseInfo::clear_lat() {
  lat_ = 0;
  clear_has_lat();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::lat() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.lat)
  return lat_;
}
inline void GpsBaseInfo::set_lat(::google_public::protobuf::int32 value) {
  set_has_lat();
  lat_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.lat)
}

// required int32 lng = 4;
inline bool GpsBaseInfo::has_lng() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpsBaseInfo::set_has_lng() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GpsBaseInfo::clear_has_lng() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GpsBaseInfo::clear_lng() {
  lng_ = 0;
  clear_has_lng();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::lng() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.lng)
  return lng_;
}
inline void GpsBaseInfo::set_lng(::google_public::protobuf::int32 value) {
  set_has_lng();
  lng_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.lng)
}

// required int32 speed = 5;
inline bool GpsBaseInfo::has_speed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GpsBaseInfo::set_has_speed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GpsBaseInfo::clear_has_speed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GpsBaseInfo::clear_speed() {
  speed_ = 0;
  clear_has_speed();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::speed() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.speed)
  return speed_;
}
inline void GpsBaseInfo::set_speed(::google_public::protobuf::int32 value) {
  set_has_speed();
  speed_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.speed)
}

// required int32 course = 6;
inline bool GpsBaseInfo::has_course() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GpsBaseInfo::set_has_course() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GpsBaseInfo::clear_has_course() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GpsBaseInfo::clear_course() {
  course_ = 0;
  clear_has_course();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::course() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.course)
  return course_;
}
inline void GpsBaseInfo::set_course(::google_public::protobuf::int32 value) {
  set_has_course();
  course_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.course)
}

// repeated int32 status = 7;
inline int GpsBaseInfo::status_size() const {
  return status_.size();
}
inline void GpsBaseInfo::clear_status() {
  status_.Clear();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::status(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.status)
  return status_.Get(index);
}
inline void GpsBaseInfo::set_status(int index, ::google_public::protobuf::int32 value) {
  status_.Set(index, value);
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.status)
}
inline void GpsBaseInfo::add_status(::google_public::protobuf::int32 value) {
  status_.Add(value);
  // @@protoc_insertion_point(field_add:gboss.GpsBaseInfo.status)
}
inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
GpsBaseInfo::status() const {
  // @@protoc_insertion_point(field_list:gboss.GpsBaseInfo.status)
  return status_;
}
inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
GpsBaseInfo::mutable_status() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GpsBaseInfo.status)
  return &status_;
}

// optional int32 totalDistance = 8;
inline bool GpsBaseInfo::has_totaldistance() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GpsBaseInfo::set_has_totaldistance() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GpsBaseInfo::clear_has_totaldistance() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GpsBaseInfo::clear_totaldistance() {
  totaldistance_ = 0;
  clear_has_totaldistance();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::totaldistance() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.totalDistance)
  return totaldistance_;
}
inline void GpsBaseInfo::set_totaldistance(::google_public::protobuf::int32 value) {
  set_has_totaldistance();
  totaldistance_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.totalDistance)
}

// optional int32 oil = 9;
inline bool GpsBaseInfo::has_oil() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GpsBaseInfo::set_has_oil() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GpsBaseInfo::clear_has_oil() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GpsBaseInfo::clear_oil() {
  oil_ = 0;
  clear_has_oil();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::oil() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.oil)
  return oil_;
}
inline void GpsBaseInfo::set_oil(::google_public::protobuf::int32 value) {
  set_has_oil();
  oil_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.oil)
}

// optional int32 oilPercent = 10;
inline bool GpsBaseInfo::has_oilpercent() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GpsBaseInfo::set_has_oilpercent() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GpsBaseInfo::clear_has_oilpercent() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GpsBaseInfo::clear_oilpercent() {
  oilpercent_ = 0;
  clear_has_oilpercent();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::oilpercent() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.oilPercent)
  return oilpercent_;
}
inline void GpsBaseInfo::set_oilpercent(::google_public::protobuf::int32 value) {
  set_has_oilpercent();
  oilpercent_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.oilPercent)
}

// optional int32 temperature1 = 11;
inline bool GpsBaseInfo::has_temperature1() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GpsBaseInfo::set_has_temperature1() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GpsBaseInfo::clear_has_temperature1() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GpsBaseInfo::clear_temperature1() {
  temperature1_ = 0;
  clear_has_temperature1();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::temperature1() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.temperature1)
  return temperature1_;
}
inline void GpsBaseInfo::set_temperature1(::google_public::protobuf::int32 value) {
  set_has_temperature1();
  temperature1_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.temperature1)
}

// optional int32 temperature2 = 12;
inline bool GpsBaseInfo::has_temperature2() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GpsBaseInfo::set_has_temperature2() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GpsBaseInfo::clear_has_temperature2() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GpsBaseInfo::clear_temperature2() {
  temperature2_ = 0;
  clear_has_temperature2();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::temperature2() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.temperature2)
  return temperature2_;
}
inline void GpsBaseInfo::set_temperature2(::google_public::protobuf::int32 value) {
  set_has_temperature2();
  temperature2_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.temperature2)
}

// repeated .gboss.MapEntry appendParams = 13;
inline int GpsBaseInfo::appendparams_size() const {
  return appendparams_.size();
}
inline void GpsBaseInfo::clear_appendparams() {
  appendparams_.Clear();
}
inline const ::gboss::MapEntry& GpsBaseInfo::appendparams(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.appendParams)
  return appendparams_.Get(index);
}
inline ::gboss::MapEntry* GpsBaseInfo::mutable_appendparams(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GpsBaseInfo.appendParams)
  return appendparams_.Mutable(index);
}
inline ::gboss::MapEntry* GpsBaseInfo::add_appendparams() {
  // @@protoc_insertion_point(field_add:gboss.GpsBaseInfo.appendParams)
  return appendparams_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >&
GpsBaseInfo::appendparams() const {
  // @@protoc_insertion_point(field_list:gboss.GpsBaseInfo.appendParams)
  return appendparams_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >*
GpsBaseInfo::mutable_appendparams() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GpsBaseInfo.appendParams)
  return &appendparams_;
}

// optional .gboss.OBDInfo obdInfo = 14;
inline bool GpsBaseInfo::has_obdinfo() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GpsBaseInfo::set_has_obdinfo() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GpsBaseInfo::clear_has_obdinfo() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GpsBaseInfo::clear_obdinfo() {
  if (obdinfo_ != NULL) obdinfo_->::gboss::OBDInfo::Clear();
  clear_has_obdinfo();
}
inline const ::gboss::OBDInfo& GpsBaseInfo::obdinfo() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.obdInfo)
  return obdinfo_ != NULL ? *obdinfo_ : *default_instance_->obdinfo_;
}
inline ::gboss::OBDInfo* GpsBaseInfo::mutable_obdinfo() {
  set_has_obdinfo();
  if (obdinfo_ == NULL) obdinfo_ = new ::gboss::OBDInfo;
  // @@protoc_insertion_point(field_mutable:gboss.GpsBaseInfo.obdInfo)
  return obdinfo_;
}
inline ::gboss::OBDInfo* GpsBaseInfo::release_obdinfo() {
  clear_has_obdinfo();
  ::gboss::OBDInfo* temp = obdinfo_;
  obdinfo_ = NULL;
  return temp;
}
inline void GpsBaseInfo::set_allocated_obdinfo(::gboss::OBDInfo* obdinfo) {
  delete obdinfo_;
  obdinfo_ = obdinfo;
  if (obdinfo) {
    set_has_obdinfo();
  } else {
    clear_has_obdinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsBaseInfo.obdInfo)
}

// repeated .gboss.BaseStationInfo baseStations = 15;
inline int GpsBaseInfo::basestations_size() const {
  return basestations_.size();
}
inline void GpsBaseInfo::clear_basestations() {
  basestations_.Clear();
}
inline const ::gboss::BaseStationInfo& GpsBaseInfo::basestations(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.baseStations)
  return basestations_.Get(index);
}
inline ::gboss::BaseStationInfo* GpsBaseInfo::mutable_basestations(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GpsBaseInfo.baseStations)
  return basestations_.Mutable(index);
}
inline ::gboss::BaseStationInfo* GpsBaseInfo::add_basestations() {
  // @@protoc_insertion_point(field_add:gboss.GpsBaseInfo.baseStations)
  return basestations_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::BaseStationInfo >&
GpsBaseInfo::basestations() const {
  // @@protoc_insertion_point(field_list:gboss.GpsBaseInfo.baseStations)
  return basestations_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::BaseStationInfo >*
GpsBaseInfo::mutable_basestations() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GpsBaseInfo.baseStations)
  return &basestations_;
}

// optional .gboss.BaseStationAddress address = 16;
inline bool GpsBaseInfo::has_address() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GpsBaseInfo::set_has_address() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GpsBaseInfo::clear_has_address() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GpsBaseInfo::clear_address() {
  if (address_ != NULL) address_->::gboss::BaseStationAddress::Clear();
  clear_has_address();
}
inline const ::gboss::BaseStationAddress& GpsBaseInfo::address() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.address)
  return address_ != NULL ? *address_ : *default_instance_->address_;
}
inline ::gboss::BaseStationAddress* GpsBaseInfo::mutable_address() {
  set_has_address();
  if (address_ == NULL) address_ = new ::gboss::BaseStationAddress;
  // @@protoc_insertion_point(field_mutable:gboss.GpsBaseInfo.address)
  return address_;
}
inline ::gboss::BaseStationAddress* GpsBaseInfo::release_address() {
  clear_has_address();
  ::gboss::BaseStationAddress* temp = address_;
  address_ = NULL;
  return temp;
}
inline void GpsBaseInfo::set_allocated_address(::gboss::BaseStationAddress* address) {
  delete address_;
  address_ = address;
  if (address) {
    set_has_address();
  } else {
    clear_has_address();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsBaseInfo.address)
}

// optional .gboss.YDWInfo ydwInfo = 17;
inline bool GpsBaseInfo::has_ydwinfo() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GpsBaseInfo::set_has_ydwinfo() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GpsBaseInfo::clear_has_ydwinfo() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GpsBaseInfo::clear_ydwinfo() {
  if (ydwinfo_ != NULL) ydwinfo_->::gboss::YDWInfo::Clear();
  clear_has_ydwinfo();
}
inline const ::gboss::YDWInfo& GpsBaseInfo::ydwinfo() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.ydwInfo)
  return ydwinfo_ != NULL ? *ydwinfo_ : *default_instance_->ydwinfo_;
}
inline ::gboss::YDWInfo* GpsBaseInfo::mutable_ydwinfo() {
  set_has_ydwinfo();
  if (ydwinfo_ == NULL) ydwinfo_ = new ::gboss::YDWInfo;
  // @@protoc_insertion_point(field_mutable:gboss.GpsBaseInfo.ydwInfo)
  return ydwinfo_;
}
inline ::gboss::YDWInfo* GpsBaseInfo::release_ydwinfo() {
  clear_has_ydwinfo();
  ::gboss::YDWInfo* temp = ydwinfo_;
  ydwinfo_ = NULL;
  return temp;
}
inline void GpsBaseInfo::set_allocated_ydwinfo(::gboss::YDWInfo* ydwinfo) {
  delete ydwinfo_;
  ydwinfo_ = ydwinfo;
  if (ydwinfo) {
    set_has_ydwinfo();
  } else {
    clear_has_ydwinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsBaseInfo.ydwInfo)
}

// optional int32 signal = 18;
inline bool GpsBaseInfo::has_signal() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GpsBaseInfo::set_has_signal() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GpsBaseInfo::clear_has_signal() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GpsBaseInfo::clear_signal() {
  signal_ = 0;
  clear_has_signal();
}
inline ::google_public::protobuf::int32 GpsBaseInfo::signal() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.signal)
  return signal_;
}
inline void GpsBaseInfo::set_signal(::google_public::protobuf::int32 value) {
  set_has_signal();
  signal_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsBaseInfo.signal)
}

// optional .gboss.FaultLightStatus faultLightStatus = 19;
inline bool GpsBaseInfo::has_faultlightstatus() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GpsBaseInfo::set_has_faultlightstatus() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GpsBaseInfo::clear_has_faultlightstatus() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GpsBaseInfo::clear_faultlightstatus() {
  if (faultlightstatus_ != NULL) faultlightstatus_->::gboss::FaultLightStatus::Clear();
  clear_has_faultlightstatus();
}
inline const ::gboss::FaultLightStatus& GpsBaseInfo::faultlightstatus() const {
  // @@protoc_insertion_point(field_get:gboss.GpsBaseInfo.faultLightStatus)
  return faultlightstatus_ != NULL ? *faultlightstatus_ : *default_instance_->faultlightstatus_;
}
inline ::gboss::FaultLightStatus* GpsBaseInfo::mutable_faultlightstatus() {
  set_has_faultlightstatus();
  if (faultlightstatus_ == NULL) faultlightstatus_ = new ::gboss::FaultLightStatus;
  // @@protoc_insertion_point(field_mutable:gboss.GpsBaseInfo.faultLightStatus)
  return faultlightstatus_;
}
inline ::gboss::FaultLightStatus* GpsBaseInfo::release_faultlightstatus() {
  clear_has_faultlightstatus();
  ::gboss::FaultLightStatus* temp = faultlightstatus_;
  faultlightstatus_ = NULL;
  return temp;
}
inline void GpsBaseInfo::set_allocated_faultlightstatus(::gboss::FaultLightStatus* faultlightstatus) {
  delete faultlightstatus_;
  faultlightstatus_ = faultlightstatus;
  if (faultlightstatus) {
    set_has_faultlightstatus();
  } else {
    clear_has_faultlightstatus();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsBaseInfo.faultLightStatus)
}

// -------------------------------------------------------------------

// GpsRoadInfo

// required string name = 1;
inline bool GpsRoadInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpsRoadInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GpsRoadInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GpsRoadInfo::clear_name() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GpsRoadInfo::name() const {
  // @@protoc_insertion_point(field_get:gboss.GpsRoadInfo.name)
  return *name_;
}
inline void GpsRoadInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GpsRoadInfo.name)
}
inline void GpsRoadInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GpsRoadInfo.name)
}
inline void GpsRoadInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GpsRoadInfo.name)
}
inline ::std::string* GpsRoadInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GpsRoadInfo.name)
  return name_;
}
inline ::std::string* GpsRoadInfo::release_name() {
  clear_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GpsRoadInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsRoadInfo.name)
}

// required int32 level = 2;
inline bool GpsRoadInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpsRoadInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GpsRoadInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GpsRoadInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google_public::protobuf::int32 GpsRoadInfo::level() const {
  // @@protoc_insertion_point(field_get:gboss.GpsRoadInfo.level)
  return level_;
}
inline void GpsRoadInfo::set_level(::google_public::protobuf::int32 value) {
  set_has_level();
  level_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsRoadInfo.level)
}

// required int32 distance = 3;
inline bool GpsRoadInfo::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpsRoadInfo::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GpsRoadInfo::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GpsRoadInfo::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google_public::protobuf::int32 GpsRoadInfo::distance() const {
  // @@protoc_insertion_point(field_get:gboss.GpsRoadInfo.distance)
  return distance_;
}
inline void GpsRoadInfo::set_distance(::google_public::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsRoadInfo.distance)
}

// optional int32 id = 4;
inline bool GpsRoadInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpsRoadInfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GpsRoadInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GpsRoadInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google_public::protobuf::int32 GpsRoadInfo::id() const {
  // @@protoc_insertion_point(field_get:gboss.GpsRoadInfo.id)
  return id_;
}
inline void GpsRoadInfo::set_id(::google_public::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsRoadInfo.id)
}

// optional int32 latOnRoad = 5;
inline bool GpsRoadInfo::has_latonroad() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GpsRoadInfo::set_has_latonroad() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GpsRoadInfo::clear_has_latonroad() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GpsRoadInfo::clear_latonroad() {
  latonroad_ = 0;
  clear_has_latonroad();
}
inline ::google_public::protobuf::int32 GpsRoadInfo::latonroad() const {
  // @@protoc_insertion_point(field_get:gboss.GpsRoadInfo.latOnRoad)
  return latonroad_;
}
inline void GpsRoadInfo::set_latonroad(::google_public::protobuf::int32 value) {
  set_has_latonroad();
  latonroad_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsRoadInfo.latOnRoad)
}

// optional int32 lngOnRoad = 6;
inline bool GpsRoadInfo::has_lngonroad() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GpsRoadInfo::set_has_lngonroad() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GpsRoadInfo::clear_has_lngonroad() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GpsRoadInfo::clear_lngonroad() {
  lngonroad_ = 0;
  clear_has_lngonroad();
}
inline ::google_public::protobuf::int32 GpsRoadInfo::lngonroad() const {
  // @@protoc_insertion_point(field_get:gboss.GpsRoadInfo.lngOnRoad)
  return lngonroad_;
}
inline void GpsRoadInfo::set_lngonroad(::google_public::protobuf::int32 value) {
  set_has_lngonroad();
  lngonroad_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsRoadInfo.lngOnRoad)
}

// -------------------------------------------------------------------

// GpsPointInfo

// required string name = 1;
inline bool GpsPointInfo::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpsPointInfo::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GpsPointInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GpsPointInfo::clear_name() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& GpsPointInfo::name() const {
  // @@protoc_insertion_point(field_get:gboss.GpsPointInfo.name)
  return *name_;
}
inline void GpsPointInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GpsPointInfo.name)
}
inline void GpsPointInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GpsPointInfo.name)
}
inline void GpsPointInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GpsPointInfo.name)
}
inline ::std::string* GpsPointInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    name_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GpsPointInfo.name)
  return name_;
}
inline ::std::string* GpsPointInfo::release_name() {
  clear_has_name();
  if (name_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GpsPointInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsPointInfo.name)
}

// required int32 type = 2;
inline bool GpsPointInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpsPointInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GpsPointInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GpsPointInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google_public::protobuf::int32 GpsPointInfo::type() const {
  // @@protoc_insertion_point(field_get:gboss.GpsPointInfo.type)
  return type_;
}
inline void GpsPointInfo::set_type(::google_public::protobuf::int32 value) {
  set_has_type();
  type_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsPointInfo.type)
}

// required int32 distance = 3;
inline bool GpsPointInfo::has_distance() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpsPointInfo::set_has_distance() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GpsPointInfo::clear_has_distance() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GpsPointInfo::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google_public::protobuf::int32 GpsPointInfo::distance() const {
  // @@protoc_insertion_point(field_get:gboss.GpsPointInfo.distance)
  return distance_;
}
inline void GpsPointInfo::set_distance(::google_public::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsPointInfo.distance)
}

// optional int32 id = 4;
inline bool GpsPointInfo::has_id() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpsPointInfo::set_has_id() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GpsPointInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GpsPointInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google_public::protobuf::int32 GpsPointInfo::id() const {
  // @@protoc_insertion_point(field_get:gboss.GpsPointInfo.id)
  return id_;
}
inline void GpsPointInfo::set_id(::google_public::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsPointInfo.id)
}

// -------------------------------------------------------------------

// GpsReferPosition

// required string province = 1;
inline bool GpsReferPosition::has_province() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpsReferPosition::set_has_province() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GpsReferPosition::clear_has_province() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GpsReferPosition::clear_province() {
  if (province_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_->clear();
  }
  clear_has_province();
}
inline const ::std::string& GpsReferPosition::province() const {
  // @@protoc_insertion_point(field_get:gboss.GpsReferPosition.province)
  return *province_;
}
inline void GpsReferPosition::set_province(const ::std::string& value) {
  set_has_province();
  if (province_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GpsReferPosition.province)
}
inline void GpsReferPosition::set_province(const char* value) {
  set_has_province();
  if (province_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GpsReferPosition.province)
}
inline void GpsReferPosition::set_province(const char* value, size_t size) {
  set_has_province();
  if (province_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  province_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GpsReferPosition.province)
}
inline ::std::string* GpsReferPosition::mutable_province() {
  set_has_province();
  if (province_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    province_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GpsReferPosition.province)
  return province_;
}
inline ::std::string* GpsReferPosition::release_province() {
  clear_has_province();
  if (province_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = province_;
    province_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GpsReferPosition::set_allocated_province(::std::string* province) {
  if (province_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (province) {
    set_has_province();
    province_ = province;
  } else {
    clear_has_province();
    province_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsReferPosition.province)
}

// required string city = 2;
inline bool GpsReferPosition::has_city() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpsReferPosition::set_has_city() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GpsReferPosition::clear_has_city() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GpsReferPosition::clear_city() {
  if (city_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_->clear();
  }
  clear_has_city();
}
inline const ::std::string& GpsReferPosition::city() const {
  // @@protoc_insertion_point(field_get:gboss.GpsReferPosition.city)
  return *city_;
}
inline void GpsReferPosition::set_city(const ::std::string& value) {
  set_has_city();
  if (city_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GpsReferPosition.city)
}
inline void GpsReferPosition::set_city(const char* value) {
  set_has_city();
  if (city_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GpsReferPosition.city)
}
inline void GpsReferPosition::set_city(const char* value, size_t size) {
  set_has_city();
  if (city_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  city_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GpsReferPosition.city)
}
inline ::std::string* GpsReferPosition::mutable_city() {
  set_has_city();
  if (city_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    city_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GpsReferPosition.city)
  return city_;
}
inline ::std::string* GpsReferPosition::release_city() {
  clear_has_city();
  if (city_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = city_;
    city_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GpsReferPosition::set_allocated_city(::std::string* city) {
  if (city_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (city) {
    set_has_city();
    city_ = city;
  } else {
    clear_has_city();
    city_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsReferPosition.city)
}

// required string county = 3;
inline bool GpsReferPosition::has_county() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpsReferPosition::set_has_county() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GpsReferPosition::clear_has_county() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GpsReferPosition::clear_county() {
  if (county_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    county_->clear();
  }
  clear_has_county();
}
inline const ::std::string& GpsReferPosition::county() const {
  // @@protoc_insertion_point(field_get:gboss.GpsReferPosition.county)
  return *county_;
}
inline void GpsReferPosition::set_county(const ::std::string& value) {
  set_has_county();
  if (county_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    county_ = new ::std::string;
  }
  county_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GpsReferPosition.county)
}
inline void GpsReferPosition::set_county(const char* value) {
  set_has_county();
  if (county_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    county_ = new ::std::string;
  }
  county_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GpsReferPosition.county)
}
inline void GpsReferPosition::set_county(const char* value, size_t size) {
  set_has_county();
  if (county_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    county_ = new ::std::string;
  }
  county_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GpsReferPosition.county)
}
inline ::std::string* GpsReferPosition::mutable_county() {
  set_has_county();
  if (county_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    county_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GpsReferPosition.county)
  return county_;
}
inline ::std::string* GpsReferPosition::release_county() {
  clear_has_county();
  if (county_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = county_;
    county_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GpsReferPosition::set_allocated_county(::std::string* county) {
  if (county_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete county_;
  }
  if (county) {
    set_has_county();
    county_ = county;
  } else {
    clear_has_county();
    county_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsReferPosition.county)
}

// repeated .gboss.GpsRoadInfo roads = 4;
inline int GpsReferPosition::roads_size() const {
  return roads_.size();
}
inline void GpsReferPosition::clear_roads() {
  roads_.Clear();
}
inline const ::gboss::GpsRoadInfo& GpsReferPosition::roads(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GpsReferPosition.roads)
  return roads_.Get(index);
}
inline ::gboss::GpsRoadInfo* GpsReferPosition::mutable_roads(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GpsReferPosition.roads)
  return roads_.Mutable(index);
}
inline ::gboss::GpsRoadInfo* GpsReferPosition::add_roads() {
  // @@protoc_insertion_point(field_add:gboss.GpsReferPosition.roads)
  return roads_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsRoadInfo >&
GpsReferPosition::roads() const {
  // @@protoc_insertion_point(field_list:gboss.GpsReferPosition.roads)
  return roads_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsRoadInfo >*
GpsReferPosition::mutable_roads() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GpsReferPosition.roads)
  return &roads_;
}

// repeated .gboss.GpsPointInfo points = 5;
inline int GpsReferPosition::points_size() const {
  return points_.size();
}
inline void GpsReferPosition::clear_points() {
  points_.Clear();
}
inline const ::gboss::GpsPointInfo& GpsReferPosition::points(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GpsReferPosition.points)
  return points_.Get(index);
}
inline ::gboss::GpsPointInfo* GpsReferPosition::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GpsReferPosition.points)
  return points_.Mutable(index);
}
inline ::gboss::GpsPointInfo* GpsReferPosition::add_points() {
  // @@protoc_insertion_point(field_add:gboss.GpsReferPosition.points)
  return points_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsPointInfo >&
GpsReferPosition::points() const {
  // @@protoc_insertion_point(field_list:gboss.GpsReferPosition.points)
  return points_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsPointInfo >*
GpsReferPosition::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GpsReferPosition.points)
  return &points_;
}

// -------------------------------------------------------------------

// GpsInfo

// required string callLetter = 1;
inline bool GpsInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GpsInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GpsInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GpsInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& GpsInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.GpsInfo.callLetter)
  return *callletter_;
}
inline void GpsInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GpsInfo.callLetter)
}
inline void GpsInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GpsInfo.callLetter)
}
inline void GpsInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GpsInfo.callLetter)
}
inline ::std::string* GpsInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GpsInfo.callLetter)
  return callletter_;
}
inline ::std::string* GpsInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GpsInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsInfo.callLetter)
}

// required .gboss.GpsBaseInfo baseInfo = 2;
inline bool GpsInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GpsInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GpsInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GpsInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::gboss::GpsBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::gboss::GpsBaseInfo& GpsInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:gboss.GpsInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::gboss::GpsBaseInfo* GpsInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::gboss::GpsBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.GpsInfo.baseInfo)
  return baseinfo_;
}
inline ::gboss::GpsBaseInfo* GpsInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::gboss::GpsBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void GpsInfo::set_allocated_baseinfo(::gboss::GpsBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsInfo.baseInfo)
}

// optional .gboss.GpsReferPosition referPosition = 3;
inline bool GpsInfo::has_referposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GpsInfo::set_has_referposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GpsInfo::clear_has_referposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GpsInfo::clear_referposition() {
  if (referposition_ != NULL) referposition_->::gboss::GpsReferPosition::Clear();
  clear_has_referposition();
}
inline const ::gboss::GpsReferPosition& GpsInfo::referposition() const {
  // @@protoc_insertion_point(field_get:gboss.GpsInfo.referPosition)
  return referposition_ != NULL ? *referposition_ : *default_instance_->referposition_;
}
inline ::gboss::GpsReferPosition* GpsInfo::mutable_referposition() {
  set_has_referposition();
  if (referposition_ == NULL) referposition_ = new ::gboss::GpsReferPosition;
  // @@protoc_insertion_point(field_mutable:gboss.GpsInfo.referPosition)
  return referposition_;
}
inline ::gboss::GpsReferPosition* GpsInfo::release_referposition() {
  clear_has_referposition();
  ::gboss::GpsReferPosition* temp = referposition_;
  referposition_ = NULL;
  return temp;
}
inline void GpsInfo::set_allocated_referposition(::gboss::GpsReferPosition* referposition) {
  delete referposition_;
  referposition_ = referposition;
  if (referposition) {
    set_has_referposition();
  } else {
    clear_has_referposition();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsInfo.referPosition)
}

// optional bytes content = 4;
inline bool GpsInfo::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GpsInfo::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GpsInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GpsInfo::clear_content() {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& GpsInfo::content() const {
  // @@protoc_insertion_point(field_get:gboss.GpsInfo.content)
  return *content_;
}
inline void GpsInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GpsInfo.content)
}
inline void GpsInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GpsInfo.content)
}
inline void GpsInfo::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GpsInfo.content)
}
inline ::std::string* GpsInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GpsInfo.content)
  return content_;
}
inline ::std::string* GpsInfo::release_content() {
  clear_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GpsInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GpsInfo.content)
}

// optional int32 history = 5;
inline bool GpsInfo::has_history() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GpsInfo::set_has_history() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GpsInfo::clear_has_history() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GpsInfo::clear_history() {
  history_ = 0;
  clear_has_history();
}
inline ::google_public::protobuf::int32 GpsInfo::history() const {
  // @@protoc_insertion_point(field_get:gboss.GpsInfo.history)
  return history_;
}
inline void GpsInfo::set_history(::google_public::protobuf::int32 value) {
  set_has_history();
  history_ = value;
  // @@protoc_insertion_point(field_set:gboss.GpsInfo.history)
}

// -------------------------------------------------------------------

// AlarmInfo

// required string callLetter = 1;
inline bool AlarmInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AlarmInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AlarmInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AlarmInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& AlarmInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.AlarmInfo.callLetter)
  return *callletter_;
}
inline void AlarmInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AlarmInfo.callLetter)
}
inline void AlarmInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AlarmInfo.callLetter)
}
inline void AlarmInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AlarmInfo.callLetter)
}
inline ::std::string* AlarmInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AlarmInfo.callLetter)
  return callletter_;
}
inline ::std::string* AlarmInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AlarmInfo.callLetter)
}

// required .gboss.GpsBaseInfo baseInfo = 2;
inline bool AlarmInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AlarmInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AlarmInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AlarmInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::gboss::GpsBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::gboss::GpsBaseInfo& AlarmInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:gboss.AlarmInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::gboss::GpsBaseInfo* AlarmInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::gboss::GpsBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.AlarmInfo.baseInfo)
  return baseinfo_;
}
inline ::gboss::GpsBaseInfo* AlarmInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::gboss::GpsBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void AlarmInfo::set_allocated_baseinfo(::gboss::GpsBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AlarmInfo.baseInfo)
}

// optional .gboss.GpsReferPosition referPosition = 3;
inline bool AlarmInfo::has_referposition() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AlarmInfo::set_has_referposition() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AlarmInfo::clear_has_referposition() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AlarmInfo::clear_referposition() {
  if (referposition_ != NULL) referposition_->::gboss::GpsReferPosition::Clear();
  clear_has_referposition();
}
inline const ::gboss::GpsReferPosition& AlarmInfo::referposition() const {
  // @@protoc_insertion_point(field_get:gboss.AlarmInfo.referPosition)
  return referposition_ != NULL ? *referposition_ : *default_instance_->referposition_;
}
inline ::gboss::GpsReferPosition* AlarmInfo::mutable_referposition() {
  set_has_referposition();
  if (referposition_ == NULL) referposition_ = new ::gboss::GpsReferPosition;
  // @@protoc_insertion_point(field_mutable:gboss.AlarmInfo.referPosition)
  return referposition_;
}
inline ::gboss::GpsReferPosition* AlarmInfo::release_referposition() {
  clear_has_referposition();
  ::gboss::GpsReferPosition* temp = referposition_;
  referposition_ = NULL;
  return temp;
}
inline void AlarmInfo::set_allocated_referposition(::gboss::GpsReferPosition* referposition) {
  delete referposition_;
  referposition_ = referposition;
  if (referposition) {
    set_has_referposition();
  } else {
    clear_has_referposition();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AlarmInfo.referPosition)
}

// optional bytes content = 4;
inline bool AlarmInfo::has_content() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AlarmInfo::set_has_content() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AlarmInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AlarmInfo::clear_content() {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& AlarmInfo::content() const {
  // @@protoc_insertion_point(field_get:gboss.AlarmInfo.content)
  return *content_;
}
inline void AlarmInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AlarmInfo.content)
}
inline void AlarmInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AlarmInfo.content)
}
inline void AlarmInfo::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AlarmInfo.content)
}
inline ::std::string* AlarmInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AlarmInfo.content)
  return content_;
}
inline ::std::string* AlarmInfo::release_content() {
  clear_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AlarmInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AlarmInfo.content)
}

// optional int32 history = 5;
inline bool AlarmInfo::has_history() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AlarmInfo::set_has_history() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AlarmInfo::clear_has_history() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AlarmInfo::clear_history() {
  history_ = 0;
  clear_has_history();
}
inline ::google_public::protobuf::int32 AlarmInfo::history() const {
  // @@protoc_insertion_point(field_get:gboss.AlarmInfo.history)
  return history_;
}
inline void AlarmInfo::set_history(::google_public::protobuf::int32 value) {
  set_has_history();
  history_ = value;
  // @@protoc_insertion_point(field_set:gboss.AlarmInfo.history)
}

// optional int32 unittype = 6;
inline bool AlarmInfo::has_unittype() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AlarmInfo::set_has_unittype() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AlarmInfo::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AlarmInfo::clear_unittype() {
  unittype_ = 0;
  clear_has_unittype();
}
inline ::google_public::protobuf::int32 AlarmInfo::unittype() const {
  // @@protoc_insertion_point(field_get:gboss.AlarmInfo.unittype)
  return unittype_;
}
inline void AlarmInfo::set_unittype(::google_public::protobuf::int32 value) {
  set_has_unittype();
  unittype_ = value;
  // @@protoc_insertion_point(field_set:gboss.AlarmInfo.unittype)
}

// optional int32 trigger = 7;
inline bool AlarmInfo::has_trigger() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AlarmInfo::set_has_trigger() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AlarmInfo::clear_has_trigger() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AlarmInfo::clear_trigger() {
  trigger_ = 0;
  clear_has_trigger();
}
inline ::google_public::protobuf::int32 AlarmInfo::trigger() const {
  // @@protoc_insertion_point(field_get:gboss.AlarmInfo.trigger)
  return trigger_;
}
inline void AlarmInfo::set_trigger(::google_public::protobuf::int32 value) {
  set_has_trigger();
  trigger_ = value;
  // @@protoc_insertion_point(field_set:gboss.AlarmInfo.trigger)
}

// -------------------------------------------------------------------

// UnitVersion

// required string callLetter = 1;
inline bool UnitVersion::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UnitVersion::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UnitVersion::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UnitVersion::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& UnitVersion::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.UnitVersion.callLetter)
  return *callletter_;
}
inline void UnitVersion::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.UnitVersion.callLetter)
}
inline void UnitVersion::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.UnitVersion.callLetter)
}
inline void UnitVersion::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.UnitVersion.callLetter)
}
inline ::std::string* UnitVersion::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.UnitVersion.callLetter)
  return callletter_;
}
inline ::std::string* UnitVersion::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnitVersion::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.UnitVersion.callLetter)
}

// required string version = 2;
inline bool UnitVersion::has_version() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UnitVersion::set_has_version() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UnitVersion::clear_has_version() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UnitVersion::clear_version() {
  if (version_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_->clear();
  }
  clear_has_version();
}
inline const ::std::string& UnitVersion::version() const {
  // @@protoc_insertion_point(field_get:gboss.UnitVersion.version)
  return *version_;
}
inline void UnitVersion::set_version(const ::std::string& value) {
  set_has_version();
  if (version_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.UnitVersion.version)
}
inline void UnitVersion::set_version(const char* value) {
  set_has_version();
  if (version_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.UnitVersion.version)
}
inline void UnitVersion::set_version(const char* value, size_t size) {
  set_has_version();
  if (version_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  version_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.UnitVersion.version)
}
inline ::std::string* UnitVersion::mutable_version() {
  set_has_version();
  if (version_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    version_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.UnitVersion.version)
  return version_;
}
inline ::std::string* UnitVersion::release_version() {
  clear_has_version();
  if (version_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = version_;
    version_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void UnitVersion::set_allocated_version(::std::string* version) {
  if (version_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (version) {
    set_has_version();
    version_ = version;
  } else {
    clear_has_version();
    version_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.UnitVersion.version)
}

// optional int32 result = 3;
inline bool UnitVersion::has_result() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UnitVersion::set_has_result() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UnitVersion::clear_has_result() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UnitVersion::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google_public::protobuf::int32 UnitVersion::result() const {
  // @@protoc_insertion_point(field_get:gboss.UnitVersion.result)
  return result_;
}
inline void UnitVersion::set_result(::google_public::protobuf::int32 value) {
  set_has_result();
  result_ = value;
  // @@protoc_insertion_point(field_set:gboss.UnitVersion.result)
}

// -------------------------------------------------------------------

// OperateDataBaseInfo

// required int32 price = 1;
inline bool OperateDataBaseInfo::has_price() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateDataBaseInfo::set_has_price() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateDataBaseInfo::clear_has_price() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateDataBaseInfo::clear_price() {
  price_ = 0;
  clear_has_price();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::price() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.price)
  return price_;
}
inline void OperateDataBaseInfo::set_price(::google_public::protobuf::int32 value) {
  set_has_price();
  price_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.price)
}

// required int32 countTime = 2;
inline bool OperateDataBaseInfo::has_counttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateDataBaseInfo::set_has_counttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateDataBaseInfo::clear_has_counttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateDataBaseInfo::clear_counttime() {
  counttime_ = 0;
  clear_has_counttime();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::counttime() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.countTime)
  return counttime_;
}
inline void OperateDataBaseInfo::set_counttime(::google_public::protobuf::int32 value) {
  set_has_counttime();
  counttime_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.countTime)
}

// required int32 operateMoney = 3;
inline bool OperateDataBaseInfo::has_operatemoney() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperateDataBaseInfo::set_has_operatemoney() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperateDataBaseInfo::clear_has_operatemoney() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperateDataBaseInfo::clear_operatemoney() {
  operatemoney_ = 0;
  clear_has_operatemoney();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::operatemoney() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.operateMoney)
  return operatemoney_;
}
inline void OperateDataBaseInfo::set_operatemoney(::google_public::protobuf::int32 value) {
  set_has_operatemoney();
  operatemoney_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.operateMoney)
}

// required int32 operateMile = 4;
inline bool OperateDataBaseInfo::has_operatemile() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperateDataBaseInfo::set_has_operatemile() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperateDataBaseInfo::clear_has_operatemile() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperateDataBaseInfo::clear_operatemile() {
  operatemile_ = 0;
  clear_has_operatemile();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::operatemile() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.operateMile)
  return operatemile_;
}
inline void OperateDataBaseInfo::set_operatemile(::google_public::protobuf::int32 value) {
  set_has_operatemile();
  operatemile_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.operateMile)
}

// optional int32 nullMile = 5;
inline bool OperateDataBaseInfo::has_nullmile() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OperateDataBaseInfo::set_has_nullmile() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OperateDataBaseInfo::clear_has_nullmile() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OperateDataBaseInfo::clear_nullmile() {
  nullmile_ = 0;
  clear_has_nullmile();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::nullmile() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.nullMile)
  return nullmile_;
}
inline void OperateDataBaseInfo::set_nullmile(::google_public::protobuf::int32 value) {
  set_has_nullmile();
  nullmile_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.nullMile)
}

// optional int32 overSpeedMile = 6;
inline bool OperateDataBaseInfo::has_overspeedmile() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OperateDataBaseInfo::set_has_overspeedmile() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OperateDataBaseInfo::clear_has_overspeedmile() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OperateDataBaseInfo::clear_overspeedmile() {
  overspeedmile_ = 0;
  clear_has_overspeedmile();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::overspeedmile() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.overSpeedMile)
  return overspeedmile_;
}
inline void OperateDataBaseInfo::set_overspeedmile(::google_public::protobuf::int32 value) {
  set_has_overspeedmile();
  overspeedmile_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.overSpeedMile)
}

// optional int32 overSpeedCount = 7;
inline bool OperateDataBaseInfo::has_overspeedcount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OperateDataBaseInfo::set_has_overspeedcount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OperateDataBaseInfo::clear_has_overspeedcount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OperateDataBaseInfo::clear_overspeedcount() {
  overspeedcount_ = 0;
  clear_has_overspeedcount();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::overspeedcount() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.overSpeedCount)
  return overspeedcount_;
}
inline void OperateDataBaseInfo::set_overspeedcount(::google_public::protobuf::int32 value) {
  set_has_overspeedcount();
  overspeedcount_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.overSpeedCount)
}

// optional int32 powerOffCount = 8;
inline bool OperateDataBaseInfo::has_poweroffcount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OperateDataBaseInfo::set_has_poweroffcount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OperateDataBaseInfo::clear_has_poweroffcount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OperateDataBaseInfo::clear_poweroffcount() {
  poweroffcount_ = 0;
  clear_has_poweroffcount();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::poweroffcount() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.powerOffCount)
  return poweroffcount_;
}
inline void OperateDataBaseInfo::set_poweroffcount(::google_public::protobuf::int32 value) {
  set_has_poweroffcount();
  poweroffcount_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.powerOffCount)
}

// optional int32 powerOffTime = 9;
inline bool OperateDataBaseInfo::has_powerofftime() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void OperateDataBaseInfo::set_has_powerofftime() {
  _has_bits_[0] |= 0x00000100u;
}
inline void OperateDataBaseInfo::clear_has_powerofftime() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void OperateDataBaseInfo::clear_powerofftime() {
  powerofftime_ = 0;
  clear_has_powerofftime();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::powerofftime() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.powerOffTime)
  return powerofftime_;
}
inline void OperateDataBaseInfo::set_powerofftime(::google_public::protobuf::int32 value) {
  set_has_powerofftime();
  powerofftime_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.powerOffTime)
}

// optional int32 sequenceNo = 10;
inline bool OperateDataBaseInfo::has_sequenceno() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void OperateDataBaseInfo::set_has_sequenceno() {
  _has_bits_[0] |= 0x00000200u;
}
inline void OperateDataBaseInfo::clear_has_sequenceno() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void OperateDataBaseInfo::clear_sequenceno() {
  sequenceno_ = 0;
  clear_has_sequenceno();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::sequenceno() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.sequenceNo)
  return sequenceno_;
}
inline void OperateDataBaseInfo::set_sequenceno(::google_public::protobuf::int32 value) {
  set_has_sequenceno();
  sequenceno_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.sequenceNo)
}

// repeated .gboss.MapEntry appendParams = 11;
inline int OperateDataBaseInfo::appendparams_size() const {
  return appendparams_.size();
}
inline void OperateDataBaseInfo::clear_appendparams() {
  appendparams_.Clear();
}
inline const ::gboss::MapEntry& OperateDataBaseInfo::appendparams(int index) const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.appendParams)
  return appendparams_.Get(index);
}
inline ::gboss::MapEntry* OperateDataBaseInfo::mutable_appendparams(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.OperateDataBaseInfo.appendParams)
  return appendparams_.Mutable(index);
}
inline ::gboss::MapEntry* OperateDataBaseInfo::add_appendparams() {
  // @@protoc_insertion_point(field_add:gboss.OperateDataBaseInfo.appendParams)
  return appendparams_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >&
OperateDataBaseInfo::appendparams() const {
  // @@protoc_insertion_point(field_list:gboss.OperateDataBaseInfo.appendParams)
  return appendparams_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::MapEntry >*
OperateDataBaseInfo::mutable_appendparams() {
  // @@protoc_insertion_point(field_mutable_list:gboss.OperateDataBaseInfo.appendParams)
  return &appendparams_;
}

// optional int32 perprice = 12;
inline bool OperateDataBaseInfo::has_perprice() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void OperateDataBaseInfo::set_has_perprice() {
  _has_bits_[0] |= 0x00000800u;
}
inline void OperateDataBaseInfo::clear_has_perprice() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void OperateDataBaseInfo::clear_perprice() {
  perprice_ = 0;
  clear_has_perprice();
}
inline ::google_public::protobuf::int32 OperateDataBaseInfo::perprice() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.perprice)
  return perprice_;
}
inline void OperateDataBaseInfo::set_perprice(::google_public::protobuf::int32 value) {
  set_has_perprice();
  perprice_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.perprice)
}

// optional string licenseno = 13;
inline bool OperateDataBaseInfo::has_licenseno() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void OperateDataBaseInfo::set_has_licenseno() {
  _has_bits_[0] |= 0x00001000u;
}
inline void OperateDataBaseInfo::clear_has_licenseno() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void OperateDataBaseInfo::clear_licenseno() {
  if (licenseno_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    licenseno_->clear();
  }
  clear_has_licenseno();
}
inline const ::std::string& OperateDataBaseInfo::licenseno() const {
  // @@protoc_insertion_point(field_get:gboss.OperateDataBaseInfo.licenseno)
  return *licenseno_;
}
inline void OperateDataBaseInfo::set_licenseno(const ::std::string& value) {
  set_has_licenseno();
  if (licenseno_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    licenseno_ = new ::std::string;
  }
  licenseno_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.OperateDataBaseInfo.licenseno)
}
inline void OperateDataBaseInfo::set_licenseno(const char* value) {
  set_has_licenseno();
  if (licenseno_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    licenseno_ = new ::std::string;
  }
  licenseno_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.OperateDataBaseInfo.licenseno)
}
inline void OperateDataBaseInfo::set_licenseno(const char* value, size_t size) {
  set_has_licenseno();
  if (licenseno_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    licenseno_ = new ::std::string;
  }
  licenseno_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.OperateDataBaseInfo.licenseno)
}
inline ::std::string* OperateDataBaseInfo::mutable_licenseno() {
  set_has_licenseno();
  if (licenseno_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    licenseno_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.OperateDataBaseInfo.licenseno)
  return licenseno_;
}
inline ::std::string* OperateDataBaseInfo::release_licenseno() {
  clear_has_licenseno();
  if (licenseno_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = licenseno_;
    licenseno_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperateDataBaseInfo::set_allocated_licenseno(::std::string* licenseno) {
  if (licenseno_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete licenseno_;
  }
  if (licenseno) {
    set_has_licenseno();
    licenseno_ = licenseno;
  } else {
    clear_has_licenseno();
    licenseno_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateDataBaseInfo.licenseno)
}

// -------------------------------------------------------------------

// OperateData

// required string callLetter = 1;
inline bool OperateData::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OperateData::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OperateData::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OperateData::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& OperateData::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.callLetter)
  return *callletter_;
}
inline void OperateData::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.OperateData.callLetter)
}
inline void OperateData::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.OperateData.callLetter)
}
inline void OperateData::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.OperateData.callLetter)
}
inline ::std::string* OperateData::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.OperateData.callLetter)
  return callletter_;
}
inline ::std::string* OperateData::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperateData::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateData.callLetter)
}

// required .gboss.OperateDataBaseInfo baseInfo = 2;
inline bool OperateData::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OperateData::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OperateData::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OperateData::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::gboss::OperateDataBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::gboss::OperateDataBaseInfo& OperateData::baseinfo() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::gboss::OperateDataBaseInfo* OperateData::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::gboss::OperateDataBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.OperateData.baseInfo)
  return baseinfo_;
}
inline ::gboss::OperateDataBaseInfo* OperateData::release_baseinfo() {
  clear_has_baseinfo();
  ::gboss::OperateDataBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void OperateData::set_allocated_baseinfo(::gboss::OperateDataBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateData.baseInfo)
}

// required .gboss.GpsBaseInfo startGps = 3;
inline bool OperateData::has_startgps() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OperateData::set_has_startgps() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OperateData::clear_has_startgps() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OperateData::clear_startgps() {
  if (startgps_ != NULL) startgps_->::gboss::GpsBaseInfo::Clear();
  clear_has_startgps();
}
inline const ::gboss::GpsBaseInfo& OperateData::startgps() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.startGps)
  return startgps_ != NULL ? *startgps_ : *default_instance_->startgps_;
}
inline ::gboss::GpsBaseInfo* OperateData::mutable_startgps() {
  set_has_startgps();
  if (startgps_ == NULL) startgps_ = new ::gboss::GpsBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.OperateData.startGps)
  return startgps_;
}
inline ::gboss::GpsBaseInfo* OperateData::release_startgps() {
  clear_has_startgps();
  ::gboss::GpsBaseInfo* temp = startgps_;
  startgps_ = NULL;
  return temp;
}
inline void OperateData::set_allocated_startgps(::gboss::GpsBaseInfo* startgps) {
  delete startgps_;
  startgps_ = startgps;
  if (startgps) {
    set_has_startgps();
  } else {
    clear_has_startgps();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateData.startGps)
}

// optional .gboss.GpsReferPosition startPoi = 4;
inline bool OperateData::has_startpoi() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void OperateData::set_has_startpoi() {
  _has_bits_[0] |= 0x00000008u;
}
inline void OperateData::clear_has_startpoi() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void OperateData::clear_startpoi() {
  if (startpoi_ != NULL) startpoi_->::gboss::GpsReferPosition::Clear();
  clear_has_startpoi();
}
inline const ::gboss::GpsReferPosition& OperateData::startpoi() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.startPoi)
  return startpoi_ != NULL ? *startpoi_ : *default_instance_->startpoi_;
}
inline ::gboss::GpsReferPosition* OperateData::mutable_startpoi() {
  set_has_startpoi();
  if (startpoi_ == NULL) startpoi_ = new ::gboss::GpsReferPosition;
  // @@protoc_insertion_point(field_mutable:gboss.OperateData.startPoi)
  return startpoi_;
}
inline ::gboss::GpsReferPosition* OperateData::release_startpoi() {
  clear_has_startpoi();
  ::gboss::GpsReferPosition* temp = startpoi_;
  startpoi_ = NULL;
  return temp;
}
inline void OperateData::set_allocated_startpoi(::gboss::GpsReferPosition* startpoi) {
  delete startpoi_;
  startpoi_ = startpoi;
  if (startpoi) {
    set_has_startpoi();
  } else {
    clear_has_startpoi();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateData.startPoi)
}

// required .gboss.GpsBaseInfo stopGps = 5;
inline bool OperateData::has_stopgps() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void OperateData::set_has_stopgps() {
  _has_bits_[0] |= 0x00000010u;
}
inline void OperateData::clear_has_stopgps() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void OperateData::clear_stopgps() {
  if (stopgps_ != NULL) stopgps_->::gboss::GpsBaseInfo::Clear();
  clear_has_stopgps();
}
inline const ::gboss::GpsBaseInfo& OperateData::stopgps() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.stopGps)
  return stopgps_ != NULL ? *stopgps_ : *default_instance_->stopgps_;
}
inline ::gboss::GpsBaseInfo* OperateData::mutable_stopgps() {
  set_has_stopgps();
  if (stopgps_ == NULL) stopgps_ = new ::gboss::GpsBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.OperateData.stopGps)
  return stopgps_;
}
inline ::gboss::GpsBaseInfo* OperateData::release_stopgps() {
  clear_has_stopgps();
  ::gboss::GpsBaseInfo* temp = stopgps_;
  stopgps_ = NULL;
  return temp;
}
inline void OperateData::set_allocated_stopgps(::gboss::GpsBaseInfo* stopgps) {
  delete stopgps_;
  stopgps_ = stopgps;
  if (stopgps) {
    set_has_stopgps();
  } else {
    clear_has_stopgps();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateData.stopGps)
}

// optional .gboss.GpsReferPosition stopPoi = 6;
inline bool OperateData::has_stoppoi() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void OperateData::set_has_stoppoi() {
  _has_bits_[0] |= 0x00000020u;
}
inline void OperateData::clear_has_stoppoi() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void OperateData::clear_stoppoi() {
  if (stoppoi_ != NULL) stoppoi_->::gboss::GpsReferPosition::Clear();
  clear_has_stoppoi();
}
inline const ::gboss::GpsReferPosition& OperateData::stoppoi() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.stopPoi)
  return stoppoi_ != NULL ? *stoppoi_ : *default_instance_->stoppoi_;
}
inline ::gboss::GpsReferPosition* OperateData::mutable_stoppoi() {
  set_has_stoppoi();
  if (stoppoi_ == NULL) stoppoi_ = new ::gboss::GpsReferPosition;
  // @@protoc_insertion_point(field_mutable:gboss.OperateData.stopPoi)
  return stoppoi_;
}
inline ::gboss::GpsReferPosition* OperateData::release_stoppoi() {
  clear_has_stoppoi();
  ::gboss::GpsReferPosition* temp = stoppoi_;
  stoppoi_ = NULL;
  return temp;
}
inline void OperateData::set_allocated_stoppoi(::gboss::GpsReferPosition* stoppoi) {
  delete stoppoi_;
  stoppoi_ = stoppoi;
  if (stoppoi) {
    set_has_stoppoi();
  } else {
    clear_has_stoppoi();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateData.stopPoi)
}

// optional bytes content = 7;
inline bool OperateData::has_content() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void OperateData::set_has_content() {
  _has_bits_[0] |= 0x00000040u;
}
inline void OperateData::clear_has_content() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void OperateData::clear_content() {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& OperateData::content() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.content)
  return *content_;
}
inline void OperateData::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.OperateData.content)
}
inline void OperateData::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.OperateData.content)
}
inline void OperateData::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.OperateData.content)
}
inline ::std::string* OperateData::mutable_content() {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.OperateData.content)
  return content_;
}
inline ::std::string* OperateData::release_content() {
  clear_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void OperateData::set_allocated_content(::std::string* content) {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.OperateData.content)
}

// optional int32 history = 8;
inline bool OperateData::has_history() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void OperateData::set_has_history() {
  _has_bits_[0] |= 0x00000080u;
}
inline void OperateData::clear_has_history() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void OperateData::clear_history() {
  history_ = 0;
  clear_has_history();
}
inline ::google_public::protobuf::int32 OperateData::history() const {
  // @@protoc_insertion_point(field_get:gboss.OperateData.history)
  return history_;
}
inline void OperateData::set_history(::google_public::protobuf::int32 value) {
  set_has_history();
  history_ = value;
  // @@protoc_insertion_point(field_set:gboss.OperateData.history)
}

// -------------------------------------------------------------------

// ShortMessage

// required string callLetter = 1;
inline bool ShortMessage::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ShortMessage::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ShortMessage::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ShortMessage::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& ShortMessage::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.ShortMessage.callLetter)
  return *callletter_;
}
inline void ShortMessage::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.ShortMessage.callLetter)
}
inline void ShortMessage::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.ShortMessage.callLetter)
}
inline void ShortMessage::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.ShortMessage.callLetter)
}
inline ::std::string* ShortMessage::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.ShortMessage.callLetter)
  return callletter_;
}
inline ::std::string* ShortMessage::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShortMessage::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.ShortMessage.callLetter)
}

// required string msg = 2;
inline bool ShortMessage::has_msg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ShortMessage::set_has_msg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ShortMessage::clear_has_msg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ShortMessage::clear_msg() {
  if (msg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_->clear();
  }
  clear_has_msg();
}
inline const ::std::string& ShortMessage::msg() const {
  // @@protoc_insertion_point(field_get:gboss.ShortMessage.msg)
  return *msg_;
}
inline void ShortMessage::set_msg(const ::std::string& value) {
  set_has_msg();
  if (msg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.ShortMessage.msg)
}
inline void ShortMessage::set_msg(const char* value) {
  set_has_msg();
  if (msg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.ShortMessage.msg)
}
inline void ShortMessage::set_msg(const char* value, size_t size) {
  set_has_msg();
  if (msg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  msg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.ShortMessage.msg)
}
inline ::std::string* ShortMessage::mutable_msg() {
  set_has_msg();
  if (msg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    msg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.ShortMessage.msg)
  return msg_;
}
inline ::std::string* ShortMessage::release_msg() {
  clear_has_msg();
  if (msg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = msg_;
    msg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ShortMessage::set_allocated_msg(::std::string* msg) {
  if (msg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (msg) {
    set_has_msg();
    msg_ = msg;
  } else {
    clear_has_msg();
    msg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.ShortMessage.msg)
}

// optional int64 recvTime = 3;
inline bool ShortMessage::has_recvtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ShortMessage::set_has_recvtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ShortMessage::clear_has_recvtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ShortMessage::clear_recvtime() {
  recvtime_ = GOOGLE_LONGLONG(0);
  clear_has_recvtime();
}
inline ::google_public::protobuf::int64 ShortMessage::recvtime() const {
  // @@protoc_insertion_point(field_get:gboss.ShortMessage.recvTime)
  return recvtime_;
}
inline void ShortMessage::set_recvtime(::google_public::protobuf::int64 value) {
  set_has_recvtime();
  recvtime_ = value;
  // @@protoc_insertion_point(field_set:gboss.ShortMessage.recvTime)
}

// -------------------------------------------------------------------

// TravelInfo

// required string callLetter = 1;
inline bool TravelInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TravelInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TravelInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TravelInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& TravelInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.callLetter)
  return *callletter_;
}
inline void TravelInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.callLetter)
}
inline void TravelInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.TravelInfo.callLetter)
}
inline void TravelInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.TravelInfo.callLetter)
}
inline ::std::string* TravelInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.TravelInfo.callLetter)
  return callletter_;
}
inline ::std::string* TravelInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void TravelInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.TravelInfo.callLetter)
}

// required int64 startTime = 2;
inline bool TravelInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TravelInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TravelInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TravelInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google_public::protobuf::int64 TravelInfo::starttime() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.startTime)
  return starttime_;
}
inline void TravelInfo::set_starttime(::google_public::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.startTime)
}

// required int64 endTime = 3;
inline bool TravelInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TravelInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TravelInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TravelInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google_public::protobuf::int64 TravelInfo::endtime() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.endTime)
  return endtime_;
}
inline void TravelInfo::set_endtime(::google_public::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.endTime)
}

// optional int32 distance = 4;
inline bool TravelInfo::has_distance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TravelInfo::set_has_distance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TravelInfo::clear_has_distance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TravelInfo::clear_distance() {
  distance_ = 0;
  clear_has_distance();
}
inline ::google_public::protobuf::int32 TravelInfo::distance() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.distance)
  return distance_;
}
inline void TravelInfo::set_distance(::google_public::protobuf::int32 value) {
  set_has_distance();
  distance_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.distance)
}

// optional int32 maxSpeed = 5;
inline bool TravelInfo::has_maxspeed() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TravelInfo::set_has_maxspeed() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TravelInfo::clear_has_maxspeed() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TravelInfo::clear_maxspeed() {
  maxspeed_ = 0;
  clear_has_maxspeed();
}
inline ::google_public::protobuf::int32 TravelInfo::maxspeed() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.maxSpeed)
  return maxspeed_;
}
inline void TravelInfo::set_maxspeed(::google_public::protobuf::int32 value) {
  set_has_maxspeed();
  maxspeed_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.maxSpeed)
}

// optional int32 overSpeedTime = 6;
inline bool TravelInfo::has_overspeedtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void TravelInfo::set_has_overspeedtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void TravelInfo::clear_has_overspeedtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void TravelInfo::clear_overspeedtime() {
  overspeedtime_ = 0;
  clear_has_overspeedtime();
}
inline ::google_public::protobuf::int32 TravelInfo::overspeedtime() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.overSpeedTime)
  return overspeedtime_;
}
inline void TravelInfo::set_overspeedtime(::google_public::protobuf::int32 value) {
  set_has_overspeedtime();
  overspeedtime_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.overSpeedTime)
}

// optional int32 quickBrakeCount = 7;
inline bool TravelInfo::has_quickbrakecount() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void TravelInfo::set_has_quickbrakecount() {
  _has_bits_[0] |= 0x00000040u;
}
inline void TravelInfo::clear_has_quickbrakecount() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void TravelInfo::clear_quickbrakecount() {
  quickbrakecount_ = 0;
  clear_has_quickbrakecount();
}
inline ::google_public::protobuf::int32 TravelInfo::quickbrakecount() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.quickBrakeCount)
  return quickbrakecount_;
}
inline void TravelInfo::set_quickbrakecount(::google_public::protobuf::int32 value) {
  set_has_quickbrakecount();
  quickbrakecount_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.quickBrakeCount)
}

// optional int32 emergencyBrakeCount = 8;
inline bool TravelInfo::has_emergencybrakecount() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void TravelInfo::set_has_emergencybrakecount() {
  _has_bits_[0] |= 0x00000080u;
}
inline void TravelInfo::clear_has_emergencybrakecount() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void TravelInfo::clear_emergencybrakecount() {
  emergencybrakecount_ = 0;
  clear_has_emergencybrakecount();
}
inline ::google_public::protobuf::int32 TravelInfo::emergencybrakecount() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.emergencyBrakeCount)
  return emergencybrakecount_;
}
inline void TravelInfo::set_emergencybrakecount(::google_public::protobuf::int32 value) {
  set_has_emergencybrakecount();
  emergencybrakecount_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.emergencyBrakeCount)
}

// optional int32 quickSpeedUpCount = 9;
inline bool TravelInfo::has_quickspeedupcount() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void TravelInfo::set_has_quickspeedupcount() {
  _has_bits_[0] |= 0x00000100u;
}
inline void TravelInfo::clear_has_quickspeedupcount() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void TravelInfo::clear_quickspeedupcount() {
  quickspeedupcount_ = 0;
  clear_has_quickspeedupcount();
}
inline ::google_public::protobuf::int32 TravelInfo::quickspeedupcount() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.quickSpeedUpCount)
  return quickspeedupcount_;
}
inline void TravelInfo::set_quickspeedupcount(::google_public::protobuf::int32 value) {
  set_has_quickspeedupcount();
  quickspeedupcount_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.quickSpeedUpCount)
}

// optional int32 emergencySpeedUpCount = 10;
inline bool TravelInfo::has_emergencyspeedupcount() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void TravelInfo::set_has_emergencyspeedupcount() {
  _has_bits_[0] |= 0x00000200u;
}
inline void TravelInfo::clear_has_emergencyspeedupcount() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void TravelInfo::clear_emergencyspeedupcount() {
  emergencyspeedupcount_ = 0;
  clear_has_emergencyspeedupcount();
}
inline ::google_public::protobuf::int32 TravelInfo::emergencyspeedupcount() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.emergencySpeedUpCount)
  return emergencyspeedupcount_;
}
inline void TravelInfo::set_emergencyspeedupcount(::google_public::protobuf::int32 value) {
  set_has_emergencyspeedupcount();
  emergencyspeedupcount_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.emergencySpeedUpCount)
}

// optional int32 averageSpeed = 11;
inline bool TravelInfo::has_averagespeed() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void TravelInfo::set_has_averagespeed() {
  _has_bits_[0] |= 0x00000400u;
}
inline void TravelInfo::clear_has_averagespeed() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void TravelInfo::clear_averagespeed() {
  averagespeed_ = 0;
  clear_has_averagespeed();
}
inline ::google_public::protobuf::int32 TravelInfo::averagespeed() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.averageSpeed)
  return averagespeed_;
}
inline void TravelInfo::set_averagespeed(::google_public::protobuf::int32 value) {
  set_has_averagespeed();
  averagespeed_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.averageSpeed)
}

// optional int32 maxWaterTemperature = 12;
inline bool TravelInfo::has_maxwatertemperature() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void TravelInfo::set_has_maxwatertemperature() {
  _has_bits_[0] |= 0x00000800u;
}
inline void TravelInfo::clear_has_maxwatertemperature() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void TravelInfo::clear_maxwatertemperature() {
  maxwatertemperature_ = 0;
  clear_has_maxwatertemperature();
}
inline ::google_public::protobuf::int32 TravelInfo::maxwatertemperature() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.maxWaterTemperature)
  return maxwatertemperature_;
}
inline void TravelInfo::set_maxwatertemperature(::google_public::protobuf::int32 value) {
  set_has_maxwatertemperature();
  maxwatertemperature_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.maxWaterTemperature)
}

// optional int32 maxRotationSpeed = 13;
inline bool TravelInfo::has_maxrotationspeed() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void TravelInfo::set_has_maxrotationspeed() {
  _has_bits_[0] |= 0x00001000u;
}
inline void TravelInfo::clear_has_maxrotationspeed() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void TravelInfo::clear_maxrotationspeed() {
  maxrotationspeed_ = 0;
  clear_has_maxrotationspeed();
}
inline ::google_public::protobuf::int32 TravelInfo::maxrotationspeed() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.maxRotationSpeed)
  return maxrotationspeed_;
}
inline void TravelInfo::set_maxrotationspeed(::google_public::protobuf::int32 value) {
  set_has_maxrotationspeed();
  maxrotationspeed_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.maxRotationSpeed)
}

// optional int32 voltage = 14;
inline bool TravelInfo::has_voltage() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void TravelInfo::set_has_voltage() {
  _has_bits_[0] |= 0x00002000u;
}
inline void TravelInfo::clear_has_voltage() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void TravelInfo::clear_voltage() {
  voltage_ = 0;
  clear_has_voltage();
}
inline ::google_public::protobuf::int32 TravelInfo::voltage() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.voltage)
  return voltage_;
}
inline void TravelInfo::set_voltage(::google_public::protobuf::int32 value) {
  set_has_voltage();
  voltage_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.voltage)
}

// optional int32 totalOil = 15;
inline bool TravelInfo::has_totaloil() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void TravelInfo::set_has_totaloil() {
  _has_bits_[0] |= 0x00004000u;
}
inline void TravelInfo::clear_has_totaloil() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void TravelInfo::clear_totaloil() {
  totaloil_ = 0;
  clear_has_totaloil();
}
inline ::google_public::protobuf::int32 TravelInfo::totaloil() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.totalOil)
  return totaloil_;
}
inline void TravelInfo::set_totaloil(::google_public::protobuf::int32 value) {
  set_has_totaloil();
  totaloil_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.totalOil)
}

// optional int32 averageOil = 16;
inline bool TravelInfo::has_averageoil() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void TravelInfo::set_has_averageoil() {
  _has_bits_[0] |= 0x00008000u;
}
inline void TravelInfo::clear_has_averageoil() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void TravelInfo::clear_averageoil() {
  averageoil_ = 0;
  clear_has_averageoil();
}
inline ::google_public::protobuf::int32 TravelInfo::averageoil() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.averageOil)
  return averageoil_;
}
inline void TravelInfo::set_averageoil(::google_public::protobuf::int32 value) {
  set_has_averageoil();
  averageoil_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.averageOil)
}

// optional int32 tiredDrivingTime = 17;
inline bool TravelInfo::has_tireddrivingtime() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void TravelInfo::set_has_tireddrivingtime() {
  _has_bits_[0] |= 0x00010000u;
}
inline void TravelInfo::clear_has_tireddrivingtime() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void TravelInfo::clear_tireddrivingtime() {
  tireddrivingtime_ = 0;
  clear_has_tireddrivingtime();
}
inline ::google_public::protobuf::int32 TravelInfo::tireddrivingtime() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.tiredDrivingTime)
  return tireddrivingtime_;
}
inline void TravelInfo::set_tireddrivingtime(::google_public::protobuf::int32 value) {
  set_has_tireddrivingtime();
  tireddrivingtime_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.tiredDrivingTime)
}

// optional int32 serialNumber = 18;
inline bool TravelInfo::has_serialnumber() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void TravelInfo::set_has_serialnumber() {
  _has_bits_[0] |= 0x00020000u;
}
inline void TravelInfo::clear_has_serialnumber() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void TravelInfo::clear_serialnumber() {
  serialnumber_ = 0;
  clear_has_serialnumber();
}
inline ::google_public::protobuf::int32 TravelInfo::serialnumber() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.serialNumber)
  return serialnumber_;
}
inline void TravelInfo::set_serialnumber(::google_public::protobuf::int32 value) {
  set_has_serialnumber();
  serialnumber_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.serialNumber)
}

// optional int32 averageRotationSpeed = 19;
inline bool TravelInfo::has_averagerotationspeed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void TravelInfo::set_has_averagerotationspeed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void TravelInfo::clear_has_averagerotationspeed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void TravelInfo::clear_averagerotationspeed() {
  averagerotationspeed_ = 0;
  clear_has_averagerotationspeed();
}
inline ::google_public::protobuf::int32 TravelInfo::averagerotationspeed() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.averageRotationSpeed)
  return averagerotationspeed_;
}
inline void TravelInfo::set_averagerotationspeed(::google_public::protobuf::int32 value) {
  set_has_averagerotationspeed();
  averagerotationspeed_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.averageRotationSpeed)
}

// optional int32 maxOil = 20;
inline bool TravelInfo::has_maxoil() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void TravelInfo::set_has_maxoil() {
  _has_bits_[0] |= 0x00080000u;
}
inline void TravelInfo::clear_has_maxoil() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void TravelInfo::clear_maxoil() {
  maxoil_ = 0;
  clear_has_maxoil();
}
inline ::google_public::protobuf::int32 TravelInfo::maxoil() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.maxOil)
  return maxoil_;
}
inline void TravelInfo::set_maxoil(::google_public::protobuf::int32 value) {
  set_has_maxoil();
  maxoil_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.maxOil)
}

// optional int32 idleTime = 21;
inline bool TravelInfo::has_idletime() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void TravelInfo::set_has_idletime() {
  _has_bits_[0] |= 0x00100000u;
}
inline void TravelInfo::clear_has_idletime() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void TravelInfo::clear_idletime() {
  idletime_ = 0;
  clear_has_idletime();
}
inline ::google_public::protobuf::int32 TravelInfo::idletime() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.idleTime)
  return idletime_;
}
inline void TravelInfo::set_idletime(::google_public::protobuf::int32 value) {
  set_has_idletime();
  idletime_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.idleTime)
}

// optional .gboss.GpsBaseInfo startGps = 22;
inline bool TravelInfo::has_startgps() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void TravelInfo::set_has_startgps() {
  _has_bits_[0] |= 0x00200000u;
}
inline void TravelInfo::clear_has_startgps() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void TravelInfo::clear_startgps() {
  if (startgps_ != NULL) startgps_->::gboss::GpsBaseInfo::Clear();
  clear_has_startgps();
}
inline const ::gboss::GpsBaseInfo& TravelInfo::startgps() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.startGps)
  return startgps_ != NULL ? *startgps_ : *default_instance_->startgps_;
}
inline ::gboss::GpsBaseInfo* TravelInfo::mutable_startgps() {
  set_has_startgps();
  if (startgps_ == NULL) startgps_ = new ::gboss::GpsBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.TravelInfo.startGps)
  return startgps_;
}
inline ::gboss::GpsBaseInfo* TravelInfo::release_startgps() {
  clear_has_startgps();
  ::gboss::GpsBaseInfo* temp = startgps_;
  startgps_ = NULL;
  return temp;
}
inline void TravelInfo::set_allocated_startgps(::gboss::GpsBaseInfo* startgps) {
  delete startgps_;
  startgps_ = startgps;
  if (startgps) {
    set_has_startgps();
  } else {
    clear_has_startgps();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.TravelInfo.startGps)
}

// optional .gboss.GpsReferPosition startReferPos = 23;
inline bool TravelInfo::has_startreferpos() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void TravelInfo::set_has_startreferpos() {
  _has_bits_[0] |= 0x00400000u;
}
inline void TravelInfo::clear_has_startreferpos() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void TravelInfo::clear_startreferpos() {
  if (startreferpos_ != NULL) startreferpos_->::gboss::GpsReferPosition::Clear();
  clear_has_startreferpos();
}
inline const ::gboss::GpsReferPosition& TravelInfo::startreferpos() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.startReferPos)
  return startreferpos_ != NULL ? *startreferpos_ : *default_instance_->startreferpos_;
}
inline ::gboss::GpsReferPosition* TravelInfo::mutable_startreferpos() {
  set_has_startreferpos();
  if (startreferpos_ == NULL) startreferpos_ = new ::gboss::GpsReferPosition;
  // @@protoc_insertion_point(field_mutable:gboss.TravelInfo.startReferPos)
  return startreferpos_;
}
inline ::gboss::GpsReferPosition* TravelInfo::release_startreferpos() {
  clear_has_startreferpos();
  ::gboss::GpsReferPosition* temp = startreferpos_;
  startreferpos_ = NULL;
  return temp;
}
inline void TravelInfo::set_allocated_startreferpos(::gboss::GpsReferPosition* startreferpos) {
  delete startreferpos_;
  startreferpos_ = startreferpos;
  if (startreferpos) {
    set_has_startreferpos();
  } else {
    clear_has_startreferpos();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.TravelInfo.startReferPos)
}

// optional .gboss.GpsBaseInfo endGps = 24;
inline bool TravelInfo::has_endgps() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void TravelInfo::set_has_endgps() {
  _has_bits_[0] |= 0x00800000u;
}
inline void TravelInfo::clear_has_endgps() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void TravelInfo::clear_endgps() {
  if (endgps_ != NULL) endgps_->::gboss::GpsBaseInfo::Clear();
  clear_has_endgps();
}
inline const ::gboss::GpsBaseInfo& TravelInfo::endgps() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.endGps)
  return endgps_ != NULL ? *endgps_ : *default_instance_->endgps_;
}
inline ::gboss::GpsBaseInfo* TravelInfo::mutable_endgps() {
  set_has_endgps();
  if (endgps_ == NULL) endgps_ = new ::gboss::GpsBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.TravelInfo.endGps)
  return endgps_;
}
inline ::gboss::GpsBaseInfo* TravelInfo::release_endgps() {
  clear_has_endgps();
  ::gboss::GpsBaseInfo* temp = endgps_;
  endgps_ = NULL;
  return temp;
}
inline void TravelInfo::set_allocated_endgps(::gboss::GpsBaseInfo* endgps) {
  delete endgps_;
  endgps_ = endgps;
  if (endgps) {
    set_has_endgps();
  } else {
    clear_has_endgps();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.TravelInfo.endGps)
}

// optional .gboss.GpsReferPosition endReferPos = 25;
inline bool TravelInfo::has_endreferpos() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void TravelInfo::set_has_endreferpos() {
  _has_bits_[0] |= 0x01000000u;
}
inline void TravelInfo::clear_has_endreferpos() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void TravelInfo::clear_endreferpos() {
  if (endreferpos_ != NULL) endreferpos_->::gboss::GpsReferPosition::Clear();
  clear_has_endreferpos();
}
inline const ::gboss::GpsReferPosition& TravelInfo::endreferpos() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.endReferPos)
  return endreferpos_ != NULL ? *endreferpos_ : *default_instance_->endreferpos_;
}
inline ::gboss::GpsReferPosition* TravelInfo::mutable_endreferpos() {
  set_has_endreferpos();
  if (endreferpos_ == NULL) endreferpos_ = new ::gboss::GpsReferPosition;
  // @@protoc_insertion_point(field_mutable:gboss.TravelInfo.endReferPos)
  return endreferpos_;
}
inline ::gboss::GpsReferPosition* TravelInfo::release_endreferpos() {
  clear_has_endreferpos();
  ::gboss::GpsReferPosition* temp = endreferpos_;
  endreferpos_ = NULL;
  return temp;
}
inline void TravelInfo::set_allocated_endreferpos(::gboss::GpsReferPosition* endreferpos) {
  delete endreferpos_;
  endreferpos_ = endreferpos;
  if (endreferpos) {
    set_has_endreferpos();
  } else {
    clear_has_endreferpos();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.TravelInfo.endReferPos)
}

// optional int32 history = 26;
inline bool TravelInfo::has_history() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void TravelInfo::set_has_history() {
  _has_bits_[0] |= 0x02000000u;
}
inline void TravelInfo::clear_has_history() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void TravelInfo::clear_history() {
  history_ = 0;
  clear_has_history();
}
inline ::google_public::protobuf::int32 TravelInfo::history() const {
  // @@protoc_insertion_point(field_get:gboss.TravelInfo.history)
  return history_;
}
inline void TravelInfo::set_history(::google_public::protobuf::int32 value) {
  set_has_history();
  history_ = value;
  // @@protoc_insertion_point(field_set:gboss.TravelInfo.history)
}

// -------------------------------------------------------------------

// FaultDefine

// optional int32 faultType = 1;
inline bool FaultDefine::has_faulttype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaultDefine::set_has_faulttype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaultDefine::clear_has_faulttype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaultDefine::clear_faulttype() {
  faulttype_ = 0;
  clear_has_faulttype();
}
inline ::google_public::protobuf::int32 FaultDefine::faulttype() const {
  // @@protoc_insertion_point(field_get:gboss.FaultDefine.faultType)
  return faulttype_;
}
inline void FaultDefine::set_faulttype(::google_public::protobuf::int32 value) {
  set_has_faulttype();
  faulttype_ = value;
  // @@protoc_insertion_point(field_set:gboss.FaultDefine.faultType)
}

// repeated string faultCode = 2;
inline int FaultDefine::faultcode_size() const {
  return faultcode_.size();
}
inline void FaultDefine::clear_faultcode() {
  faultcode_.Clear();
}
inline const ::std::string& FaultDefine::faultcode(int index) const {
  // @@protoc_insertion_point(field_get:gboss.FaultDefine.faultCode)
  return faultcode_.Get(index);
}
inline ::std::string* FaultDefine::mutable_faultcode(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.FaultDefine.faultCode)
  return faultcode_.Mutable(index);
}
inline void FaultDefine::set_faultcode(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.FaultDefine.faultCode)
  faultcode_.Mutable(index)->assign(value);
}
inline void FaultDefine::set_faultcode(int index, const char* value) {
  faultcode_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.FaultDefine.faultCode)
}
inline void FaultDefine::set_faultcode(int index, const char* value, size_t size) {
  faultcode_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.FaultDefine.faultCode)
}
inline ::std::string* FaultDefine::add_faultcode() {
  return faultcode_.Add();
}
inline void FaultDefine::add_faultcode(const ::std::string& value) {
  faultcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.FaultDefine.faultCode)
}
inline void FaultDefine::add_faultcode(const char* value) {
  faultcode_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.FaultDefine.faultCode)
}
inline void FaultDefine::add_faultcode(const char* value, size_t size) {
  faultcode_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.FaultDefine.faultCode)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
FaultDefine::faultcode() const {
  // @@protoc_insertion_point(field_list:gboss.FaultDefine.faultCode)
  return faultcode_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
FaultDefine::mutable_faultcode() {
  // @@protoc_insertion_point(field_mutable_list:gboss.FaultDefine.faultCode)
  return &faultcode_;
}

// -------------------------------------------------------------------

// FaultInfo

// required string callLetter = 1;
inline bool FaultInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FaultInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FaultInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FaultInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& FaultInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.FaultInfo.callLetter)
  return *callletter_;
}
inline void FaultInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.FaultInfo.callLetter)
}
inline void FaultInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.FaultInfo.callLetter)
}
inline void FaultInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.FaultInfo.callLetter)
}
inline ::std::string* FaultInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.FaultInfo.callLetter)
  return callletter_;
}
inline ::std::string* FaultInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void FaultInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.FaultInfo.callLetter)
}

// required int64 faultTime = 2;
inline bool FaultInfo::has_faulttime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FaultInfo::set_has_faulttime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FaultInfo::clear_has_faulttime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FaultInfo::clear_faulttime() {
  faulttime_ = GOOGLE_LONGLONG(0);
  clear_has_faulttime();
}
inline ::google_public::protobuf::int64 FaultInfo::faulttime() const {
  // @@protoc_insertion_point(field_get:gboss.FaultInfo.faultTime)
  return faulttime_;
}
inline void FaultInfo::set_faulttime(::google_public::protobuf::int64 value) {
  set_has_faulttime();
  faulttime_ = value;
  // @@protoc_insertion_point(field_set:gboss.FaultInfo.faultTime)
}

// repeated .gboss.FaultDefine faults = 3;
inline int FaultInfo::faults_size() const {
  return faults_.size();
}
inline void FaultInfo::clear_faults() {
  faults_.Clear();
}
inline const ::gboss::FaultDefine& FaultInfo::faults(int index) const {
  // @@protoc_insertion_point(field_get:gboss.FaultInfo.faults)
  return faults_.Get(index);
}
inline ::gboss::FaultDefine* FaultInfo::mutable_faults(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.FaultInfo.faults)
  return faults_.Mutable(index);
}
inline ::gboss::FaultDefine* FaultInfo::add_faults() {
  // @@protoc_insertion_point(field_add:gboss.FaultInfo.faults)
  return faults_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultDefine >&
FaultInfo::faults() const {
  // @@protoc_insertion_point(field_list:gboss.FaultInfo.faults)
  return faults_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultDefine >*
FaultInfo::mutable_faults() {
  // @@protoc_insertion_point(field_mutable_list:gboss.FaultInfo.faults)
  return &faults_;
}

// optional int32 unitType = 4;
inline bool FaultInfo::has_unittype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FaultInfo::set_has_unittype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FaultInfo::clear_has_unittype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FaultInfo::clear_unittype() {
  unittype_ = 0;
  clear_has_unittype();
}
inline ::google_public::protobuf::int32 FaultInfo::unittype() const {
  // @@protoc_insertion_point(field_get:gboss.FaultInfo.unitType)
  return unittype_;
}
inline void FaultInfo::set_unittype(::google_public::protobuf::int32 value) {
  set_has_unittype();
  unittype_ = value;
  // @@protoc_insertion_point(field_set:gboss.FaultInfo.unitType)
}

// optional int32 history = 5;
inline bool FaultInfo::has_history() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FaultInfo::set_has_history() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FaultInfo::clear_has_history() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FaultInfo::clear_history() {
  history_ = 0;
  clear_has_history();
}
inline ::google_public::protobuf::int32 FaultInfo::history() const {
  // @@protoc_insertion_point(field_get:gboss.FaultInfo.history)
  return history_;
}
inline void FaultInfo::set_history(::google_public::protobuf::int32 value) {
  set_has_history();
  history_ = value;
  // @@protoc_insertion_point(field_set:gboss.FaultInfo.history)
}

// -------------------------------------------------------------------

// AppNoticeInfo

// required string callLetter = 1;
inline bool AppNoticeInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AppNoticeInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AppNoticeInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AppNoticeInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& AppNoticeInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.callLetter)
  return *callletter_;
}
inline void AppNoticeInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.callLetter)
}
inline void AppNoticeInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AppNoticeInfo.callLetter)
}
inline void AppNoticeInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AppNoticeInfo.callLetter)
}
inline ::std::string* AppNoticeInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AppNoticeInfo.callLetter)
  return callletter_;
}
inline ::std::string* AppNoticeInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppNoticeInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AppNoticeInfo.callLetter)
}

// required string title = 2;
inline bool AppNoticeInfo::has_title() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AppNoticeInfo::set_has_title() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AppNoticeInfo::clear_has_title() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AppNoticeInfo::clear_title() {
  if (title_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& AppNoticeInfo::title() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.title)
  return *title_;
}
inline void AppNoticeInfo::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.title)
}
inline void AppNoticeInfo::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AppNoticeInfo.title)
}
inline void AppNoticeInfo::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AppNoticeInfo.title)
}
inline ::std::string* AppNoticeInfo::mutable_title() {
  set_has_title();
  if (title_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    title_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AppNoticeInfo.title)
  return title_;
}
inline ::std::string* AppNoticeInfo::release_title() {
  clear_has_title();
  if (title_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppNoticeInfo::set_allocated_title(::std::string* title) {
  if (title_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AppNoticeInfo.title)
}

// required string content = 3;
inline bool AppNoticeInfo::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AppNoticeInfo::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AppNoticeInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AppNoticeInfo::clear_content() {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& AppNoticeInfo::content() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.content)
  return *content_;
}
inline void AppNoticeInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.content)
}
inline void AppNoticeInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AppNoticeInfo.content)
}
inline void AppNoticeInfo::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AppNoticeInfo.content)
}
inline ::std::string* AppNoticeInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AppNoticeInfo.content)
  return content_;
}
inline ::std::string* AppNoticeInfo::release_content() {
  clear_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppNoticeInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AppNoticeInfo.content)
}

// optional .gboss.GpsBaseInfo baseInfo = 4;
inline bool AppNoticeInfo::has_baseinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AppNoticeInfo::set_has_baseinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AppNoticeInfo::clear_has_baseinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AppNoticeInfo::clear_baseinfo() {
  if (baseinfo_ != NULL) baseinfo_->::gboss::GpsBaseInfo::Clear();
  clear_has_baseinfo();
}
inline const ::gboss::GpsBaseInfo& AppNoticeInfo::baseinfo() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.baseInfo)
  return baseinfo_ != NULL ? *baseinfo_ : *default_instance_->baseinfo_;
}
inline ::gboss::GpsBaseInfo* AppNoticeInfo::mutable_baseinfo() {
  set_has_baseinfo();
  if (baseinfo_ == NULL) baseinfo_ = new ::gboss::GpsBaseInfo;
  // @@protoc_insertion_point(field_mutable:gboss.AppNoticeInfo.baseInfo)
  return baseinfo_;
}
inline ::gboss::GpsBaseInfo* AppNoticeInfo::release_baseinfo() {
  clear_has_baseinfo();
  ::gboss::GpsBaseInfo* temp = baseinfo_;
  baseinfo_ = NULL;
  return temp;
}
inline void AppNoticeInfo::set_allocated_baseinfo(::gboss::GpsBaseInfo* baseinfo) {
  delete baseinfo_;
  baseinfo_ = baseinfo;
  if (baseinfo) {
    set_has_baseinfo();
  } else {
    clear_has_baseinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AppNoticeInfo.baseInfo)
}

// optional .gboss.GpsReferPosition referPosition = 5;
inline bool AppNoticeInfo::has_referposition() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void AppNoticeInfo::set_has_referposition() {
  _has_bits_[0] |= 0x00000010u;
}
inline void AppNoticeInfo::clear_has_referposition() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void AppNoticeInfo::clear_referposition() {
  if (referposition_ != NULL) referposition_->::gboss::GpsReferPosition::Clear();
  clear_has_referposition();
}
inline const ::gboss::GpsReferPosition& AppNoticeInfo::referposition() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.referPosition)
  return referposition_ != NULL ? *referposition_ : *default_instance_->referposition_;
}
inline ::gboss::GpsReferPosition* AppNoticeInfo::mutable_referposition() {
  set_has_referposition();
  if (referposition_ == NULL) referposition_ = new ::gboss::GpsReferPosition;
  // @@protoc_insertion_point(field_mutable:gboss.AppNoticeInfo.referPosition)
  return referposition_;
}
inline ::gboss::GpsReferPosition* AppNoticeInfo::release_referposition() {
  clear_has_referposition();
  ::gboss::GpsReferPosition* temp = referposition_;
  referposition_ = NULL;
  return temp;
}
inline void AppNoticeInfo::set_allocated_referposition(::gboss::GpsReferPosition* referposition) {
  delete referposition_;
  referposition_ = referposition;
  if (referposition) {
    set_has_referposition();
  } else {
    clear_has_referposition();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AppNoticeInfo.referPosition)
}

// optional int32 cmdId = 6;
inline bool AppNoticeInfo::has_cmdid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void AppNoticeInfo::set_has_cmdid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void AppNoticeInfo::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void AppNoticeInfo::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google_public::protobuf::int32 AppNoticeInfo::cmdid() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.cmdId)
  return cmdid_;
}
inline void AppNoticeInfo::set_cmdid(::google_public::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.cmdId)
}

// optional int32 cmdretcode = 7;
inline bool AppNoticeInfo::has_cmdretcode() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void AppNoticeInfo::set_has_cmdretcode() {
  _has_bits_[0] |= 0x00000040u;
}
inline void AppNoticeInfo::clear_has_cmdretcode() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void AppNoticeInfo::clear_cmdretcode() {
  cmdretcode_ = 0;
  clear_has_cmdretcode();
}
inline ::google_public::protobuf::int32 AppNoticeInfo::cmdretcode() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.cmdretcode)
  return cmdretcode_;
}
inline void AppNoticeInfo::set_cmdretcode(::google_public::protobuf::int32 value) {
  set_has_cmdretcode();
  cmdretcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.cmdretcode)
}

// optional string cmdretmsg = 8;
inline bool AppNoticeInfo::has_cmdretmsg() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void AppNoticeInfo::set_has_cmdretmsg() {
  _has_bits_[0] |= 0x00000080u;
}
inline void AppNoticeInfo::clear_has_cmdretmsg() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void AppNoticeInfo::clear_cmdretmsg() {
  if (cmdretmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdretmsg_->clear();
  }
  clear_has_cmdretmsg();
}
inline const ::std::string& AppNoticeInfo::cmdretmsg() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.cmdretmsg)
  return *cmdretmsg_;
}
inline void AppNoticeInfo::set_cmdretmsg(const ::std::string& value) {
  set_has_cmdretmsg();
  if (cmdretmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdretmsg_ = new ::std::string;
  }
  cmdretmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.cmdretmsg)
}
inline void AppNoticeInfo::set_cmdretmsg(const char* value) {
  set_has_cmdretmsg();
  if (cmdretmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdretmsg_ = new ::std::string;
  }
  cmdretmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AppNoticeInfo.cmdretmsg)
}
inline void AppNoticeInfo::set_cmdretmsg(const char* value, size_t size) {
  set_has_cmdretmsg();
  if (cmdretmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdretmsg_ = new ::std::string;
  }
  cmdretmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AppNoticeInfo.cmdretmsg)
}
inline ::std::string* AppNoticeInfo::mutable_cmdretmsg() {
  set_has_cmdretmsg();
  if (cmdretmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdretmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AppNoticeInfo.cmdretmsg)
  return cmdretmsg_;
}
inline ::std::string* AppNoticeInfo::release_cmdretmsg() {
  clear_has_cmdretmsg();
  if (cmdretmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmdretmsg_;
    cmdretmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppNoticeInfo::set_allocated_cmdretmsg(::std::string* cmdretmsg) {
  if (cmdretmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdretmsg_;
  }
  if (cmdretmsg) {
    set_has_cmdretmsg();
    cmdretmsg_ = cmdretmsg;
  } else {
    clear_has_cmdretmsg();
    cmdretmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AppNoticeInfo.cmdretmsg)
}

// optional int32 noticetype = 9;
inline bool AppNoticeInfo::has_noticetype() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void AppNoticeInfo::set_has_noticetype() {
  _has_bits_[0] |= 0x00000100u;
}
inline void AppNoticeInfo::clear_has_noticetype() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void AppNoticeInfo::clear_noticetype() {
  noticetype_ = 0;
  clear_has_noticetype();
}
inline ::google_public::protobuf::int32 AppNoticeInfo::noticetype() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.noticetype)
  return noticetype_;
}
inline void AppNoticeInfo::set_noticetype(::google_public::protobuf::int32 value) {
  set_has_noticetype();
  noticetype_ = value;
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.noticetype)
}

// optional int32 alarmstatus = 10;
inline bool AppNoticeInfo::has_alarmstatus() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void AppNoticeInfo::set_has_alarmstatus() {
  _has_bits_[0] |= 0x00000200u;
}
inline void AppNoticeInfo::clear_has_alarmstatus() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void AppNoticeInfo::clear_alarmstatus() {
  alarmstatus_ = 0;
  clear_has_alarmstatus();
}
inline ::google_public::protobuf::int32 AppNoticeInfo::alarmstatus() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.alarmstatus)
  return alarmstatus_;
}
inline void AppNoticeInfo::set_alarmstatus(::google_public::protobuf::int32 value) {
  set_has_alarmstatus();
  alarmstatus_ = value;
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.alarmstatus)
}

// optional string cmdsn = 11;
inline bool AppNoticeInfo::has_cmdsn() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void AppNoticeInfo::set_has_cmdsn() {
  _has_bits_[0] |= 0x00000400u;
}
inline void AppNoticeInfo::clear_has_cmdsn() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void AppNoticeInfo::clear_cmdsn() {
  if (cmdsn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdsn_->clear();
  }
  clear_has_cmdsn();
}
inline const ::std::string& AppNoticeInfo::cmdsn() const {
  // @@protoc_insertion_point(field_get:gboss.AppNoticeInfo.cmdsn)
  return *cmdsn_;
}
inline void AppNoticeInfo::set_cmdsn(const ::std::string& value) {
  set_has_cmdsn();
  if (cmdsn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdsn_ = new ::std::string;
  }
  cmdsn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AppNoticeInfo.cmdsn)
}
inline void AppNoticeInfo::set_cmdsn(const char* value) {
  set_has_cmdsn();
  if (cmdsn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdsn_ = new ::std::string;
  }
  cmdsn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AppNoticeInfo.cmdsn)
}
inline void AppNoticeInfo::set_cmdsn(const char* value, size_t size) {
  set_has_cmdsn();
  if (cmdsn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdsn_ = new ::std::string;
  }
  cmdsn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AppNoticeInfo.cmdsn)
}
inline ::std::string* AppNoticeInfo::mutable_cmdsn() {
  set_has_cmdsn();
  if (cmdsn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    cmdsn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AppNoticeInfo.cmdsn)
  return cmdsn_;
}
inline ::std::string* AppNoticeInfo::release_cmdsn() {
  clear_has_cmdsn();
  if (cmdsn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = cmdsn_;
    cmdsn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AppNoticeInfo::set_allocated_cmdsn(::std::string* cmdsn) {
  if (cmdsn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdsn_;
  }
  if (cmdsn) {
    set_has_cmdsn();
    cmdsn_ = cmdsn;
  } else {
    clear_has_cmdsn();
    cmdsn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AppNoticeInfo.cmdsn)
}

// -------------------------------------------------------------------

// ECUConfig

// required string callLetter = 1;
inline bool ECUConfig::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ECUConfig::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ECUConfig::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ECUConfig::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& ECUConfig::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.callLetter)
  return *callletter_;
}
inline void ECUConfig::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.callLetter)
}
inline void ECUConfig::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.ECUConfig.callLetter)
}
inline void ECUConfig::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.ECUConfig.callLetter)
}
inline ::std::string* ECUConfig::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.ECUConfig.callLetter)
  return callletter_;
}
inline ::std::string* ECUConfig::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ECUConfig::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.ECUConfig.callLetter)
}

// required int64 updateTime = 2;
inline bool ECUConfig::has_updatetime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ECUConfig::set_has_updatetime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ECUConfig::clear_has_updatetime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ECUConfig::clear_updatetime() {
  updatetime_ = GOOGLE_LONGLONG(0);
  clear_has_updatetime();
}
inline ::google_public::protobuf::int64 ECUConfig::updatetime() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.updateTime)
  return updatetime_;
}
inline void ECUConfig::set_updatetime(::google_public::protobuf::int64 value) {
  set_has_updatetime();
  updatetime_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.updateTime)
}

// optional int32 abs = 3;
inline bool ECUConfig::has_abs() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ECUConfig::set_has_abs() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ECUConfig::clear_has_abs() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ECUConfig::clear_abs() {
  abs_ = 0;
  clear_has_abs();
}
inline ::google_public::protobuf::int32 ECUConfig::abs() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.abs)
  return abs_;
}
inline void ECUConfig::set_abs(::google_public::protobuf::int32 value) {
  set_has_abs();
  abs_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.abs)
}

// optional int32 esp = 4;
inline bool ECUConfig::has_esp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ECUConfig::set_has_esp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ECUConfig::clear_has_esp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ECUConfig::clear_esp() {
  esp_ = 0;
  clear_has_esp();
}
inline ::google_public::protobuf::int32 ECUConfig::esp() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.esp)
  return esp_;
}
inline void ECUConfig::set_esp(::google_public::protobuf::int32 value) {
  set_has_esp();
  esp_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.esp)
}

// optional int32 srs = 5;
inline bool ECUConfig::has_srs() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ECUConfig::set_has_srs() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ECUConfig::clear_has_srs() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ECUConfig::clear_srs() {
  srs_ = 0;
  clear_has_srs();
}
inline ::google_public::protobuf::int32 ECUConfig::srs() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.srs)
  return srs_;
}
inline void ECUConfig::set_srs(::google_public::protobuf::int32 value) {
  set_has_srs();
  srs_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.srs)
}

// optional int32 ems = 6;
inline bool ECUConfig::has_ems() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ECUConfig::set_has_ems() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ECUConfig::clear_has_ems() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ECUConfig::clear_ems() {
  ems_ = 0;
  clear_has_ems();
}
inline ::google_public::protobuf::int32 ECUConfig::ems() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.ems)
  return ems_;
}
inline void ECUConfig::set_ems(::google_public::protobuf::int32 value) {
  set_has_ems();
  ems_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.ems)
}

// optional int32 immo = 7;
inline bool ECUConfig::has_immo() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void ECUConfig::set_has_immo() {
  _has_bits_[0] |= 0x00000040u;
}
inline void ECUConfig::clear_has_immo() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void ECUConfig::clear_immo() {
  immo_ = 0;
  clear_has_immo();
}
inline ::google_public::protobuf::int32 ECUConfig::immo() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.immo)
  return immo_;
}
inline void ECUConfig::set_immo(::google_public::protobuf::int32 value) {
  set_has_immo();
  immo_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.immo)
}

// optional int32 peps = 8;
inline bool ECUConfig::has_peps() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void ECUConfig::set_has_peps() {
  _has_bits_[0] |= 0x00000080u;
}
inline void ECUConfig::clear_has_peps() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void ECUConfig::clear_peps() {
  peps_ = 0;
  clear_has_peps();
}
inline ::google_public::protobuf::int32 ECUConfig::peps() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.peps)
  return peps_;
}
inline void ECUConfig::set_peps(::google_public::protobuf::int32 value) {
  set_has_peps();
  peps_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.peps)
}

// optional int32 bcm = 9;
inline bool ECUConfig::has_bcm() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void ECUConfig::set_has_bcm() {
  _has_bits_[0] |= 0x00000100u;
}
inline void ECUConfig::clear_has_bcm() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void ECUConfig::clear_bcm() {
  bcm_ = 0;
  clear_has_bcm();
}
inline ::google_public::protobuf::int32 ECUConfig::bcm() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.bcm)
  return bcm_;
}
inline void ECUConfig::set_bcm(::google_public::protobuf::int32 value) {
  set_has_bcm();
  bcm_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.bcm)
}

// optional int32 tcu = 10;
inline bool ECUConfig::has_tcu() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void ECUConfig::set_has_tcu() {
  _has_bits_[0] |= 0x00000200u;
}
inline void ECUConfig::clear_has_tcu() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void ECUConfig::clear_tcu() {
  tcu_ = 0;
  clear_has_tcu();
}
inline ::google_public::protobuf::int32 ECUConfig::tcu() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.tcu)
  return tcu_;
}
inline void ECUConfig::set_tcu(::google_public::protobuf::int32 value) {
  set_has_tcu();
  tcu_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.tcu)
}

// optional int32 tpms = 11;
inline bool ECUConfig::has_tpms() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void ECUConfig::set_has_tpms() {
  _has_bits_[0] |= 0x00000400u;
}
inline void ECUConfig::clear_has_tpms() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void ECUConfig::clear_tpms() {
  tpms_ = 0;
  clear_has_tpms();
}
inline ::google_public::protobuf::int32 ECUConfig::tpms() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.tpms)
  return tpms_;
}
inline void ECUConfig::set_tpms(::google_public::protobuf::int32 value) {
  set_has_tpms();
  tpms_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.tpms)
}

// optional int32 apm = 12;
inline bool ECUConfig::has_apm() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void ECUConfig::set_has_apm() {
  _has_bits_[0] |= 0x00000800u;
}
inline void ECUConfig::clear_has_apm() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void ECUConfig::clear_apm() {
  apm_ = 0;
  clear_has_apm();
}
inline ::google_public::protobuf::int32 ECUConfig::apm() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.apm)
  return apm_;
}
inline void ECUConfig::set_apm(::google_public::protobuf::int32 value) {
  set_has_apm();
  apm_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.apm)
}

// optional int32 icm = 13;
inline bool ECUConfig::has_icm() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void ECUConfig::set_has_icm() {
  _has_bits_[0] |= 0x00001000u;
}
inline void ECUConfig::clear_has_icm() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void ECUConfig::clear_icm() {
  icm_ = 0;
  clear_has_icm();
}
inline ::google_public::protobuf::int32 ECUConfig::icm() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.icm)
  return icm_;
}
inline void ECUConfig::set_icm(::google_public::protobuf::int32 value) {
  set_has_icm();
  icm_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.icm)
}

// optional int32 eps = 14;
inline bool ECUConfig::has_eps() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void ECUConfig::set_has_eps() {
  _has_bits_[0] |= 0x00002000u;
}
inline void ECUConfig::clear_has_eps() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void ECUConfig::clear_eps() {
  eps_ = 0;
  clear_has_eps();
}
inline ::google_public::protobuf::int32 ECUConfig::eps() const {
  // @@protoc_insertion_point(field_get:gboss.ECUConfig.eps)
  return eps_;
}
inline void ECUConfig::set_eps(::google_public::protobuf::int32 value) {
  set_has_eps();
  eps_ = value;
  // @@protoc_insertion_point(field_set:gboss.ECUConfig.eps)
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gboss

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_GBoss_2eproto__INCLUDED
