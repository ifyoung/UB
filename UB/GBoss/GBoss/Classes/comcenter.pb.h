// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comcenter.proto

#ifndef PROTOBUF_comcenter_2eproto__INCLUDED
#define PROTOBUF_comcenter_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2006000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "GBoss.pb.h"
// @@protoc_insertion_point(includes)

namespace gboss {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_comcenter_2eproto();
void protobuf_AssignDesc_comcenter_2eproto();
void protobuf_ShutdownFile_comcenter_2eproto();

class ComCenterMessage;
class ComCenterMessage_ComCenterBaseMessage;
class Login;
class Login_ACK;
class AddMonitor;
class AddMonitor_ACK;
class RemoveMonitor;
class RemoveMonitor_ACK;
class DeliverUnitLoginOut;
class GetLastInfo;
class GetLastInfo_ACK;
class GetHistoryInfo;
class GetHistoryInfoNextPage;
class GetHistoryInfo_ACK;
class GetHistorySimpleGpsInfo_ACK;
class StopHistoryInfo;
class StopHistoryInfo_ACK;
class SendCommand;
class SendCommandSend_ACK;
class SendCommand_ACK;
class DeliverGPS;
class DeliverAlarm;
class DeliverOperateData;
class DeliverSMS;
class DeliverTravel;
class DeliverFault;
class DeliverOBD;
class DeliverAppNotice;
class DeliverUnitVersion;
class DeliverECUConfig;
class TestDeliver;

// ===================================================================

class ComCenterMessage_ComCenterBaseMessage : public ::google_public::protobuf::Message {
 public:
  ComCenterMessage_ComCenterBaseMessage();
  virtual ~ComCenterMessage_ComCenterBaseMessage();

  ComCenterMessage_ComCenterBaseMessage(const ComCenterMessage_ComCenterBaseMessage& from);

  inline ComCenterMessage_ComCenterBaseMessage& operator=(const ComCenterMessage_ComCenterBaseMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ComCenterMessage_ComCenterBaseMessage& default_instance();

  void Swap(ComCenterMessage_ComCenterBaseMessage* other);

  // implements Message ----------------------------------------------

  ComCenterMessage_ComCenterBaseMessage* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ComCenterMessage_ComCenterBaseMessage& from);
  void MergeFrom(const ComCenterMessage_ComCenterBaseMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google_public::protobuf::int32 id() const;
  inline void set_id(::google_public::protobuf::int32 value);

  // optional bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:gboss.ComCenterMessage.ComCenterBaseMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* content_;
  ::google_public::protobuf::int32 id_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static ComCenterMessage_ComCenterBaseMessage* default_instance_;
};
// -------------------------------------------------------------------

class ComCenterMessage : public ::google_public::protobuf::Message {
 public:
  ComCenterMessage();
  virtual ~ComCenterMessage();

  ComCenterMessage(const ComCenterMessage& from);

  inline ComCenterMessage& operator=(const ComCenterMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const ComCenterMessage& default_instance();

  void Swap(ComCenterMessage* other);

  // implements Message ----------------------------------------------

  ComCenterMessage* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const ComCenterMessage& from);
  void MergeFrom(const ComCenterMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  typedef ComCenterMessage_ComCenterBaseMessage ComCenterBaseMessage;

  // accessors -------------------------------------------------------

  // repeated .gboss.ComCenterMessage.ComCenterBaseMessage messages = 1;
  inline int messages_size() const;
  inline void clear_messages();
  static const int kMessagesFieldNumber = 1;
  inline const ::gboss::ComCenterMessage_ComCenterBaseMessage& messages(int index) const;
  inline ::gboss::ComCenterMessage_ComCenterBaseMessage* mutable_messages(int index);
  inline ::gboss::ComCenterMessage_ComCenterBaseMessage* add_messages();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::ComCenterMessage_ComCenterBaseMessage >&
      messages() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::ComCenterMessage_ComCenterBaseMessage >*
      mutable_messages();

  // @@protoc_insertion_point(class_scope:gboss.ComCenterMessage)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::ComCenterMessage_ComCenterBaseMessage > messages_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static ComCenterMessage* default_instance_;
};
// -------------------------------------------------------------------

class Login : public ::google_public::protobuf::Message {
 public:
  Login();
  virtual ~Login();

  Login(const Login& from);

  inline Login& operator=(const Login& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const Login& default_instance();

  void Swap(Login* other);

  // implements Message ----------------------------------------------

  Login* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const Login& from);
  void MergeFrom(const Login& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string username = 1;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 1;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // required string password = 2;
  inline bool has_password() const;
  inline void clear_password();
  static const int kPasswordFieldNumber = 2;
  inline const ::std::string& password() const;
  inline void set_password(const ::std::string& value);
  inline void set_password(const char* value);
  inline void set_password(const char* value, size_t size);
  inline ::std::string* mutable_password();
  inline ::std::string* release_password();
  inline void set_allocated_password(::std::string* password);

  // repeated string callLetters = 3;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 3;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // optional string seatid = 4;
  inline bool has_seatid() const;
  inline void clear_seatid();
  static const int kSeatidFieldNumber = 4;
  inline const ::std::string& seatid() const;
  inline void set_seatid(const ::std::string& value);
  inline void set_seatid(const char* value);
  inline void set_seatid(const char* value, size_t size);
  inline ::std::string* mutable_seatid();
  inline ::std::string* release_seatid();
  inline void set_allocated_seatid(::std::string* seatid);

  // optional string usertype = 5;
  inline bool has_usertype() const;
  inline void clear_usertype();
  static const int kUsertypeFieldNumber = 5;
  inline const ::std::string& usertype() const;
  inline void set_usertype(const ::std::string& value);
  inline void set_usertype(const char* value);
  inline void set_usertype(const char* value, size_t size);
  inline ::std::string* mutable_usertype();
  inline ::std::string* release_usertype();
  inline void set_allocated_usertype(::std::string* usertype);

  // optional string userversion = 6;
  inline bool has_userversion() const;
  inline void clear_userversion();
  static const int kUserversionFieldNumber = 6;
  inline const ::std::string& userversion() const;
  inline void set_userversion(const ::std::string& value);
  inline void set_userversion(const char* value);
  inline void set_userversion(const char* value, size_t size);
  inline ::std::string* mutable_userversion();
  inline ::std::string* release_userversion();
  inline void set_allocated_userversion(::std::string* userversion);

  // @@protoc_insertion_point(class_scope:gboss.Login)
 private:
  inline void set_has_username();
  inline void clear_has_username();
  inline void set_has_password();
  inline void clear_has_password();
  inline void set_has_seatid();
  inline void clear_has_seatid();
  inline void set_has_usertype();
  inline void clear_has_usertype();
  inline void set_has_userversion();
  inline void clear_has_userversion();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* username_;
  ::std::string* password_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::std::string* seatid_;
  ::std::string* usertype_;
  ::std::string* userversion_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static Login* default_instance_;
};
// -------------------------------------------------------------------

class Login_ACK : public ::google_public::protobuf::Message {
 public:
  Login_ACK();
  virtual ~Login_ACK();

  Login_ACK(const Login_ACK& from);

  inline Login_ACK& operator=(const Login_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const Login_ACK& default_instance();

  void Swap(Login_ACK* other);

  // implements Message ----------------------------------------------

  Login_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const Login_ACK& from);
  void MergeFrom(const Login_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 2;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 2;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // optional string username = 3;
  inline bool has_username() const;
  inline void clear_username();
  static const int kUsernameFieldNumber = 3;
  inline const ::std::string& username() const;
  inline void set_username(const ::std::string& value);
  inline void set_username(const char* value);
  inline void set_username(const char* value, size_t size);
  inline ::std::string* mutable_username();
  inline ::std::string* release_username();
  inline void set_allocated_username(::std::string* username);

  // @@protoc_insertion_point(class_scope:gboss.Login_ACK)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();
  inline void set_has_username();
  inline void clear_has_username();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* retmsg_;
  ::std::string* username_;
  ::google_public::protobuf::int32 retcode_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static Login_ACK* default_instance_;
};
// -------------------------------------------------------------------

class AddMonitor : public ::google_public::protobuf::Message {
 public:
  AddMonitor();
  virtual ~AddMonitor();

  AddMonitor(const AddMonitor& from);

  inline AddMonitor& operator=(const AddMonitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const AddMonitor& default_instance();

  void Swap(AddMonitor* other);

  // implements Message ----------------------------------------------

  AddMonitor* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const AddMonitor& from);
  void MergeFrom(const AddMonitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string callLetters = 1;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 1;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // repeated int32 infotypes = 2;
  inline int infotypes_size() const;
  inline void clear_infotypes();
  static const int kInfotypesFieldNumber = 2;
  inline ::google_public::protobuf::int32 infotypes(int index) const;
  inline void set_infotypes(int index, ::google_public::protobuf::int32 value);
  inline void add_infotypes(::google_public::protobuf::int32 value);
  inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
      infotypes() const;
  inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
      mutable_infotypes();

  // optional bool clearold = 3;
  inline bool has_clearold() const;
  inline void clear_clearold();
  static const int kClearoldFieldNumber = 3;
  inline bool clearold() const;
  inline void set_clearold(bool value);

  // @@protoc_insertion_point(class_scope:gboss.AddMonitor)
 private:
  inline void set_has_clearold();
  inline void clear_has_clearold();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 > infotypes_;
  bool clearold_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static AddMonitor* default_instance_;
};
// -------------------------------------------------------------------

class AddMonitor_ACK : public ::google_public::protobuf::Message {
 public:
  AddMonitor_ACK();
  virtual ~AddMonitor_ACK();

  AddMonitor_ACK(const AddMonitor_ACK& from);

  inline AddMonitor_ACK& operator=(const AddMonitor_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const AddMonitor_ACK& default_instance();

  void Swap(AddMonitor_ACK* other);

  // implements Message ----------------------------------------------

  AddMonitor_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const AddMonitor_ACK& from);
  void MergeFrom(const AddMonitor_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 2;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 2;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // repeated string callLetters = 3;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 3;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // @@protoc_insertion_point(class_scope:gboss.AddMonitor_ACK)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* retmsg_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::google_public::protobuf::int32 retcode_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static AddMonitor_ACK* default_instance_;
};
// -------------------------------------------------------------------

class RemoveMonitor : public ::google_public::protobuf::Message {
 public:
  RemoveMonitor();
  virtual ~RemoveMonitor();

  RemoveMonitor(const RemoveMonitor& from);

  inline RemoveMonitor& operator=(const RemoveMonitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const RemoveMonitor& default_instance();

  void Swap(RemoveMonitor* other);

  // implements Message ----------------------------------------------

  RemoveMonitor* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const RemoveMonitor& from);
  void MergeFrom(const RemoveMonitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated string callLetters = 1;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 1;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // repeated int32 infotypes = 2;
  inline int infotypes_size() const;
  inline void clear_infotypes();
  static const int kInfotypesFieldNumber = 2;
  inline ::google_public::protobuf::int32 infotypes(int index) const;
  inline void set_infotypes(int index, ::google_public::protobuf::int32 value);
  inline void add_infotypes(::google_public::protobuf::int32 value);
  inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
      infotypes() const;
  inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
      mutable_infotypes();

  // @@protoc_insertion_point(class_scope:gboss.RemoveMonitor)
 private:

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 > infotypes_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static RemoveMonitor* default_instance_;
};
// -------------------------------------------------------------------

class RemoveMonitor_ACK : public ::google_public::protobuf::Message {
 public:
  RemoveMonitor_ACK();
  virtual ~RemoveMonitor_ACK();

  RemoveMonitor_ACK(const RemoveMonitor_ACK& from);

  inline RemoveMonitor_ACK& operator=(const RemoveMonitor_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const RemoveMonitor_ACK& default_instance();

  void Swap(RemoveMonitor_ACK* other);

  // implements Message ----------------------------------------------

  RemoveMonitor_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const RemoveMonitor_ACK& from);
  void MergeFrom(const RemoveMonitor_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 2;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 2;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // repeated string callLetters = 3;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 3;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // @@protoc_insertion_point(class_scope:gboss.RemoveMonitor_ACK)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* retmsg_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::google_public::protobuf::int32 retcode_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static RemoveMonitor_ACK* default_instance_;
};
// -------------------------------------------------------------------

class DeliverUnitLoginOut : public ::google_public::protobuf::Message {
 public:
  DeliverUnitLoginOut();
  virtual ~DeliverUnitLoginOut();

  DeliverUnitLoginOut(const DeliverUnitLoginOut& from);

  inline DeliverUnitLoginOut& operator=(const DeliverUnitLoginOut& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverUnitLoginOut& default_instance();

  void Swap(DeliverUnitLoginOut* other);

  // implements Message ----------------------------------------------

  DeliverUnitLoginOut* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverUnitLoginOut& from);
  void MergeFrom(const DeliverUnitLoginOut& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 inorout = 2;
  inline bool has_inorout() const;
  inline void clear_inorout();
  static const int kInoroutFieldNumber = 2;
  inline ::google_public::protobuf::int32 inorout() const;
  inline void set_inorout(::google_public::protobuf::int32 value);

  // optional int32 gatewayid = 3;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 4;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 4;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // optional int64 loginTime = 5;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 5;
  inline ::google_public::protobuf::int64 logintime() const;
  inline void set_logintime(::google_public::protobuf::int64 value);

  // optional int64 logoutTime = 6;
  inline bool has_logouttime() const;
  inline void clear_logouttime();
  static const int kLogoutTimeFieldNumber = 6;
  inline ::google_public::protobuf::int64 logouttime() const;
  inline void set_logouttime(::google_public::protobuf::int64 value);

  // optional string unitversion = 7;
  inline bool has_unitversion() const;
  inline void clear_unitversion();
  static const int kUnitversionFieldNumber = 7;
  inline const ::std::string& unitversion() const;
  inline void set_unitversion(const ::std::string& value);
  inline void set_unitversion(const char* value);
  inline void set_unitversion(const char* value, size_t size);
  inline ::std::string* mutable_unitversion();
  inline ::std::string* release_unitversion();
  inline void set_allocated_unitversion(::std::string* unitversion);

  // optional bool upgradegateway = 8;
  inline bool has_upgradegateway() const;
  inline void clear_upgradegateway();
  static const int kUpgradegatewayFieldNumber = 8;
  inline bool upgradegateway() const;
  inline void set_upgradegateway(bool value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverUnitLoginOut)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_inorout();
  inline void clear_has_inorout();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_logouttime();
  inline void clear_has_logouttime();
  inline void set_has_unitversion();
  inline void clear_has_unitversion();
  inline void set_has_upgradegateway();
  inline void clear_has_upgradegateway();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::google_public::protobuf::int32 inorout_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int64 logintime_;
  ::google_public::protobuf::int64 logouttime_;
  ::google_public::protobuf::int32 gatewaytype_;
  bool upgradegateway_;
  ::std::string* unitversion_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverUnitLoginOut* default_instance_;
};
// -------------------------------------------------------------------

class GetLastInfo : public ::google_public::protobuf::Message {
 public:
  GetLastInfo();
  virtual ~GetLastInfo();

  GetLastInfo(const GetLastInfo& from);

  inline GetLastInfo& operator=(const GetLastInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetLastInfo& default_instance();

  void Swap(GetLastInfo* other);

  // implements Message ----------------------------------------------

  GetLastInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetLastInfo& from);
  void MergeFrom(const GetLastInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 infoType = 1;
  inline bool has_infotype() const;
  inline void clear_infotype();
  static const int kInfoTypeFieldNumber = 1;
  inline ::google_public::protobuf::int32 infotype() const;
  inline void set_infotype(::google_public::protobuf::int32 value);

  // repeated string callLetters = 2;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 2;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // optional string sn = 3;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 3;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // @@protoc_insertion_point(class_scope:gboss.GetLastInfo)
 private:
  inline void set_has_infotype();
  inline void clear_has_infotype();
  inline void set_has_sn();
  inline void clear_has_sn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::std::string* sn_;
  ::google_public::protobuf::int32 infotype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static GetLastInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetLastInfo_ACK : public ::google_public::protobuf::Message {
 public:
  GetLastInfo_ACK();
  virtual ~GetLastInfo_ACK();

  GetLastInfo_ACK(const GetLastInfo_ACK& from);

  inline GetLastInfo_ACK& operator=(const GetLastInfo_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetLastInfo_ACK& default_instance();

  void Swap(GetLastInfo_ACK* other);

  // implements Message ----------------------------------------------

  GetLastInfo_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetLastInfo_ACK& from);
  void MergeFrom(const GetLastInfo_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 2;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 2;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // repeated .gboss.GpsInfo gpses = 3;
  inline int gpses_size() const;
  inline void clear_gpses();
  static const int kGpsesFieldNumber = 3;
  inline const ::gboss::GpsInfo& gpses(int index) const;
  inline ::gboss::GpsInfo* mutable_gpses(int index);
  inline ::gboss::GpsInfo* add_gpses();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >&
      gpses() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >*
      mutable_gpses();

  // repeated .gboss.TravelInfo travels = 4;
  inline int travels_size() const;
  inline void clear_travels();
  static const int kTravelsFieldNumber = 4;
  inline const ::gboss::TravelInfo& travels(int index) const;
  inline ::gboss::TravelInfo* mutable_travels(int index);
  inline ::gboss::TravelInfo* add_travels();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >&
      travels() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >*
      mutable_travels();

  // repeated .gboss.FaultInfo faults = 5;
  inline int faults_size() const;
  inline void clear_faults();
  static const int kFaultsFieldNumber = 5;
  inline const ::gboss::FaultInfo& faults(int index) const;
  inline ::gboss::FaultInfo* mutable_faults(int index);
  inline ::gboss::FaultInfo* add_faults();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >&
      faults() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >*
      mutable_faults();

  // optional string sn = 6;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 6;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // repeated .gboss.OperateData operates = 7;
  inline int operates_size() const;
  inline void clear_operates();
  static const int kOperatesFieldNumber = 7;
  inline const ::gboss::OperateData& operates(int index) const;
  inline ::gboss::OperateData* mutable_operates(int index);
  inline ::gboss::OperateData* add_operates();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >&
      operates() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >*
      mutable_operates();

  // repeated .gboss.ShortMessage sms = 8;
  inline int sms_size() const;
  inline void clear_sms();
  static const int kSmsFieldNumber = 8;
  inline const ::gboss::ShortMessage& sms(int index) const;
  inline ::gboss::ShortMessage* mutable_sms(int index);
  inline ::gboss::ShortMessage* add_sms();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >&
      sms() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >*
      mutable_sms();

  // repeated .gboss.AlarmInfo alarms = 9;
  inline int alarms_size() const;
  inline void clear_alarms();
  static const int kAlarmsFieldNumber = 9;
  inline const ::gboss::AlarmInfo& alarms(int index) const;
  inline ::gboss::AlarmInfo* mutable_alarms(int index);
  inline ::gboss::AlarmInfo* add_alarms();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >&
      alarms() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >*
      mutable_alarms();

  // repeated .gboss.OBDInfo obds = 10;
  inline int obds_size() const;
  inline void clear_obds();
  static const int kObdsFieldNumber = 10;
  inline const ::gboss::OBDInfo& obds(int index) const;
  inline ::gboss::OBDInfo* mutable_obds(int index);
  inline ::gboss::OBDInfo* add_obds();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >&
      obds() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >*
      mutable_obds();

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 11;
  inline int unitloginout_size() const;
  inline void clear_unitloginout();
  static const int kUnitloginoutFieldNumber = 11;
  inline const ::gboss::DeliverUnitLoginOut& unitloginout(int index) const;
  inline ::gboss::DeliverUnitLoginOut* mutable_unitloginout(int index);
  inline ::gboss::DeliverUnitLoginOut* add_unitloginout();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >&
      unitloginout() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >*
      mutable_unitloginout();

  // @@protoc_insertion_point(class_scope:gboss.GetLastInfo_ACK)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();
  inline void set_has_sn();
  inline void clear_has_sn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* retmsg_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo > gpses_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo > travels_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo > faults_;
  ::std::string* sn_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData > operates_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage > sms_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo > alarms_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo > obds_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut > unitloginout_;
  ::google_public::protobuf::int32 retcode_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static GetLastInfo_ACK* default_instance_;
};
// -------------------------------------------------------------------

class GetHistoryInfo : public ::google_public::protobuf::Message {
 public:
  GetHistoryInfo();
  virtual ~GetHistoryInfo();

  GetHistoryInfo(const GetHistoryInfo& from);

  inline GetHistoryInfo& operator=(const GetHistoryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetHistoryInfo& default_instance();

  void Swap(GetHistoryInfo* other);

  // implements Message ----------------------------------------------

  GetHistoryInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetHistoryInfo& from);
  void MergeFrom(const GetHistoryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 infoType = 2;
  inline bool has_infotype() const;
  inline void clear_infotype();
  static const int kInfoTypeFieldNumber = 2;
  inline ::google_public::protobuf::int32 infotype() const;
  inline void set_infotype(::google_public::protobuf::int32 value);

  // required int64 starttime = 3;
  inline bool has_starttime() const;
  inline void clear_starttime();
  static const int kStarttimeFieldNumber = 3;
  inline ::google_public::protobuf::int64 starttime() const;
  inline void set_starttime(::google_public::protobuf::int64 value);

  // required int64 endtime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndtimeFieldNumber = 4;
  inline ::google_public::protobuf::int64 endtime() const;
  inline void set_endtime(::google_public::protobuf::int64 value);

  // optional int32 pageNumber = 5;
  inline bool has_pagenumber() const;
  inline void clear_pagenumber();
  static const int kPageNumberFieldNumber = 5;
  inline ::google_public::protobuf::int32 pagenumber() const;
  inline void set_pagenumber(::google_public::protobuf::int32 value);

  // optional int32 totalNumber = 6;
  inline bool has_totalnumber() const;
  inline void clear_totalnumber();
  static const int kTotalNumberFieldNumber = 6;
  inline ::google_public::protobuf::int32 totalnumber() const;
  inline void set_totalnumber(::google_public::protobuf::int32 value);

  // optional bool autonextpage = 7;
  inline bool has_autonextpage() const;
  inline void clear_autonextpage();
  static const int kAutonextpageFieldNumber = 7;
  inline bool autonextpage() const;
  inline void set_autonextpage(bool value);

  // optional string sn = 8;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 8;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // optional bool reversed = 9;
  inline bool has_reversed() const;
  inline void clear_reversed();
  static const int kReversedFieldNumber = 9;
  inline bool reversed() const;
  inline void set_reversed(bool value);

  // @@protoc_insertion_point(class_scope:gboss.GetHistoryInfo)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_infotype();
  inline void clear_has_infotype();
  inline void set_has_starttime();
  inline void clear_has_starttime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_pagenumber();
  inline void clear_has_pagenumber();
  inline void set_has_totalnumber();
  inline void clear_has_totalnumber();
  inline void set_has_autonextpage();
  inline void clear_has_autonextpage();
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_reversed();
  inline void clear_has_reversed();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::google_public::protobuf::int64 starttime_;
  ::google_public::protobuf::int32 infotype_;
  ::google_public::protobuf::int32 pagenumber_;
  ::google_public::protobuf::int64 endtime_;
  ::google_public::protobuf::int32 totalnumber_;
  bool autonextpage_;
  bool reversed_;
  ::std::string* sn_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static GetHistoryInfo* default_instance_;
};
// -------------------------------------------------------------------

class GetHistoryInfoNextPage : public ::google_public::protobuf::Message {
 public:
  GetHistoryInfoNextPage();
  virtual ~GetHistoryInfoNextPage();

  GetHistoryInfoNextPage(const GetHistoryInfoNextPage& from);

  inline GetHistoryInfoNextPage& operator=(const GetHistoryInfoNextPage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetHistoryInfoNextPage& default_instance();

  void Swap(GetHistoryInfoNextPage* other);

  // implements Message ----------------------------------------------

  GetHistoryInfoNextPage* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetHistoryInfoNextPage& from);
  void MergeFrom(const GetHistoryInfoNextPage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 infoType = 2;
  inline bool has_infotype() const;
  inline void clear_infotype();
  static const int kInfoTypeFieldNumber = 2;
  inline ::google_public::protobuf::int32 infotype() const;
  inline void set_infotype(::google_public::protobuf::int32 value);

  // optional string sn = 3;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 3;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // @@protoc_insertion_point(class_scope:gboss.GetHistoryInfoNextPage)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_infotype();
  inline void clear_has_infotype();
  inline void set_has_sn();
  inline void clear_has_sn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::std::string* sn_;
  ::google_public::protobuf::int32 infotype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static GetHistoryInfoNextPage* default_instance_;
};
// -------------------------------------------------------------------

class GetHistoryInfo_ACK : public ::google_public::protobuf::Message {
 public:
  GetHistoryInfo_ACK();
  virtual ~GetHistoryInfo_ACK();

  GetHistoryInfo_ACK(const GetHistoryInfo_ACK& from);

  inline GetHistoryInfo_ACK& operator=(const GetHistoryInfo_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetHistoryInfo_ACK& default_instance();

  void Swap(GetHistoryInfo_ACK* other);

  // implements Message ----------------------------------------------

  GetHistoryInfo_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetHistoryInfo_ACK& from);
  void MergeFrom(const GetHistoryInfo_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 retcode = 1;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 1;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 2;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 2;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // required bool lastPage = 3;
  inline bool has_lastpage() const;
  inline void clear_lastpage();
  static const int kLastPageFieldNumber = 3;
  inline bool lastpage() const;
  inline void set_lastpage(bool value);

  // repeated .gboss.GpsInfo gpses = 4;
  inline int gpses_size() const;
  inline void clear_gpses();
  static const int kGpsesFieldNumber = 4;
  inline const ::gboss::GpsInfo& gpses(int index) const;
  inline ::gboss::GpsInfo* mutable_gpses(int index);
  inline ::gboss::GpsInfo* add_gpses();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >&
      gpses() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >*
      mutable_gpses();

  // repeated .gboss.TravelInfo travels = 5;
  inline int travels_size() const;
  inline void clear_travels();
  static const int kTravelsFieldNumber = 5;
  inline const ::gboss::TravelInfo& travels(int index) const;
  inline ::gboss::TravelInfo* mutable_travels(int index);
  inline ::gboss::TravelInfo* add_travels();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >&
      travels() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >*
      mutable_travels();

  // repeated .gboss.FaultInfo faults = 6;
  inline int faults_size() const;
  inline void clear_faults();
  static const int kFaultsFieldNumber = 6;
  inline const ::gboss::FaultInfo& faults(int index) const;
  inline ::gboss::FaultInfo* mutable_faults(int index);
  inline ::gboss::FaultInfo* add_faults();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >&
      faults() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >*
      mutable_faults();

  // optional string sn = 7;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 7;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // repeated .gboss.OperateData operates = 8;
  inline int operates_size() const;
  inline void clear_operates();
  static const int kOperatesFieldNumber = 8;
  inline const ::gboss::OperateData& operates(int index) const;
  inline ::gboss::OperateData* mutable_operates(int index);
  inline ::gboss::OperateData* add_operates();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >&
      operates() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >*
      mutable_operates();

  // repeated .gboss.ShortMessage sms = 9;
  inline int sms_size() const;
  inline void clear_sms();
  static const int kSmsFieldNumber = 9;
  inline const ::gboss::ShortMessage& sms(int index) const;
  inline ::gboss::ShortMessage* mutable_sms(int index);
  inline ::gboss::ShortMessage* add_sms();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >&
      sms() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >*
      mutable_sms();

  // repeated .gboss.AlarmInfo alarms = 10;
  inline int alarms_size() const;
  inline void clear_alarms();
  static const int kAlarmsFieldNumber = 10;
  inline const ::gboss::AlarmInfo& alarms(int index) const;
  inline ::gboss::AlarmInfo* mutable_alarms(int index);
  inline ::gboss::AlarmInfo* add_alarms();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >&
      alarms() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >*
      mutable_alarms();

  // repeated .gboss.OBDInfo obds = 11;
  inline int obds_size() const;
  inline void clear_obds();
  static const int kObdsFieldNumber = 11;
  inline const ::gboss::OBDInfo& obds(int index) const;
  inline ::gboss::OBDInfo* mutable_obds(int index);
  inline ::gboss::OBDInfo* add_obds();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >&
      obds() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >*
      mutable_obds();

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 12;
  inline int unitloginout_size() const;
  inline void clear_unitloginout();
  static const int kUnitloginoutFieldNumber = 12;
  inline const ::gboss::DeliverUnitLoginOut& unitloginout(int index) const;
  inline ::gboss::DeliverUnitLoginOut* mutable_unitloginout(int index);
  inline ::gboss::DeliverUnitLoginOut* add_unitloginout();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >&
      unitloginout() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >*
      mutable_unitloginout();

  // @@protoc_insertion_point(class_scope:gboss.GetHistoryInfo_ACK)
 private:
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();
  inline void set_has_lastpage();
  inline void clear_has_lastpage();
  inline void set_has_sn();
  inline void clear_has_sn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* retmsg_;
  ::google_public::protobuf::int32 retcode_;
  bool lastpage_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo > gpses_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo > travels_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo > faults_;
  ::std::string* sn_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData > operates_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage > sms_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo > alarms_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo > obds_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut > unitloginout_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static GetHistoryInfo_ACK* default_instance_;
};
// -------------------------------------------------------------------

class GetHistorySimpleGpsInfo_ACK : public ::google_public::protobuf::Message {
 public:
  GetHistorySimpleGpsInfo_ACK();
  virtual ~GetHistorySimpleGpsInfo_ACK();

  GetHistorySimpleGpsInfo_ACK(const GetHistorySimpleGpsInfo_ACK& from);

  inline GetHistorySimpleGpsInfo_ACK& operator=(const GetHistorySimpleGpsInfo_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const GetHistorySimpleGpsInfo_ACK& default_instance();

  void Swap(GetHistorySimpleGpsInfo_ACK* other);

  // implements Message ----------------------------------------------

  GetHistorySimpleGpsInfo_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const GetHistorySimpleGpsInfo_ACK& from);
  void MergeFrom(const GetHistorySimpleGpsInfo_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 retcode = 2;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 2;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 3;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 3;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // required bool lastPage = 4;
  inline bool has_lastpage() const;
  inline void clear_lastpage();
  static const int kLastPageFieldNumber = 4;
  inline bool lastpage() const;
  inline void set_lastpage(bool value);

  // optional string sn = 5;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 5;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // repeated .gboss.GpsSimpleInfo gpses = 6;
  inline int gpses_size() const;
  inline void clear_gpses();
  static const int kGpsesFieldNumber = 6;
  inline const ::gboss::GpsSimpleInfo& gpses(int index) const;
  inline ::gboss::GpsSimpleInfo* mutable_gpses(int index);
  inline ::gboss::GpsSimpleInfo* add_gpses();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsSimpleInfo >&
      gpses() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsSimpleInfo >*
      mutable_gpses();

  // @@protoc_insertion_point(class_scope:gboss.GetHistorySimpleGpsInfo_ACK)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();
  inline void set_has_lastpage();
  inline void clear_has_lastpage();
  inline void set_has_sn();
  inline void clear_has_sn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::std::string* retmsg_;
  ::google_public::protobuf::int32 retcode_;
  bool lastpage_;
  ::std::string* sn_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsSimpleInfo > gpses_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static GetHistorySimpleGpsInfo_ACK* default_instance_;
};
// -------------------------------------------------------------------

class StopHistoryInfo : public ::google_public::protobuf::Message {
 public:
  StopHistoryInfo();
  virtual ~StopHistoryInfo();

  StopHistoryInfo(const StopHistoryInfo& from);

  inline StopHistoryInfo& operator=(const StopHistoryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const StopHistoryInfo& default_instance();

  void Swap(StopHistoryInfo* other);

  // implements Message ----------------------------------------------

  StopHistoryInfo* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const StopHistoryInfo& from);
  void MergeFrom(const StopHistoryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 infoType = 2;
  inline bool has_infotype() const;
  inline void clear_infotype();
  static const int kInfoTypeFieldNumber = 2;
  inline ::google_public::protobuf::int32 infotype() const;
  inline void set_infotype(::google_public::protobuf::int32 value);

  // optional string sn = 3;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 3;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // @@protoc_insertion_point(class_scope:gboss.StopHistoryInfo)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_infotype();
  inline void clear_has_infotype();
  inline void set_has_sn();
  inline void clear_has_sn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::std::string* sn_;
  ::google_public::protobuf::int32 infotype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static StopHistoryInfo* default_instance_;
};
// -------------------------------------------------------------------

class StopHistoryInfo_ACK : public ::google_public::protobuf::Message {
 public:
  StopHistoryInfo_ACK();
  virtual ~StopHistoryInfo_ACK();

  StopHistoryInfo_ACK(const StopHistoryInfo_ACK& from);

  inline StopHistoryInfo_ACK& operator=(const StopHistoryInfo_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const StopHistoryInfo_ACK& default_instance();

  void Swap(StopHistoryInfo_ACK* other);

  // implements Message ----------------------------------------------

  StopHistoryInfo_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const StopHistoryInfo_ACK& from);
  void MergeFrom(const StopHistoryInfo_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string callLetter = 1;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 1;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 infoType = 2;
  inline bool has_infotype() const;
  inline void clear_infotype();
  static const int kInfoTypeFieldNumber = 2;
  inline ::google_public::protobuf::int32 infotype() const;
  inline void set_infotype(::google_public::protobuf::int32 value);

  // required int32 retcode = 3;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 3;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 4;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 4;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // optional string sn = 5;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 5;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // @@protoc_insertion_point(class_scope:gboss.StopHistoryInfo_ACK)
 private:
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_infotype();
  inline void clear_has_infotype();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();
  inline void set_has_sn();
  inline void clear_has_sn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* callletter_;
  ::google_public::protobuf::int32 infotype_;
  ::google_public::protobuf::int32 retcode_;
  ::std::string* retmsg_;
  ::std::string* sn_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static StopHistoryInfo_ACK* default_instance_;
};
// -------------------------------------------------------------------

class SendCommand : public ::google_public::protobuf::Message {
 public:
  SendCommand();
  virtual ~SendCommand();

  SendCommand(const SendCommand& from);

  inline SendCommand& operator=(const SendCommand& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SendCommand& default_instance();

  void Swap(SendCommand* other);

  // implements Message ----------------------------------------------

  SendCommand* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SendCommand& from);
  void MergeFrom(const SendCommand& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sn = 1;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 1;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // repeated string callLetters = 2;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 2;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // required int32 cmdId = 3;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdIdFieldNumber = 3;
  inline ::google_public::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google_public::protobuf::int32 value);

  // repeated string params = 4;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 4;
  inline const ::std::string& params(int index) const;
  inline ::std::string* mutable_params(int index);
  inline void set_params(int index, const ::std::string& value);
  inline void set_params(int index, const char* value);
  inline void set_params(int index, const char* value, size_t size);
  inline ::std::string* add_params();
  inline void add_params(const ::std::string& value);
  inline void add_params(const char* value);
  inline void add_params(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& params() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // optional string ackProxy = 5;
  inline bool has_ackproxy() const;
  inline void clear_ackproxy();
  static const int kAckProxyFieldNumber = 5;
  inline const ::std::string& ackproxy() const;
  inline void set_ackproxy(const ::std::string& value);
  inline void set_ackproxy(const char* value);
  inline void set_ackproxy(const char* value, size_t size);
  inline ::std::string* mutable_ackproxy();
  inline ::std::string* release_ackproxy();
  inline void set_allocated_ackproxy(::std::string* ackproxy);

  // optional int32 channelId = 6;
  inline bool has_channelid() const;
  inline void clear_channelid();
  static const int kChannelIdFieldNumber = 6;
  inline ::google_public::protobuf::int32 channelid() const;
  inline void set_channelid(::google_public::protobuf::int32 value);

  // optional bool addmonitor = 7;
  inline bool has_addmonitor() const;
  inline void clear_addmonitor();
  static const int kAddmonitorFieldNumber = 7;
  inline bool addmonitor() const;
  inline void set_addmonitor(bool value);

  // @@protoc_insertion_point(class_scope:gboss.SendCommand)
 private:
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_ackproxy();
  inline void clear_has_ackproxy();
  inline void set_has_channelid();
  inline void clear_has_channelid();
  inline void set_has_addmonitor();
  inline void clear_has_addmonitor();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sn_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> params_;
  ::google_public::protobuf::int32 cmdid_;
  ::google_public::protobuf::int32 channelid_;
  ::std::string* ackproxy_;
  bool addmonitor_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static SendCommand* default_instance_;
};
// -------------------------------------------------------------------

class SendCommandSend_ACK : public ::google_public::protobuf::Message {
 public:
  SendCommandSend_ACK();
  virtual ~SendCommandSend_ACK();

  SendCommandSend_ACK(const SendCommandSend_ACK& from);

  inline SendCommandSend_ACK& operator=(const SendCommandSend_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SendCommandSend_ACK& default_instance();

  void Swap(SendCommandSend_ACK* other);

  // implements Message ----------------------------------------------

  SendCommandSend_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SendCommandSend_ACK& from);
  void MergeFrom(const SendCommandSend_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sn = 1;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 1;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // required string callLetter = 2;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 2;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 cmdId = 3;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdIdFieldNumber = 3;
  inline ::google_public::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google_public::protobuf::int32 value);

  // required int32 retcode = 4;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // optional string retmsg = 5;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 5;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // optional int32 unitsn = 6;
  inline bool has_unitsn() const;
  inline void clear_unitsn();
  static const int kUnitsnFieldNumber = 6;
  inline ::google_public::protobuf::int32 unitsn() const;
  inline void set_unitsn(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.SendCommandSend_ACK)
 private:
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();
  inline void set_has_unitsn();
  inline void clear_has_unitsn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sn_;
  ::std::string* callletter_;
  ::google_public::protobuf::int32 cmdid_;
  ::google_public::protobuf::int32 retcode_;
  ::std::string* retmsg_;
  ::google_public::protobuf::int32 unitsn_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static SendCommandSend_ACK* default_instance_;
};
// -------------------------------------------------------------------

class SendCommand_ACK : public ::google_public::protobuf::Message {
 public:
  SendCommand_ACK();
  virtual ~SendCommand_ACK();

  SendCommand_ACK(const SendCommand_ACK& from);

  inline SendCommand_ACK& operator=(const SendCommand_ACK& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const SendCommand_ACK& default_instance();

  void Swap(SendCommand_ACK* other);

  // implements Message ----------------------------------------------

  SendCommand_ACK* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const SendCommand_ACK& from);
  void MergeFrom(const SendCommand_ACK& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sn = 1;
  inline bool has_sn() const;
  inline void clear_sn();
  static const int kSnFieldNumber = 1;
  inline const ::std::string& sn() const;
  inline void set_sn(const ::std::string& value);
  inline void set_sn(const char* value);
  inline void set_sn(const char* value, size_t size);
  inline ::std::string* mutable_sn();
  inline ::std::string* release_sn();
  inline void set_allocated_sn(::std::string* sn);

  // required string callLetter = 2;
  inline bool has_callletter() const;
  inline void clear_callletter();
  static const int kCallLetterFieldNumber = 2;
  inline const ::std::string& callletter() const;
  inline void set_callletter(const ::std::string& value);
  inline void set_callletter(const char* value);
  inline void set_callletter(const char* value, size_t size);
  inline ::std::string* mutable_callletter();
  inline ::std::string* release_callletter();
  inline void set_allocated_callletter(::std::string* callletter);

  // required int32 cmdId = 3;
  inline bool has_cmdid() const;
  inline void clear_cmdid();
  static const int kCmdIdFieldNumber = 3;
  inline ::google_public::protobuf::int32 cmdid() const;
  inline void set_cmdid(::google_public::protobuf::int32 value);

  // required int32 retcode = 4;
  inline bool has_retcode() const;
  inline void clear_retcode();
  static const int kRetcodeFieldNumber = 4;
  inline ::google_public::protobuf::int32 retcode() const;
  inline void set_retcode(::google_public::protobuf::int32 value);

  // repeated string params = 5;
  inline int params_size() const;
  inline void clear_params();
  static const int kParamsFieldNumber = 5;
  inline const ::std::string& params(int index) const;
  inline ::std::string* mutable_params(int index);
  inline void set_params(int index, const ::std::string& value);
  inline void set_params(int index, const char* value);
  inline void set_params(int index, const char* value, size_t size);
  inline ::std::string* add_params();
  inline void add_params(const ::std::string& value);
  inline void add_params(const char* value);
  inline void add_params(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& params() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_params();

  // repeated .gboss.GpsInfo gpsInfo = 6;
  inline int gpsinfo_size() const;
  inline void clear_gpsinfo();
  static const int kGpsInfoFieldNumber = 6;
  inline const ::gboss::GpsInfo& gpsinfo(int index) const;
  inline ::gboss::GpsInfo* mutable_gpsinfo(int index);
  inline ::gboss::GpsInfo* add_gpsinfo();
  inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >&
      gpsinfo() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >*
      mutable_gpsinfo();

  // optional string retmsg = 7;
  inline bool has_retmsg() const;
  inline void clear_retmsg();
  static const int kRetmsgFieldNumber = 7;
  inline const ::std::string& retmsg() const;
  inline void set_retmsg(const ::std::string& value);
  inline void set_retmsg(const char* value);
  inline void set_retmsg(const char* value, size_t size);
  inline ::std::string* mutable_retmsg();
  inline ::std::string* release_retmsg();
  inline void set_allocated_retmsg(::std::string* retmsg);

  // optional int32 unitsn = 8;
  inline bool has_unitsn() const;
  inline void clear_unitsn();
  static const int kUnitsnFieldNumber = 8;
  inline ::google_public::protobuf::int32 unitsn() const;
  inline void set_unitsn(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.SendCommand_ACK)
 private:
  inline void set_has_sn();
  inline void clear_has_sn();
  inline void set_has_callletter();
  inline void clear_has_callletter();
  inline void set_has_cmdid();
  inline void clear_has_cmdid();
  inline void set_has_retcode();
  inline void clear_has_retcode();
  inline void set_has_retmsg();
  inline void clear_has_retmsg();
  inline void set_has_unitsn();
  inline void clear_has_unitsn();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::std::string* sn_;
  ::std::string* callletter_;
  ::google_public::protobuf::int32 cmdid_;
  ::google_public::protobuf::int32 retcode_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> params_;
  ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo > gpsinfo_;
  ::std::string* retmsg_;
  ::google_public::protobuf::int32 unitsn_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static SendCommand_ACK* default_instance_;
};
// -------------------------------------------------------------------

class DeliverGPS : public ::google_public::protobuf::Message {
 public:
  DeliverGPS();
  virtual ~DeliverGPS();

  DeliverGPS(const DeliverGPS& from);

  inline DeliverGPS& operator=(const DeliverGPS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverGPS& default_instance();

  void Swap(DeliverGPS* other);

  // implements Message ----------------------------------------------

  DeliverGPS* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverGPS& from);
  void MergeFrom(const DeliverGPS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.GpsInfo gpsinfo = 1;
  inline bool has_gpsinfo() const;
  inline void clear_gpsinfo();
  static const int kGpsinfoFieldNumber = 1;
  inline const ::gboss::GpsInfo& gpsinfo() const;
  inline ::gboss::GpsInfo* mutable_gpsinfo();
  inline ::gboss::GpsInfo* release_gpsinfo();
  inline void set_allocated_gpsinfo(::gboss::GpsInfo* gpsinfo);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // optional int32 alarmid = 4;
  inline bool has_alarmid() const;
  inline void clear_alarmid();
  static const int kAlarmidFieldNumber = 4;
  inline ::google_public::protobuf::int32 alarmid() const;
  inline void set_alarmid(::google_public::protobuf::int32 value);

  // optional string alarmname = 5;
  inline bool has_alarmname() const;
  inline void clear_alarmname();
  static const int kAlarmnameFieldNumber = 5;
  inline const ::std::string& alarmname() const;
  inline void set_alarmname(const ::std::string& value);
  inline void set_alarmname(const char* value);
  inline void set_alarmname(const char* value, size_t size);
  inline ::std::string* mutable_alarmname();
  inline ::std::string* release_alarmname();
  inline void set_allocated_alarmname(::std::string* alarmname);

  // @@protoc_insertion_point(class_scope:gboss.DeliverGPS)
 private:
  inline void set_has_gpsinfo();
  inline void clear_has_gpsinfo();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();
  inline void set_has_alarmid();
  inline void clear_has_alarmid();
  inline void set_has_alarmname();
  inline void clear_has_alarmname();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::GpsInfo* gpsinfo_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  ::std::string* alarmname_;
  ::google_public::protobuf::int32 alarmid_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverGPS* default_instance_;
};
// -------------------------------------------------------------------

class DeliverAlarm : public ::google_public::protobuf::Message {
 public:
  DeliverAlarm();
  virtual ~DeliverAlarm();

  DeliverAlarm(const DeliverAlarm& from);

  inline DeliverAlarm& operator=(const DeliverAlarm& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverAlarm& default_instance();

  void Swap(DeliverAlarm* other);

  // implements Message ----------------------------------------------

  DeliverAlarm* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverAlarm& from);
  void MergeFrom(const DeliverAlarm& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.AlarmInfo alarminfo = 1;
  inline bool has_alarminfo() const;
  inline void clear_alarminfo();
  static const int kAlarminfoFieldNumber = 1;
  inline const ::gboss::AlarmInfo& alarminfo() const;
  inline ::gboss::AlarmInfo* mutable_alarminfo();
  inline ::gboss::AlarmInfo* release_alarminfo();
  inline void set_allocated_alarminfo(::gboss::AlarmInfo* alarminfo);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverAlarm)
 private:
  inline void set_has_alarminfo();
  inline void clear_has_alarminfo();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::AlarmInfo* alarminfo_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverAlarm* default_instance_;
};
// -------------------------------------------------------------------

class DeliverOperateData : public ::google_public::protobuf::Message {
 public:
  DeliverOperateData();
  virtual ~DeliverOperateData();

  DeliverOperateData(const DeliverOperateData& from);

  inline DeliverOperateData& operator=(const DeliverOperateData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverOperateData& default_instance();

  void Swap(DeliverOperateData* other);

  // implements Message ----------------------------------------------

  DeliverOperateData* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverOperateData& from);
  void MergeFrom(const DeliverOperateData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.OperateData data = 1;
  inline bool has_data() const;
  inline void clear_data();
  static const int kDataFieldNumber = 1;
  inline const ::gboss::OperateData& data() const;
  inline ::gboss::OperateData* mutable_data();
  inline ::gboss::OperateData* release_data();
  inline void set_allocated_data(::gboss::OperateData* data);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverOperateData)
 private:
  inline void set_has_data();
  inline void clear_has_data();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::OperateData* data_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverOperateData* default_instance_;
};
// -------------------------------------------------------------------

class DeliverSMS : public ::google_public::protobuf::Message {
 public:
  DeliverSMS();
  virtual ~DeliverSMS();

  DeliverSMS(const DeliverSMS& from);

  inline DeliverSMS& operator=(const DeliverSMS& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverSMS& default_instance();

  void Swap(DeliverSMS* other);

  // implements Message ----------------------------------------------

  DeliverSMS* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverSMS& from);
  void MergeFrom(const DeliverSMS& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.ShortMessage msg = 1;
  inline bool has_msg() const;
  inline void clear_msg();
  static const int kMsgFieldNumber = 1;
  inline const ::gboss::ShortMessage& msg() const;
  inline ::gboss::ShortMessage* mutable_msg();
  inline ::gboss::ShortMessage* release_msg();
  inline void set_allocated_msg(::gboss::ShortMessage* msg);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverSMS)
 private:
  inline void set_has_msg();
  inline void clear_has_msg();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::ShortMessage* msg_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverSMS* default_instance_;
};
// -------------------------------------------------------------------

class DeliverTravel : public ::google_public::protobuf::Message {
 public:
  DeliverTravel();
  virtual ~DeliverTravel();

  DeliverTravel(const DeliverTravel& from);

  inline DeliverTravel& operator=(const DeliverTravel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverTravel& default_instance();

  void Swap(DeliverTravel* other);

  // implements Message ----------------------------------------------

  DeliverTravel* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverTravel& from);
  void MergeFrom(const DeliverTravel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.TravelInfo travelinfo = 1;
  inline bool has_travelinfo() const;
  inline void clear_travelinfo();
  static const int kTravelinfoFieldNumber = 1;
  inline const ::gboss::TravelInfo& travelinfo() const;
  inline ::gboss::TravelInfo* mutable_travelinfo();
  inline ::gboss::TravelInfo* release_travelinfo();
  inline void set_allocated_travelinfo(::gboss::TravelInfo* travelinfo);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverTravel)
 private:
  inline void set_has_travelinfo();
  inline void clear_has_travelinfo();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::TravelInfo* travelinfo_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverTravel* default_instance_;
};
// -------------------------------------------------------------------

class DeliverFault : public ::google_public::protobuf::Message {
 public:
  DeliverFault();
  virtual ~DeliverFault();

  DeliverFault(const DeliverFault& from);

  inline DeliverFault& operator=(const DeliverFault& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverFault& default_instance();

  void Swap(DeliverFault* other);

  // implements Message ----------------------------------------------

  DeliverFault* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverFault& from);
  void MergeFrom(const DeliverFault& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.FaultInfo faultinfo = 1;
  inline bool has_faultinfo() const;
  inline void clear_faultinfo();
  static const int kFaultinfoFieldNumber = 1;
  inline const ::gboss::FaultInfo& faultinfo() const;
  inline ::gboss::FaultInfo* mutable_faultinfo();
  inline ::gboss::FaultInfo* release_faultinfo();
  inline void set_allocated_faultinfo(::gboss::FaultInfo* faultinfo);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverFault)
 private:
  inline void set_has_faultinfo();
  inline void clear_has_faultinfo();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::FaultInfo* faultinfo_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverFault* default_instance_;
};
// -------------------------------------------------------------------

class DeliverOBD : public ::google_public::protobuf::Message {
 public:
  DeliverOBD();
  virtual ~DeliverOBD();

  DeliverOBD(const DeliverOBD& from);

  inline DeliverOBD& operator=(const DeliverOBD& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverOBD& default_instance();

  void Swap(DeliverOBD* other);

  // implements Message ----------------------------------------------

  DeliverOBD* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverOBD& from);
  void MergeFrom(const DeliverOBD& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.OBDInfo obdinfo = 1;
  inline bool has_obdinfo() const;
  inline void clear_obdinfo();
  static const int kObdinfoFieldNumber = 1;
  inline const ::gboss::OBDInfo& obdinfo() const;
  inline ::gboss::OBDInfo* mutable_obdinfo();
  inline ::gboss::OBDInfo* release_obdinfo();
  inline void set_allocated_obdinfo(::gboss::OBDInfo* obdinfo);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverOBD)
 private:
  inline void set_has_obdinfo();
  inline void clear_has_obdinfo();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::OBDInfo* obdinfo_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverOBD* default_instance_;
};
// -------------------------------------------------------------------

class DeliverAppNotice : public ::google_public::protobuf::Message {
 public:
  DeliverAppNotice();
  virtual ~DeliverAppNotice();

  DeliverAppNotice(const DeliverAppNotice& from);

  inline DeliverAppNotice& operator=(const DeliverAppNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverAppNotice& default_instance();

  void Swap(DeliverAppNotice* other);

  // implements Message ----------------------------------------------

  DeliverAppNotice* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverAppNotice& from);
  void MergeFrom(const DeliverAppNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.AppNoticeInfo noticeinfo = 1;
  inline bool has_noticeinfo() const;
  inline void clear_noticeinfo();
  static const int kNoticeinfoFieldNumber = 1;
  inline const ::gboss::AppNoticeInfo& noticeinfo() const;
  inline ::gboss::AppNoticeInfo* mutable_noticeinfo();
  inline ::gboss::AppNoticeInfo* release_noticeinfo();
  inline void set_allocated_noticeinfo(::gboss::AppNoticeInfo* noticeinfo);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverAppNotice)
 private:
  inline void set_has_noticeinfo();
  inline void clear_has_noticeinfo();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::AppNoticeInfo* noticeinfo_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverAppNotice* default_instance_;
};
// -------------------------------------------------------------------

class DeliverUnitVersion : public ::google_public::protobuf::Message {
 public:
  DeliverUnitVersion();
  virtual ~DeliverUnitVersion();

  DeliverUnitVersion(const DeliverUnitVersion& from);

  inline DeliverUnitVersion& operator=(const DeliverUnitVersion& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverUnitVersion& default_instance();

  void Swap(DeliverUnitVersion* other);

  // implements Message ----------------------------------------------

  DeliverUnitVersion* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverUnitVersion& from);
  void MergeFrom(const DeliverUnitVersion& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.UnitVersion unitVersion = 1;
  inline bool has_unitversion() const;
  inline void clear_unitversion();
  static const int kUnitVersionFieldNumber = 1;
  inline const ::gboss::UnitVersion& unitversion() const;
  inline ::gboss::UnitVersion* mutable_unitversion();
  inline ::gboss::UnitVersion* release_unitversion();
  inline void set_allocated_unitversion(::gboss::UnitVersion* unitversion);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverUnitVersion)
 private:
  inline void set_has_unitversion();
  inline void clear_has_unitversion();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::UnitVersion* unitversion_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverUnitVersion* default_instance_;
};
// -------------------------------------------------------------------

class DeliverECUConfig : public ::google_public::protobuf::Message {
 public:
  DeliverECUConfig();
  virtual ~DeliverECUConfig();

  DeliverECUConfig(const DeliverECUConfig& from);

  inline DeliverECUConfig& operator=(const DeliverECUConfig& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const DeliverECUConfig& default_instance();

  void Swap(DeliverECUConfig* other);

  // implements Message ----------------------------------------------

  DeliverECUConfig* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const DeliverECUConfig& from);
  void MergeFrom(const DeliverECUConfig& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .gboss.ECUConfig ecuConfig = 1;
  inline bool has_ecuconfig() const;
  inline void clear_ecuconfig();
  static const int kEcuConfigFieldNumber = 1;
  inline const ::gboss::ECUConfig& ecuconfig() const;
  inline ::gboss::ECUConfig* mutable_ecuconfig();
  inline ::gboss::ECUConfig* release_ecuconfig();
  inline void set_allocated_ecuconfig(::gboss::ECUConfig* ecuconfig);

  // optional int32 gatewayid = 2;
  inline bool has_gatewayid() const;
  inline void clear_gatewayid();
  static const int kGatewayidFieldNumber = 2;
  inline ::google_public::protobuf::int32 gatewayid() const;
  inline void set_gatewayid(::google_public::protobuf::int32 value);

  // optional int32 gatewaytype = 3;
  inline bool has_gatewaytype() const;
  inline void clear_gatewaytype();
  static const int kGatewaytypeFieldNumber = 3;
  inline ::google_public::protobuf::int32 gatewaytype() const;
  inline void set_gatewaytype(::google_public::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:gboss.DeliverECUConfig)
 private:
  inline void set_has_ecuconfig();
  inline void clear_has_ecuconfig();
  inline void set_has_gatewayid();
  inline void clear_has_gatewayid();
  inline void set_has_gatewaytype();
  inline void clear_has_gatewaytype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::gboss::ECUConfig* ecuconfig_;
  ::google_public::protobuf::int32 gatewayid_;
  ::google_public::protobuf::int32 gatewaytype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static DeliverECUConfig* default_instance_;
};
// -------------------------------------------------------------------

class TestDeliver : public ::google_public::protobuf::Message {
 public:
  TestDeliver();
  virtual ~TestDeliver();

  TestDeliver(const TestDeliver& from);

  inline TestDeliver& operator=(const TestDeliver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google_public::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google_public::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google_public::protobuf::Descriptor* descriptor();
  static const TestDeliver& default_instance();

  void Swap(TestDeliver* other);

  // implements Message ----------------------------------------------

  TestDeliver* New() const;
  void CopyFrom(const ::google_public::protobuf::Message& from);
  void MergeFrom(const ::google_public::protobuf::Message& from);
  void CopyFrom(const TestDeliver& from);
  void MergeFrom(const TestDeliver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google_public::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google_public::protobuf::io::CodedOutputStream* output) const;
  ::google_public::protobuf::uint8* SerializeWithCachedSizesToArray(::google_public::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  ::google_public::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 infoType = 1;
  inline bool has_infotype() const;
  inline void clear_infotype();
  static const int kInfoTypeFieldNumber = 1;
  inline ::google_public::protobuf::int32 infotype() const;
  inline void set_infotype(::google_public::protobuf::int32 value);

  // repeated string callLetters = 2;
  inline int callletters_size() const;
  inline void clear_callletters();
  static const int kCallLettersFieldNumber = 2;
  inline const ::std::string& callletters(int index) const;
  inline ::std::string* mutable_callletters(int index);
  inline void set_callletters(int index, const ::std::string& value);
  inline void set_callletters(int index, const char* value);
  inline void set_callletters(int index, const char* value, size_t size);
  inline ::std::string* add_callletters();
  inline void add_callletters(const ::std::string& value);
  inline void add_callletters(const char* value);
  inline void add_callletters(const char* value, size_t size);
  inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>& callletters() const;
  inline ::google_public::protobuf::RepeatedPtrField< ::std::string>* mutable_callletters();

  // @@protoc_insertion_point(class_scope:gboss.TestDeliver)
 private:
  inline void set_has_infotype();
  inline void clear_has_infotype();

  ::google_public::protobuf::UnknownFieldSet _unknown_fields_;

  ::google_public::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google_public::protobuf::RepeatedPtrField< ::std::string> callletters_;
  ::google_public::protobuf::int32 infotype_;
  friend void  protobuf_AddDesc_comcenter_2eproto();
  friend void protobuf_AssignDesc_comcenter_2eproto();
  friend void protobuf_ShutdownFile_comcenter_2eproto();

  void InitAsDefaultInstance();
  static TestDeliver* default_instance_;
};
// ===================================================================


// ===================================================================

// ComCenterMessage_ComCenterBaseMessage

// required int32 id = 1;
inline bool ComCenterMessage_ComCenterBaseMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ComCenterMessage_ComCenterBaseMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ComCenterMessage_ComCenterBaseMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ComCenterMessage_ComCenterBaseMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google_public::protobuf::int32 ComCenterMessage_ComCenterBaseMessage::id() const {
  // @@protoc_insertion_point(field_get:gboss.ComCenterMessage.ComCenterBaseMessage.id)
  return id_;
}
inline void ComCenterMessage_ComCenterBaseMessage::set_id(::google_public::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:gboss.ComCenterMessage.ComCenterBaseMessage.id)
}

// optional bytes content = 2;
inline bool ComCenterMessage_ComCenterBaseMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ComCenterMessage_ComCenterBaseMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ComCenterMessage_ComCenterBaseMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ComCenterMessage_ComCenterBaseMessage::clear_content() {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ComCenterMessage_ComCenterBaseMessage::content() const {
  // @@protoc_insertion_point(field_get:gboss.ComCenterMessage.ComCenterBaseMessage.content)
  return *content_;
}
inline void ComCenterMessage_ComCenterBaseMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.ComCenterMessage.ComCenterBaseMessage.content)
}
inline void ComCenterMessage_ComCenterBaseMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.ComCenterMessage.ComCenterBaseMessage.content)
}
inline void ComCenterMessage_ComCenterBaseMessage::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.ComCenterMessage.ComCenterBaseMessage.content)
}
inline ::std::string* ComCenterMessage_ComCenterBaseMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    content_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.ComCenterMessage.ComCenterBaseMessage.content)
  return content_;
}
inline ::std::string* ComCenterMessage_ComCenterBaseMessage::release_content() {
  clear_has_content();
  if (content_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void ComCenterMessage_ComCenterBaseMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.ComCenterMessage.ComCenterBaseMessage.content)
}

// -------------------------------------------------------------------

// ComCenterMessage

// repeated .gboss.ComCenterMessage.ComCenterBaseMessage messages = 1;
inline int ComCenterMessage::messages_size() const {
  return messages_.size();
}
inline void ComCenterMessage::clear_messages() {
  messages_.Clear();
}
inline const ::gboss::ComCenterMessage_ComCenterBaseMessage& ComCenterMessage::messages(int index) const {
  // @@protoc_insertion_point(field_get:gboss.ComCenterMessage.messages)
  return messages_.Get(index);
}
inline ::gboss::ComCenterMessage_ComCenterBaseMessage* ComCenterMessage::mutable_messages(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.ComCenterMessage.messages)
  return messages_.Mutable(index);
}
inline ::gboss::ComCenterMessage_ComCenterBaseMessage* ComCenterMessage::add_messages() {
  // @@protoc_insertion_point(field_add:gboss.ComCenterMessage.messages)
  return messages_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::ComCenterMessage_ComCenterBaseMessage >&
ComCenterMessage::messages() const {
  // @@protoc_insertion_point(field_list:gboss.ComCenterMessage.messages)
  return messages_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::ComCenterMessage_ComCenterBaseMessage >*
ComCenterMessage::mutable_messages() {
  // @@protoc_insertion_point(field_mutable_list:gboss.ComCenterMessage.messages)
  return &messages_;
}

// -------------------------------------------------------------------

// Login

// required string username = 1;
inline bool Login::has_username() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login::set_has_username() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login::clear_has_username() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login::clear_username() {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Login::username() const {
  // @@protoc_insertion_point(field_get:gboss.Login.username)
  return *username_;
}
inline void Login::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.Login.username)
}
inline void Login::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login.username)
}
inline void Login::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login.username)
}
inline ::std::string* Login::mutable_username() {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.Login.username)
  return username_;
}
inline ::std::string* Login::release_username() {
  clear_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_username(::std::string* username) {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.Login.username)
}

// required string password = 2;
inline bool Login::has_password() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login::set_has_password() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login::clear_has_password() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login::clear_password() {
  if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_->clear();
  }
  clear_has_password();
}
inline const ::std::string& Login::password() const {
  // @@protoc_insertion_point(field_get:gboss.Login.password)
  return *password_;
}
inline void Login::set_password(const ::std::string& value) {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.Login.password)
}
inline void Login::set_password(const char* value) {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login.password)
}
inline void Login::set_password(const char* value, size_t size) {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  password_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login.password)
}
inline ::std::string* Login::mutable_password() {
  set_has_password();
  if (password_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    password_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.Login.password)
  return password_;
}
inline ::std::string* Login::release_password() {
  clear_has_password();
  if (password_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = password_;
    password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_password(::std::string* password) {
  if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (password) {
    set_has_password();
    password_ = password;
  } else {
    clear_has_password();
    password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.Login.password)
}

// repeated string callLetters = 3;
inline int Login::callletters_size() const {
  return callletters_.size();
}
inline void Login::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& Login::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.Login.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* Login::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.Login.callLetters)
  return callletters_.Mutable(index);
}
inline void Login::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.Login.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void Login::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login.callLetters)
}
inline void Login::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login.callLetters)
}
inline ::std::string* Login::add_callletters() {
  return callletters_.Add();
}
inline void Login::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.Login.callLetters)
}
inline void Login::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.Login.callLetters)
}
inline void Login::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.Login.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
Login::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.Login.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
Login::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.Login.callLetters)
  return &callletters_;
}

// optional string seatid = 4;
inline bool Login::has_seatid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Login::set_has_seatid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Login::clear_has_seatid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Login::clear_seatid() {
  if (seatid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seatid_->clear();
  }
  clear_has_seatid();
}
inline const ::std::string& Login::seatid() const {
  // @@protoc_insertion_point(field_get:gboss.Login.seatid)
  return *seatid_;
}
inline void Login::set_seatid(const ::std::string& value) {
  set_has_seatid();
  if (seatid_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seatid_ = new ::std::string;
  }
  seatid_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.Login.seatid)
}
inline void Login::set_seatid(const char* value) {
  set_has_seatid();
  if (seatid_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seatid_ = new ::std::string;
  }
  seatid_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login.seatid)
}
inline void Login::set_seatid(const char* value, size_t size) {
  set_has_seatid();
  if (seatid_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seatid_ = new ::std::string;
  }
  seatid_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login.seatid)
}
inline ::std::string* Login::mutable_seatid() {
  set_has_seatid();
  if (seatid_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    seatid_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.Login.seatid)
  return seatid_;
}
inline ::std::string* Login::release_seatid() {
  clear_has_seatid();
  if (seatid_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = seatid_;
    seatid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_seatid(::std::string* seatid) {
  if (seatid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seatid_;
  }
  if (seatid) {
    set_has_seatid();
    seatid_ = seatid;
  } else {
    clear_has_seatid();
    seatid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.Login.seatid)
}

// optional string usertype = 5;
inline bool Login::has_usertype() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Login::set_has_usertype() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Login::clear_has_usertype() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Login::clear_usertype() {
  if (usertype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usertype_->clear();
  }
  clear_has_usertype();
}
inline const ::std::string& Login::usertype() const {
  // @@protoc_insertion_point(field_get:gboss.Login.usertype)
  return *usertype_;
}
inline void Login::set_usertype(const ::std::string& value) {
  set_has_usertype();
  if (usertype_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usertype_ = new ::std::string;
  }
  usertype_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.Login.usertype)
}
inline void Login::set_usertype(const char* value) {
  set_has_usertype();
  if (usertype_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usertype_ = new ::std::string;
  }
  usertype_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login.usertype)
}
inline void Login::set_usertype(const char* value, size_t size) {
  set_has_usertype();
  if (usertype_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usertype_ = new ::std::string;
  }
  usertype_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login.usertype)
}
inline ::std::string* Login::mutable_usertype() {
  set_has_usertype();
  if (usertype_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    usertype_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.Login.usertype)
  return usertype_;
}
inline ::std::string* Login::release_usertype() {
  clear_has_usertype();
  if (usertype_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = usertype_;
    usertype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_usertype(::std::string* usertype) {
  if (usertype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usertype_;
  }
  if (usertype) {
    set_has_usertype();
    usertype_ = usertype;
  } else {
    clear_has_usertype();
    usertype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.Login.usertype)
}

// optional string userversion = 6;
inline bool Login::has_userversion() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Login::set_has_userversion() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Login::clear_has_userversion() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Login::clear_userversion() {
  if (userversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userversion_->clear();
  }
  clear_has_userversion();
}
inline const ::std::string& Login::userversion() const {
  // @@protoc_insertion_point(field_get:gboss.Login.userversion)
  return *userversion_;
}
inline void Login::set_userversion(const ::std::string& value) {
  set_has_userversion();
  if (userversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userversion_ = new ::std::string;
  }
  userversion_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.Login.userversion)
}
inline void Login::set_userversion(const char* value) {
  set_has_userversion();
  if (userversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userversion_ = new ::std::string;
  }
  userversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login.userversion)
}
inline void Login::set_userversion(const char* value, size_t size) {
  set_has_userversion();
  if (userversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userversion_ = new ::std::string;
  }
  userversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login.userversion)
}
inline ::std::string* Login::mutable_userversion() {
  set_has_userversion();
  if (userversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    userversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.Login.userversion)
  return userversion_;
}
inline ::std::string* Login::release_userversion() {
  clear_has_userversion();
  if (userversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = userversion_;
    userversion_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login::set_allocated_userversion(::std::string* userversion) {
  if (userversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userversion_;
  }
  if (userversion) {
    set_has_userversion();
    userversion_ = userversion;
  } else {
    clear_has_userversion();
    userversion_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.Login.userversion)
}

// -------------------------------------------------------------------

// Login_ACK

// required int32 retcode = 1;
inline bool Login_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Login_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Login_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Login_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 Login_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.Login_ACK.retcode)
  return retcode_;
}
inline void Login_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.Login_ACK.retcode)
}

// optional string retmsg = 2;
inline bool Login_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Login_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Login_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Login_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& Login_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.Login_ACK.retmsg)
  return *retmsg_;
}
inline void Login_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.Login_ACK.retmsg)
}
inline void Login_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login_ACK.retmsg)
}
inline void Login_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login_ACK.retmsg)
}
inline ::std::string* Login_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.Login_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* Login_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.Login_ACK.retmsg)
}

// optional string username = 3;
inline bool Login_ACK::has_username() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Login_ACK::set_has_username() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Login_ACK::clear_has_username() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Login_ACK::clear_username() {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_->clear();
  }
  clear_has_username();
}
inline const ::std::string& Login_ACK::username() const {
  // @@protoc_insertion_point(field_get:gboss.Login_ACK.username)
  return *username_;
}
inline void Login_ACK::set_username(const ::std::string& value) {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.Login_ACK.username)
}
inline void Login_ACK::set_username(const char* value) {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.Login_ACK.username)
}
inline void Login_ACK::set_username(const char* value, size_t size) {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  username_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.Login_ACK.username)
}
inline ::std::string* Login_ACK::mutable_username() {
  set_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    username_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.Login_ACK.username)
  return username_;
}
inline ::std::string* Login_ACK::release_username() {
  clear_has_username();
  if (username_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = username_;
    username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void Login_ACK::set_allocated_username(::std::string* username) {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (username) {
    set_has_username();
    username_ = username;
  } else {
    clear_has_username();
    username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.Login_ACK.username)
}

// -------------------------------------------------------------------

// AddMonitor

// repeated string callLetters = 1;
inline int AddMonitor::callletters_size() const {
  return callletters_.size();
}
inline void AddMonitor::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& AddMonitor::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.AddMonitor.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* AddMonitor::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.AddMonitor.callLetters)
  return callletters_.Mutable(index);
}
inline void AddMonitor::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.AddMonitor.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void AddMonitor::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AddMonitor.callLetters)
}
inline void AddMonitor::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AddMonitor.callLetters)
}
inline ::std::string* AddMonitor::add_callletters() {
  return callletters_.Add();
}
inline void AddMonitor::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.AddMonitor.callLetters)
}
inline void AddMonitor::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.AddMonitor.callLetters)
}
inline void AddMonitor::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.AddMonitor.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
AddMonitor::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.AddMonitor.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
AddMonitor::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.AddMonitor.callLetters)
  return &callletters_;
}

// repeated int32 infotypes = 2;
inline int AddMonitor::infotypes_size() const {
  return infotypes_.size();
}
inline void AddMonitor::clear_infotypes() {
  infotypes_.Clear();
}
inline ::google_public::protobuf::int32 AddMonitor::infotypes(int index) const {
  // @@protoc_insertion_point(field_get:gboss.AddMonitor.infotypes)
  return infotypes_.Get(index);
}
inline void AddMonitor::set_infotypes(int index, ::google_public::protobuf::int32 value) {
  infotypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:gboss.AddMonitor.infotypes)
}
inline void AddMonitor::add_infotypes(::google_public::protobuf::int32 value) {
  infotypes_.Add(value);
  // @@protoc_insertion_point(field_add:gboss.AddMonitor.infotypes)
}
inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
AddMonitor::infotypes() const {
  // @@protoc_insertion_point(field_list:gboss.AddMonitor.infotypes)
  return infotypes_;
}
inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
AddMonitor::mutable_infotypes() {
  // @@protoc_insertion_point(field_mutable_list:gboss.AddMonitor.infotypes)
  return &infotypes_;
}

// optional bool clearold = 3;
inline bool AddMonitor::has_clearold() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void AddMonitor::set_has_clearold() {
  _has_bits_[0] |= 0x00000004u;
}
inline void AddMonitor::clear_has_clearold() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void AddMonitor::clear_clearold() {
  clearold_ = false;
  clear_has_clearold();
}
inline bool AddMonitor::clearold() const {
  // @@protoc_insertion_point(field_get:gboss.AddMonitor.clearold)
  return clearold_;
}
inline void AddMonitor::set_clearold(bool value) {
  set_has_clearold();
  clearold_ = value;
  // @@protoc_insertion_point(field_set:gboss.AddMonitor.clearold)
}

// -------------------------------------------------------------------

// AddMonitor_ACK

// required int32 retcode = 1;
inline bool AddMonitor_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AddMonitor_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AddMonitor_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AddMonitor_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 AddMonitor_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.AddMonitor_ACK.retcode)
  return retcode_;
}
inline void AddMonitor_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.AddMonitor_ACK.retcode)
}

// optional string retmsg = 2;
inline bool AddMonitor_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AddMonitor_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AddMonitor_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AddMonitor_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& AddMonitor_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.AddMonitor_ACK.retmsg)
  return *retmsg_;
}
inline void AddMonitor_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.AddMonitor_ACK.retmsg)
}
inline void AddMonitor_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AddMonitor_ACK.retmsg)
}
inline void AddMonitor_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AddMonitor_ACK.retmsg)
}
inline ::std::string* AddMonitor_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.AddMonitor_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* AddMonitor_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void AddMonitor_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.AddMonitor_ACK.retmsg)
}

// repeated string callLetters = 3;
inline int AddMonitor_ACK::callletters_size() const {
  return callletters_.size();
}
inline void AddMonitor_ACK::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& AddMonitor_ACK::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.AddMonitor_ACK.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* AddMonitor_ACK::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.AddMonitor_ACK.callLetters)
  return callletters_.Mutable(index);
}
inline void AddMonitor_ACK::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.AddMonitor_ACK.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void AddMonitor_ACK::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.AddMonitor_ACK.callLetters)
}
inline void AddMonitor_ACK::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.AddMonitor_ACK.callLetters)
}
inline ::std::string* AddMonitor_ACK::add_callletters() {
  return callletters_.Add();
}
inline void AddMonitor_ACK::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.AddMonitor_ACK.callLetters)
}
inline void AddMonitor_ACK::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.AddMonitor_ACK.callLetters)
}
inline void AddMonitor_ACK::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.AddMonitor_ACK.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
AddMonitor_ACK::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.AddMonitor_ACK.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
AddMonitor_ACK::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.AddMonitor_ACK.callLetters)
  return &callletters_;
}

// -------------------------------------------------------------------

// RemoveMonitor

// repeated string callLetters = 1;
inline int RemoveMonitor::callletters_size() const {
  return callletters_.size();
}
inline void RemoveMonitor::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& RemoveMonitor::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.RemoveMonitor.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* RemoveMonitor::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.RemoveMonitor.callLetters)
  return callletters_.Mutable(index);
}
inline void RemoveMonitor::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.RemoveMonitor.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void RemoveMonitor::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.RemoveMonitor.callLetters)
}
inline void RemoveMonitor::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.RemoveMonitor.callLetters)
}
inline ::std::string* RemoveMonitor::add_callletters() {
  return callletters_.Add();
}
inline void RemoveMonitor::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.RemoveMonitor.callLetters)
}
inline void RemoveMonitor::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.RemoveMonitor.callLetters)
}
inline void RemoveMonitor::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.RemoveMonitor.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
RemoveMonitor::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.RemoveMonitor.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
RemoveMonitor::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.RemoveMonitor.callLetters)
  return &callletters_;
}

// repeated int32 infotypes = 2;
inline int RemoveMonitor::infotypes_size() const {
  return infotypes_.size();
}
inline void RemoveMonitor::clear_infotypes() {
  infotypes_.Clear();
}
inline ::google_public::protobuf::int32 RemoveMonitor::infotypes(int index) const {
  // @@protoc_insertion_point(field_get:gboss.RemoveMonitor.infotypes)
  return infotypes_.Get(index);
}
inline void RemoveMonitor::set_infotypes(int index, ::google_public::protobuf::int32 value) {
  infotypes_.Set(index, value);
  // @@protoc_insertion_point(field_set:gboss.RemoveMonitor.infotypes)
}
inline void RemoveMonitor::add_infotypes(::google_public::protobuf::int32 value) {
  infotypes_.Add(value);
  // @@protoc_insertion_point(field_add:gboss.RemoveMonitor.infotypes)
}
inline const ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >&
RemoveMonitor::infotypes() const {
  // @@protoc_insertion_point(field_list:gboss.RemoveMonitor.infotypes)
  return infotypes_;
}
inline ::google_public::protobuf::RepeatedField< ::google_public::protobuf::int32 >*
RemoveMonitor::mutable_infotypes() {
  // @@protoc_insertion_point(field_mutable_list:gboss.RemoveMonitor.infotypes)
  return &infotypes_;
}

// -------------------------------------------------------------------

// RemoveMonitor_ACK

// required int32 retcode = 1;
inline bool RemoveMonitor_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RemoveMonitor_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RemoveMonitor_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RemoveMonitor_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 RemoveMonitor_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.RemoveMonitor_ACK.retcode)
  return retcode_;
}
inline void RemoveMonitor_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.RemoveMonitor_ACK.retcode)
}

// optional string retmsg = 2;
inline bool RemoveMonitor_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RemoveMonitor_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RemoveMonitor_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RemoveMonitor_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& RemoveMonitor_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.RemoveMonitor_ACK.retmsg)
  return *retmsg_;
}
inline void RemoveMonitor_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.RemoveMonitor_ACK.retmsg)
}
inline void RemoveMonitor_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.RemoveMonitor_ACK.retmsg)
}
inline void RemoveMonitor_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.RemoveMonitor_ACK.retmsg)
}
inline ::std::string* RemoveMonitor_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.RemoveMonitor_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* RemoveMonitor_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void RemoveMonitor_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.RemoveMonitor_ACK.retmsg)
}

// repeated string callLetters = 3;
inline int RemoveMonitor_ACK::callletters_size() const {
  return callletters_.size();
}
inline void RemoveMonitor_ACK::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& RemoveMonitor_ACK::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.RemoveMonitor_ACK.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* RemoveMonitor_ACK::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.RemoveMonitor_ACK.callLetters)
  return callletters_.Mutable(index);
}
inline void RemoveMonitor_ACK::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.RemoveMonitor_ACK.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void RemoveMonitor_ACK::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.RemoveMonitor_ACK.callLetters)
}
inline void RemoveMonitor_ACK::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.RemoveMonitor_ACK.callLetters)
}
inline ::std::string* RemoveMonitor_ACK::add_callletters() {
  return callletters_.Add();
}
inline void RemoveMonitor_ACK::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.RemoveMonitor_ACK.callLetters)
}
inline void RemoveMonitor_ACK::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.RemoveMonitor_ACK.callLetters)
}
inline void RemoveMonitor_ACK::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.RemoveMonitor_ACK.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
RemoveMonitor_ACK::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.RemoveMonitor_ACK.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
RemoveMonitor_ACK::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.RemoveMonitor_ACK.callLetters)
  return &callletters_;
}

// -------------------------------------------------------------------

// DeliverUnitLoginOut

// required string callLetter = 1;
inline bool DeliverUnitLoginOut::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverUnitLoginOut::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverUnitLoginOut::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverUnitLoginOut::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& DeliverUnitLoginOut::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.callLetter)
  return *callletter_;
}
inline void DeliverUnitLoginOut::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.callLetter)
}
inline void DeliverUnitLoginOut::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.DeliverUnitLoginOut.callLetter)
}
inline void DeliverUnitLoginOut::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.DeliverUnitLoginOut.callLetter)
}
inline ::std::string* DeliverUnitLoginOut::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.DeliverUnitLoginOut.callLetter)
  return callletter_;
}
inline ::std::string* DeliverUnitLoginOut::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeliverUnitLoginOut::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverUnitLoginOut.callLetter)
}

// required int32 inorout = 2;
inline bool DeliverUnitLoginOut::has_inorout() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverUnitLoginOut::set_has_inorout() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverUnitLoginOut::clear_has_inorout() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverUnitLoginOut::clear_inorout() {
  inorout_ = 0;
  clear_has_inorout();
}
inline ::google_public::protobuf::int32 DeliverUnitLoginOut::inorout() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.inorout)
  return inorout_;
}
inline void DeliverUnitLoginOut::set_inorout(::google_public::protobuf::int32 value) {
  set_has_inorout();
  inorout_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.inorout)
}

// optional int32 gatewayid = 3;
inline bool DeliverUnitLoginOut::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverUnitLoginOut::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverUnitLoginOut::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverUnitLoginOut::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverUnitLoginOut::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.gatewayid)
  return gatewayid_;
}
inline void DeliverUnitLoginOut::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.gatewayid)
}

// optional int32 gatewaytype = 4;
inline bool DeliverUnitLoginOut::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeliverUnitLoginOut::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeliverUnitLoginOut::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeliverUnitLoginOut::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverUnitLoginOut::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.gatewaytype)
  return gatewaytype_;
}
inline void DeliverUnitLoginOut::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.gatewaytype)
}

// optional int64 loginTime = 5;
inline bool DeliverUnitLoginOut::has_logintime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeliverUnitLoginOut::set_has_logintime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeliverUnitLoginOut::clear_has_logintime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeliverUnitLoginOut::clear_logintime() {
  logintime_ = GOOGLE_LONGLONG(0);
  clear_has_logintime();
}
inline ::google_public::protobuf::int64 DeliverUnitLoginOut::logintime() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.loginTime)
  return logintime_;
}
inline void DeliverUnitLoginOut::set_logintime(::google_public::protobuf::int64 value) {
  set_has_logintime();
  logintime_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.loginTime)
}

// optional int64 logoutTime = 6;
inline bool DeliverUnitLoginOut::has_logouttime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void DeliverUnitLoginOut::set_has_logouttime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void DeliverUnitLoginOut::clear_has_logouttime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void DeliverUnitLoginOut::clear_logouttime() {
  logouttime_ = GOOGLE_LONGLONG(0);
  clear_has_logouttime();
}
inline ::google_public::protobuf::int64 DeliverUnitLoginOut::logouttime() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.logoutTime)
  return logouttime_;
}
inline void DeliverUnitLoginOut::set_logouttime(::google_public::protobuf::int64 value) {
  set_has_logouttime();
  logouttime_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.logoutTime)
}

// optional string unitversion = 7;
inline bool DeliverUnitLoginOut::has_unitversion() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void DeliverUnitLoginOut::set_has_unitversion() {
  _has_bits_[0] |= 0x00000040u;
}
inline void DeliverUnitLoginOut::clear_has_unitversion() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void DeliverUnitLoginOut::clear_unitversion() {
  if (unitversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitversion_->clear();
  }
  clear_has_unitversion();
}
inline const ::std::string& DeliverUnitLoginOut::unitversion() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.unitversion)
  return *unitversion_;
}
inline void DeliverUnitLoginOut::set_unitversion(const ::std::string& value) {
  set_has_unitversion();
  if (unitversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitversion_ = new ::std::string;
  }
  unitversion_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.unitversion)
}
inline void DeliverUnitLoginOut::set_unitversion(const char* value) {
  set_has_unitversion();
  if (unitversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitversion_ = new ::std::string;
  }
  unitversion_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.DeliverUnitLoginOut.unitversion)
}
inline void DeliverUnitLoginOut::set_unitversion(const char* value, size_t size) {
  set_has_unitversion();
  if (unitversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitversion_ = new ::std::string;
  }
  unitversion_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.DeliverUnitLoginOut.unitversion)
}
inline ::std::string* DeliverUnitLoginOut::mutable_unitversion() {
  set_has_unitversion();
  if (unitversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    unitversion_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.DeliverUnitLoginOut.unitversion)
  return unitversion_;
}
inline ::std::string* DeliverUnitLoginOut::release_unitversion() {
  clear_has_unitversion();
  if (unitversion_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = unitversion_;
    unitversion_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeliverUnitLoginOut::set_allocated_unitversion(::std::string* unitversion) {
  if (unitversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitversion_;
  }
  if (unitversion) {
    set_has_unitversion();
    unitversion_ = unitversion;
  } else {
    clear_has_unitversion();
    unitversion_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverUnitLoginOut.unitversion)
}

// optional bool upgradegateway = 8;
inline bool DeliverUnitLoginOut::has_upgradegateway() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void DeliverUnitLoginOut::set_has_upgradegateway() {
  _has_bits_[0] |= 0x00000080u;
}
inline void DeliverUnitLoginOut::clear_has_upgradegateway() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void DeliverUnitLoginOut::clear_upgradegateway() {
  upgradegateway_ = false;
  clear_has_upgradegateway();
}
inline bool DeliverUnitLoginOut::upgradegateway() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitLoginOut.upgradegateway)
  return upgradegateway_;
}
inline void DeliverUnitLoginOut::set_upgradegateway(bool value) {
  set_has_upgradegateway();
  upgradegateway_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitLoginOut.upgradegateway)
}

// -------------------------------------------------------------------

// GetLastInfo

// required int32 infoType = 1;
inline bool GetLastInfo::has_infotype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastInfo::set_has_infotype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastInfo::clear_has_infotype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastInfo::clear_infotype() {
  infotype_ = 0;
  clear_has_infotype();
}
inline ::google_public::protobuf::int32 GetLastInfo::infotype() const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo.infoType)
  return infotype_;
}
inline void GetLastInfo::set_infotype(::google_public::protobuf::int32 value) {
  set_has_infotype();
  infotype_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetLastInfo.infoType)
}

// repeated string callLetters = 2;
inline int GetLastInfo::callletters_size() const {
  return callletters_.size();
}
inline void GetLastInfo::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& GetLastInfo::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* GetLastInfo::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo.callLetters)
  return callletters_.Mutable(index);
}
inline void GetLastInfo::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.GetLastInfo.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void GetLastInfo::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetLastInfo.callLetters)
}
inline void GetLastInfo::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetLastInfo.callLetters)
}
inline ::std::string* GetLastInfo::add_callletters() {
  return callletters_.Add();
}
inline void GetLastInfo::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo.callLetters)
}
inline void GetLastInfo::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.GetLastInfo.callLetters)
}
inline void GetLastInfo::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.GetLastInfo.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
GetLastInfo::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
GetLastInfo::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo.callLetters)
  return &callletters_;
}

// optional string sn = 3;
inline bool GetLastInfo::has_sn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetLastInfo::set_has_sn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetLastInfo::clear_has_sn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetLastInfo::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& GetLastInfo::sn() const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo.sn)
  return *sn_;
}
inline void GetLastInfo::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetLastInfo.sn)
}
inline void GetLastInfo::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetLastInfo.sn)
}
inline void GetLastInfo::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetLastInfo.sn)
}
inline ::std::string* GetLastInfo::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo.sn)
  return sn_;
}
inline ::std::string* GetLastInfo::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetLastInfo::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetLastInfo.sn)
}

// -------------------------------------------------------------------

// GetLastInfo_ACK

// required int32 retcode = 1;
inline bool GetLastInfo_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetLastInfo_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetLastInfo_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetLastInfo_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 GetLastInfo_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.retcode)
  return retcode_;
}
inline void GetLastInfo_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetLastInfo_ACK.retcode)
}

// optional string retmsg = 2;
inline bool GetLastInfo_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetLastInfo_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetLastInfo_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetLastInfo_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& GetLastInfo_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.retmsg)
  return *retmsg_;
}
inline void GetLastInfo_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetLastInfo_ACK.retmsg)
}
inline void GetLastInfo_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetLastInfo_ACK.retmsg)
}
inline void GetLastInfo_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetLastInfo_ACK.retmsg)
}
inline ::std::string* GetLastInfo_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* GetLastInfo_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetLastInfo_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetLastInfo_ACK.retmsg)
}

// repeated .gboss.GpsInfo gpses = 3;
inline int GetLastInfo_ACK::gpses_size() const {
  return gpses_.size();
}
inline void GetLastInfo_ACK::clear_gpses() {
  gpses_.Clear();
}
inline const ::gboss::GpsInfo& GetLastInfo_ACK::gpses(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.gpses)
  return gpses_.Get(index);
}
inline ::gboss::GpsInfo* GetLastInfo_ACK::mutable_gpses(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.gpses)
  return gpses_.Mutable(index);
}
inline ::gboss::GpsInfo* GetLastInfo_ACK::add_gpses() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.gpses)
  return gpses_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >&
GetLastInfo_ACK::gpses() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.gpses)
  return gpses_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >*
GetLastInfo_ACK::mutable_gpses() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.gpses)
  return &gpses_;
}

// repeated .gboss.TravelInfo travels = 4;
inline int GetLastInfo_ACK::travels_size() const {
  return travels_.size();
}
inline void GetLastInfo_ACK::clear_travels() {
  travels_.Clear();
}
inline const ::gboss::TravelInfo& GetLastInfo_ACK::travels(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.travels)
  return travels_.Get(index);
}
inline ::gboss::TravelInfo* GetLastInfo_ACK::mutable_travels(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.travels)
  return travels_.Mutable(index);
}
inline ::gboss::TravelInfo* GetLastInfo_ACK::add_travels() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.travels)
  return travels_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >&
GetLastInfo_ACK::travels() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.travels)
  return travels_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >*
GetLastInfo_ACK::mutable_travels() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.travels)
  return &travels_;
}

// repeated .gboss.FaultInfo faults = 5;
inline int GetLastInfo_ACK::faults_size() const {
  return faults_.size();
}
inline void GetLastInfo_ACK::clear_faults() {
  faults_.Clear();
}
inline const ::gboss::FaultInfo& GetLastInfo_ACK::faults(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.faults)
  return faults_.Get(index);
}
inline ::gboss::FaultInfo* GetLastInfo_ACK::mutable_faults(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.faults)
  return faults_.Mutable(index);
}
inline ::gboss::FaultInfo* GetLastInfo_ACK::add_faults() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.faults)
  return faults_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >&
GetLastInfo_ACK::faults() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.faults)
  return faults_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >*
GetLastInfo_ACK::mutable_faults() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.faults)
  return &faults_;
}

// optional string sn = 6;
inline bool GetLastInfo_ACK::has_sn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetLastInfo_ACK::set_has_sn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetLastInfo_ACK::clear_has_sn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetLastInfo_ACK::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& GetLastInfo_ACK::sn() const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.sn)
  return *sn_;
}
inline void GetLastInfo_ACK::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetLastInfo_ACK.sn)
}
inline void GetLastInfo_ACK::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetLastInfo_ACK.sn)
}
inline void GetLastInfo_ACK::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetLastInfo_ACK.sn)
}
inline ::std::string* GetLastInfo_ACK::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.sn)
  return sn_;
}
inline ::std::string* GetLastInfo_ACK::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetLastInfo_ACK::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetLastInfo_ACK.sn)
}

// repeated .gboss.OperateData operates = 7;
inline int GetLastInfo_ACK::operates_size() const {
  return operates_.size();
}
inline void GetLastInfo_ACK::clear_operates() {
  operates_.Clear();
}
inline const ::gboss::OperateData& GetLastInfo_ACK::operates(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.operates)
  return operates_.Get(index);
}
inline ::gboss::OperateData* GetLastInfo_ACK::mutable_operates(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.operates)
  return operates_.Mutable(index);
}
inline ::gboss::OperateData* GetLastInfo_ACK::add_operates() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.operates)
  return operates_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >&
GetLastInfo_ACK::operates() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.operates)
  return operates_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >*
GetLastInfo_ACK::mutable_operates() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.operates)
  return &operates_;
}

// repeated .gboss.ShortMessage sms = 8;
inline int GetLastInfo_ACK::sms_size() const {
  return sms_.size();
}
inline void GetLastInfo_ACK::clear_sms() {
  sms_.Clear();
}
inline const ::gboss::ShortMessage& GetLastInfo_ACK::sms(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.sms)
  return sms_.Get(index);
}
inline ::gboss::ShortMessage* GetLastInfo_ACK::mutable_sms(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.sms)
  return sms_.Mutable(index);
}
inline ::gboss::ShortMessage* GetLastInfo_ACK::add_sms() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.sms)
  return sms_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >&
GetLastInfo_ACK::sms() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.sms)
  return sms_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >*
GetLastInfo_ACK::mutable_sms() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.sms)
  return &sms_;
}

// repeated .gboss.AlarmInfo alarms = 9;
inline int GetLastInfo_ACK::alarms_size() const {
  return alarms_.size();
}
inline void GetLastInfo_ACK::clear_alarms() {
  alarms_.Clear();
}
inline const ::gboss::AlarmInfo& GetLastInfo_ACK::alarms(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.alarms)
  return alarms_.Get(index);
}
inline ::gboss::AlarmInfo* GetLastInfo_ACK::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.alarms)
  return alarms_.Mutable(index);
}
inline ::gboss::AlarmInfo* GetLastInfo_ACK::add_alarms() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.alarms)
  return alarms_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >&
GetLastInfo_ACK::alarms() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.alarms)
  return alarms_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >*
GetLastInfo_ACK::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.alarms)
  return &alarms_;
}

// repeated .gboss.OBDInfo obds = 10;
inline int GetLastInfo_ACK::obds_size() const {
  return obds_.size();
}
inline void GetLastInfo_ACK::clear_obds() {
  obds_.Clear();
}
inline const ::gboss::OBDInfo& GetLastInfo_ACK::obds(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.obds)
  return obds_.Get(index);
}
inline ::gboss::OBDInfo* GetLastInfo_ACK::mutable_obds(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.obds)
  return obds_.Mutable(index);
}
inline ::gboss::OBDInfo* GetLastInfo_ACK::add_obds() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.obds)
  return obds_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >&
GetLastInfo_ACK::obds() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.obds)
  return obds_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >*
GetLastInfo_ACK::mutable_obds() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.obds)
  return &obds_;
}

// repeated .gboss.DeliverUnitLoginOut unitloginout = 11;
inline int GetLastInfo_ACK::unitloginout_size() const {
  return unitloginout_.size();
}
inline void GetLastInfo_ACK::clear_unitloginout() {
  unitloginout_.Clear();
}
inline const ::gboss::DeliverUnitLoginOut& GetLastInfo_ACK::unitloginout(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetLastInfo_ACK.unitloginout)
  return unitloginout_.Get(index);
}
inline ::gboss::DeliverUnitLoginOut* GetLastInfo_ACK::mutable_unitloginout(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetLastInfo_ACK.unitloginout)
  return unitloginout_.Mutable(index);
}
inline ::gboss::DeliverUnitLoginOut* GetLastInfo_ACK::add_unitloginout() {
  // @@protoc_insertion_point(field_add:gboss.GetLastInfo_ACK.unitloginout)
  return unitloginout_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >&
GetLastInfo_ACK::unitloginout() const {
  // @@protoc_insertion_point(field_list:gboss.GetLastInfo_ACK.unitloginout)
  return unitloginout_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >*
GetLastInfo_ACK::mutable_unitloginout() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetLastInfo_ACK.unitloginout)
  return &unitloginout_;
}

// -------------------------------------------------------------------

// GetHistoryInfo

// required string callLetter = 1;
inline bool GetHistoryInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHistoryInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHistoryInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHistoryInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& GetHistoryInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.callLetter)
  return *callletter_;
}
inline void GetHistoryInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.callLetter)
}
inline void GetHistoryInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistoryInfo.callLetter)
}
inline void GetHistoryInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistoryInfo.callLetter)
}
inline ::std::string* GetHistoryInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo.callLetter)
  return callletter_;
}
inline ::std::string* GetHistoryInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistoryInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistoryInfo.callLetter)
}

// required int32 infoType = 2;
inline bool GetHistoryInfo::has_infotype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHistoryInfo::set_has_infotype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHistoryInfo::clear_has_infotype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHistoryInfo::clear_infotype() {
  infotype_ = 0;
  clear_has_infotype();
}
inline ::google_public::protobuf::int32 GetHistoryInfo::infotype() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.infoType)
  return infotype_;
}
inline void GetHistoryInfo::set_infotype(::google_public::protobuf::int32 value) {
  set_has_infotype();
  infotype_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.infoType)
}

// required int64 starttime = 3;
inline bool GetHistoryInfo::has_starttime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHistoryInfo::set_has_starttime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHistoryInfo::clear_has_starttime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHistoryInfo::clear_starttime() {
  starttime_ = GOOGLE_LONGLONG(0);
  clear_has_starttime();
}
inline ::google_public::protobuf::int64 GetHistoryInfo::starttime() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.starttime)
  return starttime_;
}
inline void GetHistoryInfo::set_starttime(::google_public::protobuf::int64 value) {
  set_has_starttime();
  starttime_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.starttime)
}

// required int64 endtime = 4;
inline bool GetHistoryInfo::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetHistoryInfo::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetHistoryInfo::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetHistoryInfo::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google_public::protobuf::int64 GetHistoryInfo::endtime() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.endtime)
  return endtime_;
}
inline void GetHistoryInfo::set_endtime(::google_public::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.endtime)
}

// optional int32 pageNumber = 5;
inline bool GetHistoryInfo::has_pagenumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetHistoryInfo::set_has_pagenumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetHistoryInfo::clear_has_pagenumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetHistoryInfo::clear_pagenumber() {
  pagenumber_ = 0;
  clear_has_pagenumber();
}
inline ::google_public::protobuf::int32 GetHistoryInfo::pagenumber() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.pageNumber)
  return pagenumber_;
}
inline void GetHistoryInfo::set_pagenumber(::google_public::protobuf::int32 value) {
  set_has_pagenumber();
  pagenumber_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.pageNumber)
}

// optional int32 totalNumber = 6;
inline bool GetHistoryInfo::has_totalnumber() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GetHistoryInfo::set_has_totalnumber() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GetHistoryInfo::clear_has_totalnumber() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GetHistoryInfo::clear_totalnumber() {
  totalnumber_ = 0;
  clear_has_totalnumber();
}
inline ::google_public::protobuf::int32 GetHistoryInfo::totalnumber() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.totalNumber)
  return totalnumber_;
}
inline void GetHistoryInfo::set_totalnumber(::google_public::protobuf::int32 value) {
  set_has_totalnumber();
  totalnumber_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.totalNumber)
}

// optional bool autonextpage = 7;
inline bool GetHistoryInfo::has_autonextpage() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetHistoryInfo::set_has_autonextpage() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetHistoryInfo::clear_has_autonextpage() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetHistoryInfo::clear_autonextpage() {
  autonextpage_ = false;
  clear_has_autonextpage();
}
inline bool GetHistoryInfo::autonextpage() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.autonextpage)
  return autonextpage_;
}
inline void GetHistoryInfo::set_autonextpage(bool value) {
  set_has_autonextpage();
  autonextpage_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.autonextpage)
}

// optional string sn = 8;
inline bool GetHistoryInfo::has_sn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GetHistoryInfo::set_has_sn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GetHistoryInfo::clear_has_sn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GetHistoryInfo::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& GetHistoryInfo::sn() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.sn)
  return *sn_;
}
inline void GetHistoryInfo::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.sn)
}
inline void GetHistoryInfo::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistoryInfo.sn)
}
inline void GetHistoryInfo::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistoryInfo.sn)
}
inline ::std::string* GetHistoryInfo::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo.sn)
  return sn_;
}
inline ::std::string* GetHistoryInfo::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistoryInfo::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistoryInfo.sn)
}

// optional bool reversed = 9;
inline bool GetHistoryInfo::has_reversed() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GetHistoryInfo::set_has_reversed() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GetHistoryInfo::clear_has_reversed() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GetHistoryInfo::clear_reversed() {
  reversed_ = false;
  clear_has_reversed();
}
inline bool GetHistoryInfo::reversed() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo.reversed)
  return reversed_;
}
inline void GetHistoryInfo::set_reversed(bool value) {
  set_has_reversed();
  reversed_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo.reversed)
}

// -------------------------------------------------------------------

// GetHistoryInfoNextPage

// required string callLetter = 1;
inline bool GetHistoryInfoNextPage::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHistoryInfoNextPage::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHistoryInfoNextPage::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHistoryInfoNextPage::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& GetHistoryInfoNextPage::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfoNextPage.callLetter)
  return *callletter_;
}
inline void GetHistoryInfoNextPage::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfoNextPage.callLetter)
}
inline void GetHistoryInfoNextPage::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistoryInfoNextPage.callLetter)
}
inline void GetHistoryInfoNextPage::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistoryInfoNextPage.callLetter)
}
inline ::std::string* GetHistoryInfoNextPage::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfoNextPage.callLetter)
  return callletter_;
}
inline ::std::string* GetHistoryInfoNextPage::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistoryInfoNextPage::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistoryInfoNextPage.callLetter)
}

// required int32 infoType = 2;
inline bool GetHistoryInfoNextPage::has_infotype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHistoryInfoNextPage::set_has_infotype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHistoryInfoNextPage::clear_has_infotype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHistoryInfoNextPage::clear_infotype() {
  infotype_ = 0;
  clear_has_infotype();
}
inline ::google_public::protobuf::int32 GetHistoryInfoNextPage::infotype() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfoNextPage.infoType)
  return infotype_;
}
inline void GetHistoryInfoNextPage::set_infotype(::google_public::protobuf::int32 value) {
  set_has_infotype();
  infotype_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfoNextPage.infoType)
}

// optional string sn = 3;
inline bool GetHistoryInfoNextPage::has_sn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHistoryInfoNextPage::set_has_sn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHistoryInfoNextPage::clear_has_sn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHistoryInfoNextPage::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& GetHistoryInfoNextPage::sn() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfoNextPage.sn)
  return *sn_;
}
inline void GetHistoryInfoNextPage::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfoNextPage.sn)
}
inline void GetHistoryInfoNextPage::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistoryInfoNextPage.sn)
}
inline void GetHistoryInfoNextPage::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistoryInfoNextPage.sn)
}
inline ::std::string* GetHistoryInfoNextPage::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfoNextPage.sn)
  return sn_;
}
inline ::std::string* GetHistoryInfoNextPage::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistoryInfoNextPage::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistoryInfoNextPage.sn)
}

// -------------------------------------------------------------------

// GetHistoryInfo_ACK

// required int32 retcode = 1;
inline bool GetHistoryInfo_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHistoryInfo_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHistoryInfo_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHistoryInfo_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 GetHistoryInfo_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.retcode)
  return retcode_;
}
inline void GetHistoryInfo_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo_ACK.retcode)
}

// optional string retmsg = 2;
inline bool GetHistoryInfo_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHistoryInfo_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHistoryInfo_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHistoryInfo_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& GetHistoryInfo_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.retmsg)
  return *retmsg_;
}
inline void GetHistoryInfo_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo_ACK.retmsg)
}
inline void GetHistoryInfo_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistoryInfo_ACK.retmsg)
}
inline void GetHistoryInfo_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistoryInfo_ACK.retmsg)
}
inline ::std::string* GetHistoryInfo_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* GetHistoryInfo_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistoryInfo_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistoryInfo_ACK.retmsg)
}

// required bool lastPage = 3;
inline bool GetHistoryInfo_ACK::has_lastpage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHistoryInfo_ACK::set_has_lastpage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHistoryInfo_ACK::clear_has_lastpage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHistoryInfo_ACK::clear_lastpage() {
  lastpage_ = false;
  clear_has_lastpage();
}
inline bool GetHistoryInfo_ACK::lastpage() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.lastPage)
  return lastpage_;
}
inline void GetHistoryInfo_ACK::set_lastpage(bool value) {
  set_has_lastpage();
  lastpage_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo_ACK.lastPage)
}

// repeated .gboss.GpsInfo gpses = 4;
inline int GetHistoryInfo_ACK::gpses_size() const {
  return gpses_.size();
}
inline void GetHistoryInfo_ACK::clear_gpses() {
  gpses_.Clear();
}
inline const ::gboss::GpsInfo& GetHistoryInfo_ACK::gpses(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.gpses)
  return gpses_.Get(index);
}
inline ::gboss::GpsInfo* GetHistoryInfo_ACK::mutable_gpses(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.gpses)
  return gpses_.Mutable(index);
}
inline ::gboss::GpsInfo* GetHistoryInfo_ACK::add_gpses() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.gpses)
  return gpses_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >&
GetHistoryInfo_ACK::gpses() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.gpses)
  return gpses_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >*
GetHistoryInfo_ACK::mutable_gpses() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.gpses)
  return &gpses_;
}

// repeated .gboss.TravelInfo travels = 5;
inline int GetHistoryInfo_ACK::travels_size() const {
  return travels_.size();
}
inline void GetHistoryInfo_ACK::clear_travels() {
  travels_.Clear();
}
inline const ::gboss::TravelInfo& GetHistoryInfo_ACK::travels(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.travels)
  return travels_.Get(index);
}
inline ::gboss::TravelInfo* GetHistoryInfo_ACK::mutable_travels(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.travels)
  return travels_.Mutable(index);
}
inline ::gboss::TravelInfo* GetHistoryInfo_ACK::add_travels() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.travels)
  return travels_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >&
GetHistoryInfo_ACK::travels() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.travels)
  return travels_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::TravelInfo >*
GetHistoryInfo_ACK::mutable_travels() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.travels)
  return &travels_;
}

// repeated .gboss.FaultInfo faults = 6;
inline int GetHistoryInfo_ACK::faults_size() const {
  return faults_.size();
}
inline void GetHistoryInfo_ACK::clear_faults() {
  faults_.Clear();
}
inline const ::gboss::FaultInfo& GetHistoryInfo_ACK::faults(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.faults)
  return faults_.Get(index);
}
inline ::gboss::FaultInfo* GetHistoryInfo_ACK::mutable_faults(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.faults)
  return faults_.Mutable(index);
}
inline ::gboss::FaultInfo* GetHistoryInfo_ACK::add_faults() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.faults)
  return faults_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >&
GetHistoryInfo_ACK::faults() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.faults)
  return faults_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::FaultInfo >*
GetHistoryInfo_ACK::mutable_faults() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.faults)
  return &faults_;
}

// optional string sn = 7;
inline bool GetHistoryInfo_ACK::has_sn() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GetHistoryInfo_ACK::set_has_sn() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GetHistoryInfo_ACK::clear_has_sn() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GetHistoryInfo_ACK::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& GetHistoryInfo_ACK::sn() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.sn)
  return *sn_;
}
inline void GetHistoryInfo_ACK::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistoryInfo_ACK.sn)
}
inline void GetHistoryInfo_ACK::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistoryInfo_ACK.sn)
}
inline void GetHistoryInfo_ACK::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistoryInfo_ACK.sn)
}
inline ::std::string* GetHistoryInfo_ACK::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.sn)
  return sn_;
}
inline ::std::string* GetHistoryInfo_ACK::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistoryInfo_ACK::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistoryInfo_ACK.sn)
}

// repeated .gboss.OperateData operates = 8;
inline int GetHistoryInfo_ACK::operates_size() const {
  return operates_.size();
}
inline void GetHistoryInfo_ACK::clear_operates() {
  operates_.Clear();
}
inline const ::gboss::OperateData& GetHistoryInfo_ACK::operates(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.operates)
  return operates_.Get(index);
}
inline ::gboss::OperateData* GetHistoryInfo_ACK::mutable_operates(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.operates)
  return operates_.Mutable(index);
}
inline ::gboss::OperateData* GetHistoryInfo_ACK::add_operates() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.operates)
  return operates_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >&
GetHistoryInfo_ACK::operates() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.operates)
  return operates_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OperateData >*
GetHistoryInfo_ACK::mutable_operates() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.operates)
  return &operates_;
}

// repeated .gboss.ShortMessage sms = 9;
inline int GetHistoryInfo_ACK::sms_size() const {
  return sms_.size();
}
inline void GetHistoryInfo_ACK::clear_sms() {
  sms_.Clear();
}
inline const ::gboss::ShortMessage& GetHistoryInfo_ACK::sms(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.sms)
  return sms_.Get(index);
}
inline ::gboss::ShortMessage* GetHistoryInfo_ACK::mutable_sms(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.sms)
  return sms_.Mutable(index);
}
inline ::gboss::ShortMessage* GetHistoryInfo_ACK::add_sms() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.sms)
  return sms_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >&
GetHistoryInfo_ACK::sms() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.sms)
  return sms_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::ShortMessage >*
GetHistoryInfo_ACK::mutable_sms() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.sms)
  return &sms_;
}

// repeated .gboss.AlarmInfo alarms = 10;
inline int GetHistoryInfo_ACK::alarms_size() const {
  return alarms_.size();
}
inline void GetHistoryInfo_ACK::clear_alarms() {
  alarms_.Clear();
}
inline const ::gboss::AlarmInfo& GetHistoryInfo_ACK::alarms(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.alarms)
  return alarms_.Get(index);
}
inline ::gboss::AlarmInfo* GetHistoryInfo_ACK::mutable_alarms(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.alarms)
  return alarms_.Mutable(index);
}
inline ::gboss::AlarmInfo* GetHistoryInfo_ACK::add_alarms() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.alarms)
  return alarms_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >&
GetHistoryInfo_ACK::alarms() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.alarms)
  return alarms_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::AlarmInfo >*
GetHistoryInfo_ACK::mutable_alarms() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.alarms)
  return &alarms_;
}

// repeated .gboss.OBDInfo obds = 11;
inline int GetHistoryInfo_ACK::obds_size() const {
  return obds_.size();
}
inline void GetHistoryInfo_ACK::clear_obds() {
  obds_.Clear();
}
inline const ::gboss::OBDInfo& GetHistoryInfo_ACK::obds(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.obds)
  return obds_.Get(index);
}
inline ::gboss::OBDInfo* GetHistoryInfo_ACK::mutable_obds(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.obds)
  return obds_.Mutable(index);
}
inline ::gboss::OBDInfo* GetHistoryInfo_ACK::add_obds() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.obds)
  return obds_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >&
GetHistoryInfo_ACK::obds() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.obds)
  return obds_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::OBDInfo >*
GetHistoryInfo_ACK::mutable_obds() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.obds)
  return &obds_;
}

// repeated .gboss.DeliverUnitLoginOut unitloginout = 12;
inline int GetHistoryInfo_ACK::unitloginout_size() const {
  return unitloginout_.size();
}
inline void GetHistoryInfo_ACK::clear_unitloginout() {
  unitloginout_.Clear();
}
inline const ::gboss::DeliverUnitLoginOut& GetHistoryInfo_ACK::unitloginout(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistoryInfo_ACK.unitloginout)
  return unitloginout_.Get(index);
}
inline ::gboss::DeliverUnitLoginOut* GetHistoryInfo_ACK::mutable_unitloginout(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistoryInfo_ACK.unitloginout)
  return unitloginout_.Mutable(index);
}
inline ::gboss::DeliverUnitLoginOut* GetHistoryInfo_ACK::add_unitloginout() {
  // @@protoc_insertion_point(field_add:gboss.GetHistoryInfo_ACK.unitloginout)
  return unitloginout_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >&
GetHistoryInfo_ACK::unitloginout() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistoryInfo_ACK.unitloginout)
  return unitloginout_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::DeliverUnitLoginOut >*
GetHistoryInfo_ACK::mutable_unitloginout() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistoryInfo_ACK.unitloginout)
  return &unitloginout_;
}

// -------------------------------------------------------------------

// GetHistorySimpleGpsInfo_ACK

// required string callLetter = 1;
inline bool GetHistorySimpleGpsInfo_ACK::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetHistorySimpleGpsInfo_ACK::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& GetHistorySimpleGpsInfo_ACK::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistorySimpleGpsInfo_ACK.callLetter)
  return *callletter_;
}
inline void GetHistorySimpleGpsInfo_ACK::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistorySimpleGpsInfo_ACK.callLetter)
}
inline void GetHistorySimpleGpsInfo_ACK::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistorySimpleGpsInfo_ACK.callLetter)
}
inline void GetHistorySimpleGpsInfo_ACK::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistorySimpleGpsInfo_ACK.callLetter)
}
inline ::std::string* GetHistorySimpleGpsInfo_ACK::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistorySimpleGpsInfo_ACK.callLetter)
  return callletter_;
}
inline ::std::string* GetHistorySimpleGpsInfo_ACK::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistorySimpleGpsInfo_ACK::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistorySimpleGpsInfo_ACK.callLetter)
}

// required int32 retcode = 2;
inline bool GetHistorySimpleGpsInfo_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetHistorySimpleGpsInfo_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 GetHistorySimpleGpsInfo_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistorySimpleGpsInfo_ACK.retcode)
  return retcode_;
}
inline void GetHistorySimpleGpsInfo_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistorySimpleGpsInfo_ACK.retcode)
}

// optional string retmsg = 3;
inline bool GetHistorySimpleGpsInfo_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GetHistorySimpleGpsInfo_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& GetHistorySimpleGpsInfo_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistorySimpleGpsInfo_ACK.retmsg)
  return *retmsg_;
}
inline void GetHistorySimpleGpsInfo_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistorySimpleGpsInfo_ACK.retmsg)
}
inline void GetHistorySimpleGpsInfo_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistorySimpleGpsInfo_ACK.retmsg)
}
inline void GetHistorySimpleGpsInfo_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistorySimpleGpsInfo_ACK.retmsg)
}
inline ::std::string* GetHistorySimpleGpsInfo_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistorySimpleGpsInfo_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* GetHistorySimpleGpsInfo_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistorySimpleGpsInfo_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistorySimpleGpsInfo_ACK.retmsg)
}

// required bool lastPage = 4;
inline bool GetHistorySimpleGpsInfo_ACK::has_lastpage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GetHistorySimpleGpsInfo_ACK::set_has_lastpage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_has_lastpage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_lastpage() {
  lastpage_ = false;
  clear_has_lastpage();
}
inline bool GetHistorySimpleGpsInfo_ACK::lastpage() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistorySimpleGpsInfo_ACK.lastPage)
  return lastpage_;
}
inline void GetHistorySimpleGpsInfo_ACK::set_lastpage(bool value) {
  set_has_lastpage();
  lastpage_ = value;
  // @@protoc_insertion_point(field_set:gboss.GetHistorySimpleGpsInfo_ACK.lastPage)
}

// optional string sn = 5;
inline bool GetHistorySimpleGpsInfo_ACK::has_sn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GetHistorySimpleGpsInfo_ACK::set_has_sn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_has_sn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GetHistorySimpleGpsInfo_ACK::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& GetHistorySimpleGpsInfo_ACK::sn() const {
  // @@protoc_insertion_point(field_get:gboss.GetHistorySimpleGpsInfo_ACK.sn)
  return *sn_;
}
inline void GetHistorySimpleGpsInfo_ACK::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.GetHistorySimpleGpsInfo_ACK.sn)
}
inline void GetHistorySimpleGpsInfo_ACK::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.GetHistorySimpleGpsInfo_ACK.sn)
}
inline void GetHistorySimpleGpsInfo_ACK::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.GetHistorySimpleGpsInfo_ACK.sn)
}
inline ::std::string* GetHistorySimpleGpsInfo_ACK::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.GetHistorySimpleGpsInfo_ACK.sn)
  return sn_;
}
inline ::std::string* GetHistorySimpleGpsInfo_ACK::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void GetHistorySimpleGpsInfo_ACK::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.GetHistorySimpleGpsInfo_ACK.sn)
}

// repeated .gboss.GpsSimpleInfo gpses = 6;
inline int GetHistorySimpleGpsInfo_ACK::gpses_size() const {
  return gpses_.size();
}
inline void GetHistorySimpleGpsInfo_ACK::clear_gpses() {
  gpses_.Clear();
}
inline const ::gboss::GpsSimpleInfo& GetHistorySimpleGpsInfo_ACK::gpses(int index) const {
  // @@protoc_insertion_point(field_get:gboss.GetHistorySimpleGpsInfo_ACK.gpses)
  return gpses_.Get(index);
}
inline ::gboss::GpsSimpleInfo* GetHistorySimpleGpsInfo_ACK::mutable_gpses(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.GetHistorySimpleGpsInfo_ACK.gpses)
  return gpses_.Mutable(index);
}
inline ::gboss::GpsSimpleInfo* GetHistorySimpleGpsInfo_ACK::add_gpses() {
  // @@protoc_insertion_point(field_add:gboss.GetHistorySimpleGpsInfo_ACK.gpses)
  return gpses_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsSimpleInfo >&
GetHistorySimpleGpsInfo_ACK::gpses() const {
  // @@protoc_insertion_point(field_list:gboss.GetHistorySimpleGpsInfo_ACK.gpses)
  return gpses_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsSimpleInfo >*
GetHistorySimpleGpsInfo_ACK::mutable_gpses() {
  // @@protoc_insertion_point(field_mutable_list:gboss.GetHistorySimpleGpsInfo_ACK.gpses)
  return &gpses_;
}

// -------------------------------------------------------------------

// StopHistoryInfo

// required string callLetter = 1;
inline bool StopHistoryInfo::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopHistoryInfo::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopHistoryInfo::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopHistoryInfo::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& StopHistoryInfo::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo.callLetter)
  return *callletter_;
}
inline void StopHistoryInfo::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo.callLetter)
}
inline void StopHistoryInfo::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.StopHistoryInfo.callLetter)
}
inline void StopHistoryInfo::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.StopHistoryInfo.callLetter)
}
inline ::std::string* StopHistoryInfo::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.StopHistoryInfo.callLetter)
  return callletter_;
}
inline ::std::string* StopHistoryInfo::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StopHistoryInfo::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.StopHistoryInfo.callLetter)
}

// required int32 infoType = 2;
inline bool StopHistoryInfo::has_infotype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopHistoryInfo::set_has_infotype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopHistoryInfo::clear_has_infotype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopHistoryInfo::clear_infotype() {
  infotype_ = 0;
  clear_has_infotype();
}
inline ::google_public::protobuf::int32 StopHistoryInfo::infotype() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo.infoType)
  return infotype_;
}
inline void StopHistoryInfo::set_infotype(::google_public::protobuf::int32 value) {
  set_has_infotype();
  infotype_ = value;
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo.infoType)
}

// optional string sn = 3;
inline bool StopHistoryInfo::has_sn() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopHistoryInfo::set_has_sn() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopHistoryInfo::clear_has_sn() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopHistoryInfo::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& StopHistoryInfo::sn() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo.sn)
  return *sn_;
}
inline void StopHistoryInfo::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo.sn)
}
inline void StopHistoryInfo::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.StopHistoryInfo.sn)
}
inline void StopHistoryInfo::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.StopHistoryInfo.sn)
}
inline ::std::string* StopHistoryInfo::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.StopHistoryInfo.sn)
  return sn_;
}
inline ::std::string* StopHistoryInfo::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StopHistoryInfo::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.StopHistoryInfo.sn)
}

// -------------------------------------------------------------------

// StopHistoryInfo_ACK

// required string callLetter = 1;
inline bool StopHistoryInfo_ACK::has_callletter() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void StopHistoryInfo_ACK::set_has_callletter() {
  _has_bits_[0] |= 0x00000001u;
}
inline void StopHistoryInfo_ACK::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void StopHistoryInfo_ACK::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& StopHistoryInfo_ACK::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo_ACK.callLetter)
  return *callletter_;
}
inline void StopHistoryInfo_ACK::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo_ACK.callLetter)
}
inline void StopHistoryInfo_ACK::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.StopHistoryInfo_ACK.callLetter)
}
inline void StopHistoryInfo_ACK::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.StopHistoryInfo_ACK.callLetter)
}
inline ::std::string* StopHistoryInfo_ACK::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.StopHistoryInfo_ACK.callLetter)
  return callletter_;
}
inline ::std::string* StopHistoryInfo_ACK::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StopHistoryInfo_ACK::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.StopHistoryInfo_ACK.callLetter)
}

// required int32 infoType = 2;
inline bool StopHistoryInfo_ACK::has_infotype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StopHistoryInfo_ACK::set_has_infotype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StopHistoryInfo_ACK::clear_has_infotype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StopHistoryInfo_ACK::clear_infotype() {
  infotype_ = 0;
  clear_has_infotype();
}
inline ::google_public::protobuf::int32 StopHistoryInfo_ACK::infotype() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo_ACK.infoType)
  return infotype_;
}
inline void StopHistoryInfo_ACK::set_infotype(::google_public::protobuf::int32 value) {
  set_has_infotype();
  infotype_ = value;
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo_ACK.infoType)
}

// required int32 retcode = 3;
inline bool StopHistoryInfo_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StopHistoryInfo_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StopHistoryInfo_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StopHistoryInfo_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 StopHistoryInfo_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo_ACK.retcode)
  return retcode_;
}
inline void StopHistoryInfo_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo_ACK.retcode)
}

// optional string retmsg = 4;
inline bool StopHistoryInfo_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void StopHistoryInfo_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000008u;
}
inline void StopHistoryInfo_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void StopHistoryInfo_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& StopHistoryInfo_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo_ACK.retmsg)
  return *retmsg_;
}
inline void StopHistoryInfo_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo_ACK.retmsg)
}
inline void StopHistoryInfo_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.StopHistoryInfo_ACK.retmsg)
}
inline void StopHistoryInfo_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.StopHistoryInfo_ACK.retmsg)
}
inline ::std::string* StopHistoryInfo_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.StopHistoryInfo_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* StopHistoryInfo_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StopHistoryInfo_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.StopHistoryInfo_ACK.retmsg)
}

// optional string sn = 5;
inline bool StopHistoryInfo_ACK::has_sn() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void StopHistoryInfo_ACK::set_has_sn() {
  _has_bits_[0] |= 0x00000010u;
}
inline void StopHistoryInfo_ACK::clear_has_sn() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void StopHistoryInfo_ACK::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& StopHistoryInfo_ACK::sn() const {
  // @@protoc_insertion_point(field_get:gboss.StopHistoryInfo_ACK.sn)
  return *sn_;
}
inline void StopHistoryInfo_ACK::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.StopHistoryInfo_ACK.sn)
}
inline void StopHistoryInfo_ACK::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.StopHistoryInfo_ACK.sn)
}
inline void StopHistoryInfo_ACK::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.StopHistoryInfo_ACK.sn)
}
inline ::std::string* StopHistoryInfo_ACK::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.StopHistoryInfo_ACK.sn)
  return sn_;
}
inline ::std::string* StopHistoryInfo_ACK::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void StopHistoryInfo_ACK::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.StopHistoryInfo_ACK.sn)
}

// -------------------------------------------------------------------

// SendCommand

// required string sn = 1;
inline bool SendCommand::has_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendCommand::set_has_sn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendCommand::clear_has_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendCommand::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& SendCommand::sn() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand.sn)
  return *sn_;
}
inline void SendCommand::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommand.sn)
}
inline void SendCommand::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand.sn)
}
inline void SendCommand::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand.sn)
}
inline ::std::string* SendCommand::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand.sn)
  return sn_;
}
inline ::std::string* SendCommand::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommand::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommand.sn)
}

// repeated string callLetters = 2;
inline int SendCommand::callletters_size() const {
  return callletters_.size();
}
inline void SendCommand::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& SendCommand::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* SendCommand::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand.callLetters)
  return callletters_.Mutable(index);
}
inline void SendCommand::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.SendCommand.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void SendCommand::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand.callLetters)
}
inline void SendCommand::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand.callLetters)
}
inline ::std::string* SendCommand::add_callletters() {
  return callletters_.Add();
}
inline void SendCommand::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.SendCommand.callLetters)
}
inline void SendCommand::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.SendCommand.callLetters)
}
inline void SendCommand::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.SendCommand.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
SendCommand::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.SendCommand.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
SendCommand::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.SendCommand.callLetters)
  return &callletters_;
}

// required int32 cmdId = 3;
inline bool SendCommand::has_cmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendCommand::set_has_cmdid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendCommand::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendCommand::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google_public::protobuf::int32 SendCommand::cmdid() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand.cmdId)
  return cmdid_;
}
inline void SendCommand::set_cmdid(::google_public::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommand.cmdId)
}

// repeated string params = 4;
inline int SendCommand::params_size() const {
  return params_.size();
}
inline void SendCommand::clear_params() {
  params_.Clear();
}
inline const ::std::string& SendCommand::params(int index) const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand.params)
  return params_.Get(index);
}
inline ::std::string* SendCommand::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand.params)
  return params_.Mutable(index);
}
inline void SendCommand::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.SendCommand.params)
  params_.Mutable(index)->assign(value);
}
inline void SendCommand::set_params(int index, const char* value) {
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand.params)
}
inline void SendCommand::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand.params)
}
inline ::std::string* SendCommand::add_params() {
  return params_.Add();
}
inline void SendCommand::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.SendCommand.params)
}
inline void SendCommand::add_params(const char* value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.SendCommand.params)
}
inline void SendCommand::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.SendCommand.params)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
SendCommand::params() const {
  // @@protoc_insertion_point(field_list:gboss.SendCommand.params)
  return params_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
SendCommand::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:gboss.SendCommand.params)
  return &params_;
}

// optional string ackProxy = 5;
inline bool SendCommand::has_ackproxy() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendCommand::set_has_ackproxy() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendCommand::clear_has_ackproxy() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendCommand::clear_ackproxy() {
  if (ackproxy_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ackproxy_->clear();
  }
  clear_has_ackproxy();
}
inline const ::std::string& SendCommand::ackproxy() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand.ackProxy)
  return *ackproxy_;
}
inline void SendCommand::set_ackproxy(const ::std::string& value) {
  set_has_ackproxy();
  if (ackproxy_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ackproxy_ = new ::std::string;
  }
  ackproxy_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommand.ackProxy)
}
inline void SendCommand::set_ackproxy(const char* value) {
  set_has_ackproxy();
  if (ackproxy_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ackproxy_ = new ::std::string;
  }
  ackproxy_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand.ackProxy)
}
inline void SendCommand::set_ackproxy(const char* value, size_t size) {
  set_has_ackproxy();
  if (ackproxy_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ackproxy_ = new ::std::string;
  }
  ackproxy_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand.ackProxy)
}
inline ::std::string* SendCommand::mutable_ackproxy() {
  set_has_ackproxy();
  if (ackproxy_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    ackproxy_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand.ackProxy)
  return ackproxy_;
}
inline ::std::string* SendCommand::release_ackproxy() {
  clear_has_ackproxy();
  if (ackproxy_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = ackproxy_;
    ackproxy_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommand::set_allocated_ackproxy(::std::string* ackproxy) {
  if (ackproxy_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ackproxy_;
  }
  if (ackproxy) {
    set_has_ackproxy();
    ackproxy_ = ackproxy;
  } else {
    clear_has_ackproxy();
    ackproxy_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommand.ackProxy)
}

// optional int32 channelId = 6;
inline bool SendCommand::has_channelid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendCommand::set_has_channelid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendCommand::clear_has_channelid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendCommand::clear_channelid() {
  channelid_ = 0;
  clear_has_channelid();
}
inline ::google_public::protobuf::int32 SendCommand::channelid() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand.channelId)
  return channelid_;
}
inline void SendCommand::set_channelid(::google_public::protobuf::int32 value) {
  set_has_channelid();
  channelid_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommand.channelId)
}

// optional bool addmonitor = 7;
inline bool SendCommand::has_addmonitor() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendCommand::set_has_addmonitor() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendCommand::clear_has_addmonitor() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendCommand::clear_addmonitor() {
  addmonitor_ = false;
  clear_has_addmonitor();
}
inline bool SendCommand::addmonitor() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand.addmonitor)
  return addmonitor_;
}
inline void SendCommand::set_addmonitor(bool value) {
  set_has_addmonitor();
  addmonitor_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommand.addmonitor)
}

// -------------------------------------------------------------------

// SendCommandSend_ACK

// required string sn = 1;
inline bool SendCommandSend_ACK::has_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendCommandSend_ACK::set_has_sn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendCommandSend_ACK::clear_has_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendCommandSend_ACK::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& SendCommandSend_ACK::sn() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommandSend_ACK.sn)
  return *sn_;
}
inline void SendCommandSend_ACK::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommandSend_ACK.sn)
}
inline void SendCommandSend_ACK::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommandSend_ACK.sn)
}
inline void SendCommandSend_ACK::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommandSend_ACK.sn)
}
inline ::std::string* SendCommandSend_ACK::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommandSend_ACK.sn)
  return sn_;
}
inline ::std::string* SendCommandSend_ACK::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommandSend_ACK::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommandSend_ACK.sn)
}

// required string callLetter = 2;
inline bool SendCommandSend_ACK::has_callletter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendCommandSend_ACK::set_has_callletter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendCommandSend_ACK::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendCommandSend_ACK::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& SendCommandSend_ACK::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommandSend_ACK.callLetter)
  return *callletter_;
}
inline void SendCommandSend_ACK::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommandSend_ACK.callLetter)
}
inline void SendCommandSend_ACK::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommandSend_ACK.callLetter)
}
inline void SendCommandSend_ACK::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommandSend_ACK.callLetter)
}
inline ::std::string* SendCommandSend_ACK::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommandSend_ACK.callLetter)
  return callletter_;
}
inline ::std::string* SendCommandSend_ACK::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommandSend_ACK::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommandSend_ACK.callLetter)
}

// required int32 cmdId = 3;
inline bool SendCommandSend_ACK::has_cmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendCommandSend_ACK::set_has_cmdid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendCommandSend_ACK::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendCommandSend_ACK::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google_public::protobuf::int32 SendCommandSend_ACK::cmdid() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommandSend_ACK.cmdId)
  return cmdid_;
}
inline void SendCommandSend_ACK::set_cmdid(::google_public::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommandSend_ACK.cmdId)
}

// required int32 retcode = 4;
inline bool SendCommandSend_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendCommandSend_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendCommandSend_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendCommandSend_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 SendCommandSend_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommandSend_ACK.retcode)
  return retcode_;
}
inline void SendCommandSend_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommandSend_ACK.retcode)
}

// optional string retmsg = 5;
inline bool SendCommandSend_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SendCommandSend_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SendCommandSend_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SendCommandSend_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& SendCommandSend_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommandSend_ACK.retmsg)
  return *retmsg_;
}
inline void SendCommandSend_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommandSend_ACK.retmsg)
}
inline void SendCommandSend_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommandSend_ACK.retmsg)
}
inline void SendCommandSend_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommandSend_ACK.retmsg)
}
inline ::std::string* SendCommandSend_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommandSend_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* SendCommandSend_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommandSend_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommandSend_ACK.retmsg)
}

// optional int32 unitsn = 6;
inline bool SendCommandSend_ACK::has_unitsn() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SendCommandSend_ACK::set_has_unitsn() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SendCommandSend_ACK::clear_has_unitsn() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SendCommandSend_ACK::clear_unitsn() {
  unitsn_ = 0;
  clear_has_unitsn();
}
inline ::google_public::protobuf::int32 SendCommandSend_ACK::unitsn() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommandSend_ACK.unitsn)
  return unitsn_;
}
inline void SendCommandSend_ACK::set_unitsn(::google_public::protobuf::int32 value) {
  set_has_unitsn();
  unitsn_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommandSend_ACK.unitsn)
}

// -------------------------------------------------------------------

// SendCommand_ACK

// required string sn = 1;
inline bool SendCommand_ACK::has_sn() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SendCommand_ACK::set_has_sn() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SendCommand_ACK::clear_has_sn() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SendCommand_ACK::clear_sn() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_->clear();
  }
  clear_has_sn();
}
inline const ::std::string& SendCommand_ACK::sn() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.sn)
  return *sn_;
}
inline void SendCommand_ACK::set_sn(const ::std::string& value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommand_ACK.sn)
}
inline void SendCommand_ACK::set_sn(const char* value) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand_ACK.sn)
}
inline void SendCommand_ACK::set_sn(const char* value, size_t size) {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  sn_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand_ACK.sn)
}
inline ::std::string* SendCommand_ACK::mutable_sn() {
  set_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    sn_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand_ACK.sn)
  return sn_;
}
inline ::std::string* SendCommand_ACK::release_sn() {
  clear_has_sn();
  if (sn_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = sn_;
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommand_ACK::set_allocated_sn(::std::string* sn) {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (sn) {
    set_has_sn();
    sn_ = sn;
  } else {
    clear_has_sn();
    sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommand_ACK.sn)
}

// required string callLetter = 2;
inline bool SendCommand_ACK::has_callletter() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SendCommand_ACK::set_has_callletter() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SendCommand_ACK::clear_has_callletter() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SendCommand_ACK::clear_callletter() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_->clear();
  }
  clear_has_callletter();
}
inline const ::std::string& SendCommand_ACK::callletter() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.callLetter)
  return *callletter_;
}
inline void SendCommand_ACK::set_callletter(const ::std::string& value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommand_ACK.callLetter)
}
inline void SendCommand_ACK::set_callletter(const char* value) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand_ACK.callLetter)
}
inline void SendCommand_ACK::set_callletter(const char* value, size_t size) {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  callletter_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand_ACK.callLetter)
}
inline ::std::string* SendCommand_ACK::mutable_callletter() {
  set_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    callletter_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand_ACK.callLetter)
  return callletter_;
}
inline ::std::string* SendCommand_ACK::release_callletter() {
  clear_has_callletter();
  if (callletter_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = callletter_;
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommand_ACK::set_allocated_callletter(::std::string* callletter) {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (callletter) {
    set_has_callletter();
    callletter_ = callletter;
  } else {
    clear_has_callletter();
    callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommand_ACK.callLetter)
}

// required int32 cmdId = 3;
inline bool SendCommand_ACK::has_cmdid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SendCommand_ACK::set_has_cmdid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SendCommand_ACK::clear_has_cmdid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SendCommand_ACK::clear_cmdid() {
  cmdid_ = 0;
  clear_has_cmdid();
}
inline ::google_public::protobuf::int32 SendCommand_ACK::cmdid() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.cmdId)
  return cmdid_;
}
inline void SendCommand_ACK::set_cmdid(::google_public::protobuf::int32 value) {
  set_has_cmdid();
  cmdid_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommand_ACK.cmdId)
}

// required int32 retcode = 4;
inline bool SendCommand_ACK::has_retcode() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SendCommand_ACK::set_has_retcode() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SendCommand_ACK::clear_has_retcode() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SendCommand_ACK::clear_retcode() {
  retcode_ = 0;
  clear_has_retcode();
}
inline ::google_public::protobuf::int32 SendCommand_ACK::retcode() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.retcode)
  return retcode_;
}
inline void SendCommand_ACK::set_retcode(::google_public::protobuf::int32 value) {
  set_has_retcode();
  retcode_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommand_ACK.retcode)
}

// repeated string params = 5;
inline int SendCommand_ACK::params_size() const {
  return params_.size();
}
inline void SendCommand_ACK::clear_params() {
  params_.Clear();
}
inline const ::std::string& SendCommand_ACK::params(int index) const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.params)
  return params_.Get(index);
}
inline ::std::string* SendCommand_ACK::mutable_params(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand_ACK.params)
  return params_.Mutable(index);
}
inline void SendCommand_ACK::set_params(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.SendCommand_ACK.params)
  params_.Mutable(index)->assign(value);
}
inline void SendCommand_ACK::set_params(int index, const char* value) {
  params_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand_ACK.params)
}
inline void SendCommand_ACK::set_params(int index, const char* value, size_t size) {
  params_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand_ACK.params)
}
inline ::std::string* SendCommand_ACK::add_params() {
  return params_.Add();
}
inline void SendCommand_ACK::add_params(const ::std::string& value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.SendCommand_ACK.params)
}
inline void SendCommand_ACK::add_params(const char* value) {
  params_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.SendCommand_ACK.params)
}
inline void SendCommand_ACK::add_params(const char* value, size_t size) {
  params_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.SendCommand_ACK.params)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
SendCommand_ACK::params() const {
  // @@protoc_insertion_point(field_list:gboss.SendCommand_ACK.params)
  return params_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
SendCommand_ACK::mutable_params() {
  // @@protoc_insertion_point(field_mutable_list:gboss.SendCommand_ACK.params)
  return &params_;
}

// repeated .gboss.GpsInfo gpsInfo = 6;
inline int SendCommand_ACK::gpsinfo_size() const {
  return gpsinfo_.size();
}
inline void SendCommand_ACK::clear_gpsinfo() {
  gpsinfo_.Clear();
}
inline const ::gboss::GpsInfo& SendCommand_ACK::gpsinfo(int index) const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.gpsInfo)
  return gpsinfo_.Get(index);
}
inline ::gboss::GpsInfo* SendCommand_ACK::mutable_gpsinfo(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand_ACK.gpsInfo)
  return gpsinfo_.Mutable(index);
}
inline ::gboss::GpsInfo* SendCommand_ACK::add_gpsinfo() {
  // @@protoc_insertion_point(field_add:gboss.SendCommand_ACK.gpsInfo)
  return gpsinfo_.Add();
}
inline const ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >&
SendCommand_ACK::gpsinfo() const {
  // @@protoc_insertion_point(field_list:gboss.SendCommand_ACK.gpsInfo)
  return gpsinfo_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::gboss::GpsInfo >*
SendCommand_ACK::mutable_gpsinfo() {
  // @@protoc_insertion_point(field_mutable_list:gboss.SendCommand_ACK.gpsInfo)
  return &gpsinfo_;
}

// optional string retmsg = 7;
inline bool SendCommand_ACK::has_retmsg() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SendCommand_ACK::set_has_retmsg() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SendCommand_ACK::clear_has_retmsg() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SendCommand_ACK::clear_retmsg() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_->clear();
  }
  clear_has_retmsg();
}
inline const ::std::string& SendCommand_ACK::retmsg() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.retmsg)
  return *retmsg_;
}
inline void SendCommand_ACK::set_retmsg(const ::std::string& value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.SendCommand_ACK.retmsg)
}
inline void SendCommand_ACK::set_retmsg(const char* value) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.SendCommand_ACK.retmsg)
}
inline void SendCommand_ACK::set_retmsg(const char* value, size_t size) {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  retmsg_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.SendCommand_ACK.retmsg)
}
inline ::std::string* SendCommand_ACK::mutable_retmsg() {
  set_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    retmsg_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.SendCommand_ACK.retmsg)
  return retmsg_;
}
inline ::std::string* SendCommand_ACK::release_retmsg() {
  clear_has_retmsg();
  if (retmsg_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = retmsg_;
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void SendCommand_ACK::set_allocated_retmsg(::std::string* retmsg) {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (retmsg) {
    set_has_retmsg();
    retmsg_ = retmsg;
  } else {
    clear_has_retmsg();
    retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.SendCommand_ACK.retmsg)
}

// optional int32 unitsn = 8;
inline bool SendCommand_ACK::has_unitsn() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SendCommand_ACK::set_has_unitsn() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SendCommand_ACK::clear_has_unitsn() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SendCommand_ACK::clear_unitsn() {
  unitsn_ = 0;
  clear_has_unitsn();
}
inline ::google_public::protobuf::int32 SendCommand_ACK::unitsn() const {
  // @@protoc_insertion_point(field_get:gboss.SendCommand_ACK.unitsn)
  return unitsn_;
}
inline void SendCommand_ACK::set_unitsn(::google_public::protobuf::int32 value) {
  set_has_unitsn();
  unitsn_ = value;
  // @@protoc_insertion_point(field_set:gboss.SendCommand_ACK.unitsn)
}

// -------------------------------------------------------------------

// DeliverGPS

// required .gboss.GpsInfo gpsinfo = 1;
inline bool DeliverGPS::has_gpsinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverGPS::set_has_gpsinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverGPS::clear_has_gpsinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverGPS::clear_gpsinfo() {
  if (gpsinfo_ != NULL) gpsinfo_->::gboss::GpsInfo::Clear();
  clear_has_gpsinfo();
}
inline const ::gboss::GpsInfo& DeliverGPS::gpsinfo() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverGPS.gpsinfo)
  return gpsinfo_ != NULL ? *gpsinfo_ : *default_instance_->gpsinfo_;
}
inline ::gboss::GpsInfo* DeliverGPS::mutable_gpsinfo() {
  set_has_gpsinfo();
  if (gpsinfo_ == NULL) gpsinfo_ = new ::gboss::GpsInfo;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverGPS.gpsinfo)
  return gpsinfo_;
}
inline ::gboss::GpsInfo* DeliverGPS::release_gpsinfo() {
  clear_has_gpsinfo();
  ::gboss::GpsInfo* temp = gpsinfo_;
  gpsinfo_ = NULL;
  return temp;
}
inline void DeliverGPS::set_allocated_gpsinfo(::gboss::GpsInfo* gpsinfo) {
  delete gpsinfo_;
  gpsinfo_ = gpsinfo;
  if (gpsinfo) {
    set_has_gpsinfo();
  } else {
    clear_has_gpsinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverGPS.gpsinfo)
}

// optional int32 gatewayid = 2;
inline bool DeliverGPS::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverGPS::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverGPS::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverGPS::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverGPS::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverGPS.gatewayid)
  return gatewayid_;
}
inline void DeliverGPS::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverGPS.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverGPS::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverGPS::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverGPS::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverGPS::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverGPS::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverGPS.gatewaytype)
  return gatewaytype_;
}
inline void DeliverGPS::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverGPS.gatewaytype)
}

// optional int32 alarmid = 4;
inline bool DeliverGPS::has_alarmid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void DeliverGPS::set_has_alarmid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void DeliverGPS::clear_has_alarmid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void DeliverGPS::clear_alarmid() {
  alarmid_ = 0;
  clear_has_alarmid();
}
inline ::google_public::protobuf::int32 DeliverGPS::alarmid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverGPS.alarmid)
  return alarmid_;
}
inline void DeliverGPS::set_alarmid(::google_public::protobuf::int32 value) {
  set_has_alarmid();
  alarmid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverGPS.alarmid)
}

// optional string alarmname = 5;
inline bool DeliverGPS::has_alarmname() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void DeliverGPS::set_has_alarmname() {
  _has_bits_[0] |= 0x00000010u;
}
inline void DeliverGPS::clear_has_alarmname() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void DeliverGPS::clear_alarmname() {
  if (alarmname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_->clear();
  }
  clear_has_alarmname();
}
inline const ::std::string& DeliverGPS::alarmname() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverGPS.alarmname)
  return *alarmname_;
}
inline void DeliverGPS::set_alarmname(const ::std::string& value) {
  set_has_alarmname();
  if (alarmname_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  alarmname_->assign(value);
  // @@protoc_insertion_point(field_set:gboss.DeliverGPS.alarmname)
}
inline void DeliverGPS::set_alarmname(const char* value) {
  set_has_alarmname();
  if (alarmname_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  alarmname_->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.DeliverGPS.alarmname)
}
inline void DeliverGPS::set_alarmname(const char* value, size_t size) {
  set_has_alarmname();
  if (alarmname_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  alarmname_->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.DeliverGPS.alarmname)
}
inline ::std::string* DeliverGPS::mutable_alarmname() {
  set_has_alarmname();
  if (alarmname_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    alarmname_ = new ::std::string;
  }
  // @@protoc_insertion_point(field_mutable:gboss.DeliverGPS.alarmname)
  return alarmname_;
}
inline ::std::string* DeliverGPS::release_alarmname() {
  clear_has_alarmname();
  if (alarmname_ == &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    return NULL;
  } else {
    ::std::string* temp = alarmname_;
    alarmname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
    return temp;
  }
}
inline void DeliverGPS::set_allocated_alarmname(::std::string* alarmname) {
  if (alarmname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmname_;
  }
  if (alarmname) {
    set_has_alarmname();
    alarmname_ = alarmname;
  } else {
    clear_has_alarmname();
    alarmname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverGPS.alarmname)
}

// -------------------------------------------------------------------

// DeliverAlarm

// required .gboss.AlarmInfo alarminfo = 1;
inline bool DeliverAlarm::has_alarminfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverAlarm::set_has_alarminfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverAlarm::clear_has_alarminfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverAlarm::clear_alarminfo() {
  if (alarminfo_ != NULL) alarminfo_->::gboss::AlarmInfo::Clear();
  clear_has_alarminfo();
}
inline const ::gboss::AlarmInfo& DeliverAlarm::alarminfo() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverAlarm.alarminfo)
  return alarminfo_ != NULL ? *alarminfo_ : *default_instance_->alarminfo_;
}
inline ::gboss::AlarmInfo* DeliverAlarm::mutable_alarminfo() {
  set_has_alarminfo();
  if (alarminfo_ == NULL) alarminfo_ = new ::gboss::AlarmInfo;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverAlarm.alarminfo)
  return alarminfo_;
}
inline ::gboss::AlarmInfo* DeliverAlarm::release_alarminfo() {
  clear_has_alarminfo();
  ::gboss::AlarmInfo* temp = alarminfo_;
  alarminfo_ = NULL;
  return temp;
}
inline void DeliverAlarm::set_allocated_alarminfo(::gboss::AlarmInfo* alarminfo) {
  delete alarminfo_;
  alarminfo_ = alarminfo;
  if (alarminfo) {
    set_has_alarminfo();
  } else {
    clear_has_alarminfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverAlarm.alarminfo)
}

// optional int32 gatewayid = 2;
inline bool DeliverAlarm::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverAlarm::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverAlarm::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverAlarm::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverAlarm::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverAlarm.gatewayid)
  return gatewayid_;
}
inline void DeliverAlarm::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverAlarm.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverAlarm::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverAlarm::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverAlarm::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverAlarm::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverAlarm::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverAlarm.gatewaytype)
  return gatewaytype_;
}
inline void DeliverAlarm::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverAlarm.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverOperateData

// required .gboss.OperateData data = 1;
inline bool DeliverOperateData::has_data() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverOperateData::set_has_data() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverOperateData::clear_has_data() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverOperateData::clear_data() {
  if (data_ != NULL) data_->::gboss::OperateData::Clear();
  clear_has_data();
}
inline const ::gboss::OperateData& DeliverOperateData::data() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverOperateData.data)
  return data_ != NULL ? *data_ : *default_instance_->data_;
}
inline ::gboss::OperateData* DeliverOperateData::mutable_data() {
  set_has_data();
  if (data_ == NULL) data_ = new ::gboss::OperateData;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverOperateData.data)
  return data_;
}
inline ::gboss::OperateData* DeliverOperateData::release_data() {
  clear_has_data();
  ::gboss::OperateData* temp = data_;
  data_ = NULL;
  return temp;
}
inline void DeliverOperateData::set_allocated_data(::gboss::OperateData* data) {
  delete data_;
  data_ = data;
  if (data) {
    set_has_data();
  } else {
    clear_has_data();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverOperateData.data)
}

// optional int32 gatewayid = 2;
inline bool DeliverOperateData::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverOperateData::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverOperateData::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverOperateData::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverOperateData::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverOperateData.gatewayid)
  return gatewayid_;
}
inline void DeliverOperateData::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverOperateData.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverOperateData::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverOperateData::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverOperateData::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverOperateData::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverOperateData::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverOperateData.gatewaytype)
  return gatewaytype_;
}
inline void DeliverOperateData::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverOperateData.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverSMS

// required .gboss.ShortMessage msg = 1;
inline bool DeliverSMS::has_msg() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverSMS::set_has_msg() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverSMS::clear_has_msg() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverSMS::clear_msg() {
  if (msg_ != NULL) msg_->::gboss::ShortMessage::Clear();
  clear_has_msg();
}
inline const ::gboss::ShortMessage& DeliverSMS::msg() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverSMS.msg)
  return msg_ != NULL ? *msg_ : *default_instance_->msg_;
}
inline ::gboss::ShortMessage* DeliverSMS::mutable_msg() {
  set_has_msg();
  if (msg_ == NULL) msg_ = new ::gboss::ShortMessage;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverSMS.msg)
  return msg_;
}
inline ::gboss::ShortMessage* DeliverSMS::release_msg() {
  clear_has_msg();
  ::gboss::ShortMessage* temp = msg_;
  msg_ = NULL;
  return temp;
}
inline void DeliverSMS::set_allocated_msg(::gboss::ShortMessage* msg) {
  delete msg_;
  msg_ = msg;
  if (msg) {
    set_has_msg();
  } else {
    clear_has_msg();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverSMS.msg)
}

// optional int32 gatewayid = 2;
inline bool DeliverSMS::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverSMS::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverSMS::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverSMS::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverSMS::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverSMS.gatewayid)
  return gatewayid_;
}
inline void DeliverSMS::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverSMS.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverSMS::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverSMS::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverSMS::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverSMS::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverSMS::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverSMS.gatewaytype)
  return gatewaytype_;
}
inline void DeliverSMS::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverSMS.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverTravel

// required .gboss.TravelInfo travelinfo = 1;
inline bool DeliverTravel::has_travelinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverTravel::set_has_travelinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverTravel::clear_has_travelinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverTravel::clear_travelinfo() {
  if (travelinfo_ != NULL) travelinfo_->::gboss::TravelInfo::Clear();
  clear_has_travelinfo();
}
inline const ::gboss::TravelInfo& DeliverTravel::travelinfo() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverTravel.travelinfo)
  return travelinfo_ != NULL ? *travelinfo_ : *default_instance_->travelinfo_;
}
inline ::gboss::TravelInfo* DeliverTravel::mutable_travelinfo() {
  set_has_travelinfo();
  if (travelinfo_ == NULL) travelinfo_ = new ::gboss::TravelInfo;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverTravel.travelinfo)
  return travelinfo_;
}
inline ::gboss::TravelInfo* DeliverTravel::release_travelinfo() {
  clear_has_travelinfo();
  ::gboss::TravelInfo* temp = travelinfo_;
  travelinfo_ = NULL;
  return temp;
}
inline void DeliverTravel::set_allocated_travelinfo(::gboss::TravelInfo* travelinfo) {
  delete travelinfo_;
  travelinfo_ = travelinfo;
  if (travelinfo) {
    set_has_travelinfo();
  } else {
    clear_has_travelinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverTravel.travelinfo)
}

// optional int32 gatewayid = 2;
inline bool DeliverTravel::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverTravel::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverTravel::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverTravel::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverTravel::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverTravel.gatewayid)
  return gatewayid_;
}
inline void DeliverTravel::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverTravel.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverTravel::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverTravel::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverTravel::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverTravel::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverTravel::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverTravel.gatewaytype)
  return gatewaytype_;
}
inline void DeliverTravel::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverTravel.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverFault

// required .gboss.FaultInfo faultinfo = 1;
inline bool DeliverFault::has_faultinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverFault::set_has_faultinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverFault::clear_has_faultinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverFault::clear_faultinfo() {
  if (faultinfo_ != NULL) faultinfo_->::gboss::FaultInfo::Clear();
  clear_has_faultinfo();
}
inline const ::gboss::FaultInfo& DeliverFault::faultinfo() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverFault.faultinfo)
  return faultinfo_ != NULL ? *faultinfo_ : *default_instance_->faultinfo_;
}
inline ::gboss::FaultInfo* DeliverFault::mutable_faultinfo() {
  set_has_faultinfo();
  if (faultinfo_ == NULL) faultinfo_ = new ::gboss::FaultInfo;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverFault.faultinfo)
  return faultinfo_;
}
inline ::gboss::FaultInfo* DeliverFault::release_faultinfo() {
  clear_has_faultinfo();
  ::gboss::FaultInfo* temp = faultinfo_;
  faultinfo_ = NULL;
  return temp;
}
inline void DeliverFault::set_allocated_faultinfo(::gboss::FaultInfo* faultinfo) {
  delete faultinfo_;
  faultinfo_ = faultinfo;
  if (faultinfo) {
    set_has_faultinfo();
  } else {
    clear_has_faultinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverFault.faultinfo)
}

// optional int32 gatewayid = 2;
inline bool DeliverFault::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverFault::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverFault::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverFault::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverFault::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverFault.gatewayid)
  return gatewayid_;
}
inline void DeliverFault::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverFault.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverFault::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverFault::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverFault::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverFault::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverFault::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverFault.gatewaytype)
  return gatewaytype_;
}
inline void DeliverFault::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverFault.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverOBD

// required .gboss.OBDInfo obdinfo = 1;
inline bool DeliverOBD::has_obdinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverOBD::set_has_obdinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverOBD::clear_has_obdinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverOBD::clear_obdinfo() {
  if (obdinfo_ != NULL) obdinfo_->::gboss::OBDInfo::Clear();
  clear_has_obdinfo();
}
inline const ::gboss::OBDInfo& DeliverOBD::obdinfo() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverOBD.obdinfo)
  return obdinfo_ != NULL ? *obdinfo_ : *default_instance_->obdinfo_;
}
inline ::gboss::OBDInfo* DeliverOBD::mutable_obdinfo() {
  set_has_obdinfo();
  if (obdinfo_ == NULL) obdinfo_ = new ::gboss::OBDInfo;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverOBD.obdinfo)
  return obdinfo_;
}
inline ::gboss::OBDInfo* DeliverOBD::release_obdinfo() {
  clear_has_obdinfo();
  ::gboss::OBDInfo* temp = obdinfo_;
  obdinfo_ = NULL;
  return temp;
}
inline void DeliverOBD::set_allocated_obdinfo(::gboss::OBDInfo* obdinfo) {
  delete obdinfo_;
  obdinfo_ = obdinfo;
  if (obdinfo) {
    set_has_obdinfo();
  } else {
    clear_has_obdinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverOBD.obdinfo)
}

// optional int32 gatewayid = 2;
inline bool DeliverOBD::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverOBD::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverOBD::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverOBD::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverOBD::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverOBD.gatewayid)
  return gatewayid_;
}
inline void DeliverOBD::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverOBD.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverOBD::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverOBD::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverOBD::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverOBD::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverOBD::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverOBD.gatewaytype)
  return gatewaytype_;
}
inline void DeliverOBD::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverOBD.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverAppNotice

// required .gboss.AppNoticeInfo noticeinfo = 1;
inline bool DeliverAppNotice::has_noticeinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverAppNotice::set_has_noticeinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverAppNotice::clear_has_noticeinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverAppNotice::clear_noticeinfo() {
  if (noticeinfo_ != NULL) noticeinfo_->::gboss::AppNoticeInfo::Clear();
  clear_has_noticeinfo();
}
inline const ::gboss::AppNoticeInfo& DeliverAppNotice::noticeinfo() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverAppNotice.noticeinfo)
  return noticeinfo_ != NULL ? *noticeinfo_ : *default_instance_->noticeinfo_;
}
inline ::gboss::AppNoticeInfo* DeliverAppNotice::mutable_noticeinfo() {
  set_has_noticeinfo();
  if (noticeinfo_ == NULL) noticeinfo_ = new ::gboss::AppNoticeInfo;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverAppNotice.noticeinfo)
  return noticeinfo_;
}
inline ::gboss::AppNoticeInfo* DeliverAppNotice::release_noticeinfo() {
  clear_has_noticeinfo();
  ::gboss::AppNoticeInfo* temp = noticeinfo_;
  noticeinfo_ = NULL;
  return temp;
}
inline void DeliverAppNotice::set_allocated_noticeinfo(::gboss::AppNoticeInfo* noticeinfo) {
  delete noticeinfo_;
  noticeinfo_ = noticeinfo;
  if (noticeinfo) {
    set_has_noticeinfo();
  } else {
    clear_has_noticeinfo();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverAppNotice.noticeinfo)
}

// optional int32 gatewayid = 2;
inline bool DeliverAppNotice::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverAppNotice::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverAppNotice::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverAppNotice::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverAppNotice::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverAppNotice.gatewayid)
  return gatewayid_;
}
inline void DeliverAppNotice::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverAppNotice.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverAppNotice::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverAppNotice::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverAppNotice::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverAppNotice::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverAppNotice::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverAppNotice.gatewaytype)
  return gatewaytype_;
}
inline void DeliverAppNotice::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverAppNotice.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverUnitVersion

// required .gboss.UnitVersion unitVersion = 1;
inline bool DeliverUnitVersion::has_unitversion() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverUnitVersion::set_has_unitversion() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverUnitVersion::clear_has_unitversion() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverUnitVersion::clear_unitversion() {
  if (unitversion_ != NULL) unitversion_->::gboss::UnitVersion::Clear();
  clear_has_unitversion();
}
inline const ::gboss::UnitVersion& DeliverUnitVersion::unitversion() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitVersion.unitVersion)
  return unitversion_ != NULL ? *unitversion_ : *default_instance_->unitversion_;
}
inline ::gboss::UnitVersion* DeliverUnitVersion::mutable_unitversion() {
  set_has_unitversion();
  if (unitversion_ == NULL) unitversion_ = new ::gboss::UnitVersion;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverUnitVersion.unitVersion)
  return unitversion_;
}
inline ::gboss::UnitVersion* DeliverUnitVersion::release_unitversion() {
  clear_has_unitversion();
  ::gboss::UnitVersion* temp = unitversion_;
  unitversion_ = NULL;
  return temp;
}
inline void DeliverUnitVersion::set_allocated_unitversion(::gboss::UnitVersion* unitversion) {
  delete unitversion_;
  unitversion_ = unitversion;
  if (unitversion) {
    set_has_unitversion();
  } else {
    clear_has_unitversion();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverUnitVersion.unitVersion)
}

// optional int32 gatewayid = 2;
inline bool DeliverUnitVersion::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverUnitVersion::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverUnitVersion::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverUnitVersion::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverUnitVersion::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitVersion.gatewayid)
  return gatewayid_;
}
inline void DeliverUnitVersion::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitVersion.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverUnitVersion::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverUnitVersion::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverUnitVersion::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverUnitVersion::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverUnitVersion::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverUnitVersion.gatewaytype)
  return gatewaytype_;
}
inline void DeliverUnitVersion::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverUnitVersion.gatewaytype)
}

// -------------------------------------------------------------------

// DeliverECUConfig

// required .gboss.ECUConfig ecuConfig = 1;
inline bool DeliverECUConfig::has_ecuconfig() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeliverECUConfig::set_has_ecuconfig() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeliverECUConfig::clear_has_ecuconfig() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeliverECUConfig::clear_ecuconfig() {
  if (ecuconfig_ != NULL) ecuconfig_->::gboss::ECUConfig::Clear();
  clear_has_ecuconfig();
}
inline const ::gboss::ECUConfig& DeliverECUConfig::ecuconfig() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverECUConfig.ecuConfig)
  return ecuconfig_ != NULL ? *ecuconfig_ : *default_instance_->ecuconfig_;
}
inline ::gboss::ECUConfig* DeliverECUConfig::mutable_ecuconfig() {
  set_has_ecuconfig();
  if (ecuconfig_ == NULL) ecuconfig_ = new ::gboss::ECUConfig;
  // @@protoc_insertion_point(field_mutable:gboss.DeliverECUConfig.ecuConfig)
  return ecuconfig_;
}
inline ::gboss::ECUConfig* DeliverECUConfig::release_ecuconfig() {
  clear_has_ecuconfig();
  ::gboss::ECUConfig* temp = ecuconfig_;
  ecuconfig_ = NULL;
  return temp;
}
inline void DeliverECUConfig::set_allocated_ecuconfig(::gboss::ECUConfig* ecuconfig) {
  delete ecuconfig_;
  ecuconfig_ = ecuconfig;
  if (ecuconfig) {
    set_has_ecuconfig();
  } else {
    clear_has_ecuconfig();
  }
  // @@protoc_insertion_point(field_set_allocated:gboss.DeliverECUConfig.ecuConfig)
}

// optional int32 gatewayid = 2;
inline bool DeliverECUConfig::has_gatewayid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeliverECUConfig::set_has_gatewayid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeliverECUConfig::clear_has_gatewayid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeliverECUConfig::clear_gatewayid() {
  gatewayid_ = 0;
  clear_has_gatewayid();
}
inline ::google_public::protobuf::int32 DeliverECUConfig::gatewayid() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverECUConfig.gatewayid)
  return gatewayid_;
}
inline void DeliverECUConfig::set_gatewayid(::google_public::protobuf::int32 value) {
  set_has_gatewayid();
  gatewayid_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverECUConfig.gatewayid)
}

// optional int32 gatewaytype = 3;
inline bool DeliverECUConfig::has_gatewaytype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeliverECUConfig::set_has_gatewaytype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeliverECUConfig::clear_has_gatewaytype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeliverECUConfig::clear_gatewaytype() {
  gatewaytype_ = 0;
  clear_has_gatewaytype();
}
inline ::google_public::protobuf::int32 DeliverECUConfig::gatewaytype() const {
  // @@protoc_insertion_point(field_get:gboss.DeliverECUConfig.gatewaytype)
  return gatewaytype_;
}
inline void DeliverECUConfig::set_gatewaytype(::google_public::protobuf::int32 value) {
  set_has_gatewaytype();
  gatewaytype_ = value;
  // @@protoc_insertion_point(field_set:gboss.DeliverECUConfig.gatewaytype)
}

// -------------------------------------------------------------------

// TestDeliver

// required int32 infoType = 1;
inline bool TestDeliver::has_infotype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TestDeliver::set_has_infotype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TestDeliver::clear_has_infotype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TestDeliver::clear_infotype() {
  infotype_ = 0;
  clear_has_infotype();
}
inline ::google_public::protobuf::int32 TestDeliver::infotype() const {
  // @@protoc_insertion_point(field_get:gboss.TestDeliver.infoType)
  return infotype_;
}
inline void TestDeliver::set_infotype(::google_public::protobuf::int32 value) {
  set_has_infotype();
  infotype_ = value;
  // @@protoc_insertion_point(field_set:gboss.TestDeliver.infoType)
}

// repeated string callLetters = 2;
inline int TestDeliver::callletters_size() const {
  return callletters_.size();
}
inline void TestDeliver::clear_callletters() {
  callletters_.Clear();
}
inline const ::std::string& TestDeliver::callletters(int index) const {
  // @@protoc_insertion_point(field_get:gboss.TestDeliver.callLetters)
  return callletters_.Get(index);
}
inline ::std::string* TestDeliver::mutable_callletters(int index) {
  // @@protoc_insertion_point(field_mutable:gboss.TestDeliver.callLetters)
  return callletters_.Mutable(index);
}
inline void TestDeliver::set_callletters(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:gboss.TestDeliver.callLetters)
  callletters_.Mutable(index)->assign(value);
}
inline void TestDeliver::set_callletters(int index, const char* value) {
  callletters_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:gboss.TestDeliver.callLetters)
}
inline void TestDeliver::set_callletters(int index, const char* value, size_t size) {
  callletters_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:gboss.TestDeliver.callLetters)
}
inline ::std::string* TestDeliver::add_callletters() {
  return callletters_.Add();
}
inline void TestDeliver::add_callletters(const ::std::string& value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:gboss.TestDeliver.callLetters)
}
inline void TestDeliver::add_callletters(const char* value) {
  callletters_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:gboss.TestDeliver.callLetters)
}
inline void TestDeliver::add_callletters(const char* value, size_t size) {
  callletters_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:gboss.TestDeliver.callLetters)
}
inline const ::google_public::protobuf::RepeatedPtrField< ::std::string>&
TestDeliver::callletters() const {
  // @@protoc_insertion_point(field_list:gboss.TestDeliver.callLetters)
  return callletters_;
}
inline ::google_public::protobuf::RepeatedPtrField< ::std::string>*
TestDeliver::mutable_callletters() {
  // @@protoc_insertion_point(field_mutable_list:gboss.TestDeliver.callLetters)
  return &callletters_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gboss

#ifndef SWIG
namespace google_public {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_comcenter_2eproto__INCLUDED
