// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: comcenter.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "comcenter.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gboss {

namespace {

const ::google_public::protobuf::Descriptor* ComCenterMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ComCenterMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ComCenterMessage_ComCenterBaseMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ComCenterMessage_ComCenterBaseMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Login_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Login_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* Login_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  Login_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* AddMonitor_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  AddMonitor_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* AddMonitor_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  AddMonitor_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* RemoveMonitor_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  RemoveMonitor_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* RemoveMonitor_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  RemoveMonitor_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverUnitLoginOut_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverUnitLoginOut_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetLastInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetLastInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetLastInfo_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetLastInfo_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetHistoryInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetHistoryInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetHistoryInfoNextPage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetHistoryInfoNextPage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetHistoryInfo_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetHistoryInfo_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GetHistorySimpleGpsInfo_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GetHistorySimpleGpsInfo_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* StopHistoryInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  StopHistoryInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* StopHistoryInfo_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  StopHistoryInfo_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SendCommand_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SendCommand_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SendCommandSend_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SendCommandSend_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* SendCommand_ACK_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  SendCommand_ACK_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverGPS_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverGPS_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverAlarm_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverAlarm_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverOperateData_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverOperateData_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverSMS_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverSMS_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverTravel_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverTravel_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverFault_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverFault_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverOBD_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverOBD_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverAppNotice_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverAppNotice_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverUnitVersion_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverUnitVersion_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* DeliverECUConfig_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  DeliverECUConfig_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TestDeliver_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TestDeliver_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_comcenter_2eproto() {
  protobuf_AddDesc_comcenter_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "comcenter.proto");
  GOOGLE_CHECK(file != NULL);
  ComCenterMessage_descriptor_ = file->message_type(0);
  static const int ComCenterMessage_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComCenterMessage, messages_),
  };
  ComCenterMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ComCenterMessage_descriptor_,
      ComCenterMessage::default_instance_,
      ComCenterMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComCenterMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComCenterMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ComCenterMessage));
  ComCenterMessage_ComCenterBaseMessage_descriptor_ = ComCenterMessage_descriptor_->nested_type(0);
  static const int ComCenterMessage_ComCenterBaseMessage_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComCenterMessage_ComCenterBaseMessage, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComCenterMessage_ComCenterBaseMessage, content_),
  };
  ComCenterMessage_ComCenterBaseMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ComCenterMessage_ComCenterBaseMessage_descriptor_,
      ComCenterMessage_ComCenterBaseMessage::default_instance_,
      ComCenterMessage_ComCenterBaseMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComCenterMessage_ComCenterBaseMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ComCenterMessage_ComCenterBaseMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ComCenterMessage_ComCenterBaseMessage));
  Login_descriptor_ = file->message_type(1);
  static const int Login_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, username_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, callletters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, seatid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, usertype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, userversion_),
  };
  Login_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Login_descriptor_,
      Login::default_instance_,
      Login_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Login));
  Login_ACK_descriptor_ = file->message_type(2);
  static const int Login_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ACK, username_),
  };
  Login_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      Login_ACK_descriptor_,
      Login_ACK::default_instance_,
      Login_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Login_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(Login_ACK));
  AddMonitor_descriptor_ = file->message_type(3);
  static const int AddMonitor_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor, callletters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor, infotypes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor, clearold_),
  };
  AddMonitor_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      AddMonitor_descriptor_,
      AddMonitor::default_instance_,
      AddMonitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMonitor));
  AddMonitor_ACK_descriptor_ = file->message_type(4);
  static const int AddMonitor_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor_ACK, callletters_),
  };
  AddMonitor_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      AddMonitor_ACK_descriptor_,
      AddMonitor_ACK::default_instance_,
      AddMonitor_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddMonitor_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(AddMonitor_ACK));
  RemoveMonitor_descriptor_ = file->message_type(5);
  static const int RemoveMonitor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor, callletters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor, infotypes_),
  };
  RemoveMonitor_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      RemoveMonitor_descriptor_,
      RemoveMonitor::default_instance_,
      RemoveMonitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMonitor));
  RemoveMonitor_ACK_descriptor_ = file->message_type(6);
  static const int RemoveMonitor_ACK_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor_ACK, callletters_),
  };
  RemoveMonitor_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      RemoveMonitor_ACK_descriptor_,
      RemoveMonitor_ACK::default_instance_,
      RemoveMonitor_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemoveMonitor_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(RemoveMonitor_ACK));
  DeliverUnitLoginOut_descriptor_ = file->message_type(7);
  static const int DeliverUnitLoginOut_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, inorout_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, gatewaytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, logouttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, unitversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, upgradegateway_),
  };
  DeliverUnitLoginOut_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverUnitLoginOut_descriptor_,
      DeliverUnitLoginOut::default_instance_,
      DeliverUnitLoginOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitLoginOut, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverUnitLoginOut));
  GetLastInfo_descriptor_ = file->message_type(8);
  static const int GetLastInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo, callletters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo, sn_),
  };
  GetLastInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetLastInfo_descriptor_,
      GetLastInfo::default_instance_,
      GetLastInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastInfo));
  GetLastInfo_ACK_descriptor_ = file->message_type(9);
  static const int GetLastInfo_ACK_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, gpses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, travels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, operates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, sms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, alarms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, obds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, unitloginout_),
  };
  GetLastInfo_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetLastInfo_ACK_descriptor_,
      GetLastInfo_ACK::default_instance_,
      GetLastInfo_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetLastInfo_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetLastInfo_ACK));
  GetHistoryInfo_descriptor_ = file->message_type(10);
  static const int GetHistoryInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, pagenumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, totalnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, autonextpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, reversed_),
  };
  GetHistoryInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetHistoryInfo_descriptor_,
      GetHistoryInfo::default_instance_,
      GetHistoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHistoryInfo));
  GetHistoryInfoNextPage_descriptor_ = file->message_type(11);
  static const int GetHistoryInfoNextPage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfoNextPage, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfoNextPage, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfoNextPage, sn_),
  };
  GetHistoryInfoNextPage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetHistoryInfoNextPage_descriptor_,
      GetHistoryInfoNextPage::default_instance_,
      GetHistoryInfoNextPage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfoNextPage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfoNextPage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHistoryInfoNextPage));
  GetHistoryInfo_ACK_descriptor_ = file->message_type(12);
  static const int GetHistoryInfo_ACK_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, lastpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, gpses_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, travels_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, operates_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, sms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, alarms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, obds_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, unitloginout_),
  };
  GetHistoryInfo_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetHistoryInfo_ACK_descriptor_,
      GetHistoryInfo_ACK::default_instance_,
      GetHistoryInfo_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistoryInfo_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHistoryInfo_ACK));
  GetHistorySimpleGpsInfo_ACK_descriptor_ = file->message_type(13);
  static const int GetHistorySimpleGpsInfo_ACK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, lastpage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, gpses_),
  };
  GetHistorySimpleGpsInfo_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GetHistorySimpleGpsInfo_ACK_descriptor_,
      GetHistorySimpleGpsInfo_ACK::default_instance_,
      GetHistorySimpleGpsInfo_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetHistorySimpleGpsInfo_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GetHistorySimpleGpsInfo_ACK));
  StopHistoryInfo_descriptor_ = file->message_type(14);
  static const int StopHistoryInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo, sn_),
  };
  StopHistoryInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      StopHistoryInfo_descriptor_,
      StopHistoryInfo::default_instance_,
      StopHistoryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(StopHistoryInfo));
  StopHistoryInfo_ACK_descriptor_ = file->message_type(15);
  static const int StopHistoryInfo_ACK_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo_ACK, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo_ACK, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo_ACK, sn_),
  };
  StopHistoryInfo_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      StopHistoryInfo_ACK_descriptor_,
      StopHistoryInfo_ACK::default_instance_,
      StopHistoryInfo_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopHistoryInfo_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(StopHistoryInfo_ACK));
  SendCommand_descriptor_ = file->message_type(16);
  static const int SendCommand_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, callletters_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, ackproxy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, channelid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, addmonitor_),
  };
  SendCommand_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SendCommand_descriptor_,
      SendCommand::default_instance_,
      SendCommand_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SendCommand));
  SendCommandSend_ACK_descriptor_ = file->message_type(17);
  static const int SendCommandSend_ACK_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, unitsn_),
  };
  SendCommandSend_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SendCommandSend_ACK_descriptor_,
      SendCommandSend_ACK::default_instance_,
      SendCommandSend_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommandSend_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SendCommandSend_ACK));
  SendCommand_ACK_descriptor_ = file->message_type(18);
  static const int SendCommand_ACK_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, sn_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, retcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, params_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, gpsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, retmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, unitsn_),
  };
  SendCommand_ACK_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      SendCommand_ACK_descriptor_,
      SendCommand_ACK::default_instance_,
      SendCommand_ACK_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SendCommand_ACK, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(SendCommand_ACK));
  DeliverGPS_descriptor_ = file->message_type(19);
  static const int DeliverGPS_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverGPS, gpsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverGPS, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverGPS, gatewaytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverGPS, alarmid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverGPS, alarmname_),
  };
  DeliverGPS_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverGPS_descriptor_,
      DeliverGPS::default_instance_,
      DeliverGPS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverGPS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverGPS, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverGPS));
  DeliverAlarm_descriptor_ = file->message_type(20);
  static const int DeliverAlarm_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAlarm, alarminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAlarm, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAlarm, gatewaytype_),
  };
  DeliverAlarm_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverAlarm_descriptor_,
      DeliverAlarm::default_instance_,
      DeliverAlarm_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAlarm, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAlarm, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverAlarm));
  DeliverOperateData_descriptor_ = file->message_type(21);
  static const int DeliverOperateData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOperateData, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOperateData, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOperateData, gatewaytype_),
  };
  DeliverOperateData_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverOperateData_descriptor_,
      DeliverOperateData::default_instance_,
      DeliverOperateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOperateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOperateData, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverOperateData));
  DeliverSMS_descriptor_ = file->message_type(22);
  static const int DeliverSMS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverSMS, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverSMS, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverSMS, gatewaytype_),
  };
  DeliverSMS_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverSMS_descriptor_,
      DeliverSMS::default_instance_,
      DeliverSMS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverSMS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverSMS, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverSMS));
  DeliverTravel_descriptor_ = file->message_type(23);
  static const int DeliverTravel_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverTravel, travelinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverTravel, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverTravel, gatewaytype_),
  };
  DeliverTravel_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverTravel_descriptor_,
      DeliverTravel::default_instance_,
      DeliverTravel_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverTravel, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverTravel, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverTravel));
  DeliverFault_descriptor_ = file->message_type(24);
  static const int DeliverFault_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverFault, faultinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverFault, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverFault, gatewaytype_),
  };
  DeliverFault_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverFault_descriptor_,
      DeliverFault::default_instance_,
      DeliverFault_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverFault, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverFault, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverFault));
  DeliverOBD_descriptor_ = file->message_type(25);
  static const int DeliverOBD_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOBD, obdinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOBD, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOBD, gatewaytype_),
  };
  DeliverOBD_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverOBD_descriptor_,
      DeliverOBD::default_instance_,
      DeliverOBD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOBD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverOBD, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverOBD));
  DeliverAppNotice_descriptor_ = file->message_type(26);
  static const int DeliverAppNotice_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAppNotice, noticeinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAppNotice, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAppNotice, gatewaytype_),
  };
  DeliverAppNotice_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverAppNotice_descriptor_,
      DeliverAppNotice::default_instance_,
      DeliverAppNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAppNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverAppNotice, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverAppNotice));
  DeliverUnitVersion_descriptor_ = file->message_type(27);
  static const int DeliverUnitVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitVersion, unitversion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitVersion, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitVersion, gatewaytype_),
  };
  DeliverUnitVersion_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverUnitVersion_descriptor_,
      DeliverUnitVersion::default_instance_,
      DeliverUnitVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverUnitVersion, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverUnitVersion));
  DeliverECUConfig_descriptor_ = file->message_type(28);
  static const int DeliverECUConfig_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverECUConfig, ecuconfig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverECUConfig, gatewayid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverECUConfig, gatewaytype_),
  };
  DeliverECUConfig_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      DeliverECUConfig_descriptor_,
      DeliverECUConfig::default_instance_,
      DeliverECUConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverECUConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeliverECUConfig, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(DeliverECUConfig));
  TestDeliver_descriptor_ = file->message_type(29);
  static const int TestDeliver_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestDeliver, infotype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestDeliver, callletters_),
  };
  TestDeliver_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TestDeliver_descriptor_,
      TestDeliver::default_instance_,
      TestDeliver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestDeliver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TestDeliver, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TestDeliver));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_comcenter_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComCenterMessage_descriptor_, &ComCenterMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ComCenterMessage_ComCenterBaseMessage_descriptor_, &ComCenterMessage_ComCenterBaseMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_descriptor_, &Login::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Login_ACK_descriptor_, &Login_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMonitor_descriptor_, &AddMonitor::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddMonitor_ACK_descriptor_, &AddMonitor_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMonitor_descriptor_, &RemoveMonitor::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemoveMonitor_ACK_descriptor_, &RemoveMonitor_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverUnitLoginOut_descriptor_, &DeliverUnitLoginOut::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastInfo_descriptor_, &GetLastInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetLastInfo_ACK_descriptor_, &GetLastInfo_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHistoryInfo_descriptor_, &GetHistoryInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHistoryInfoNextPage_descriptor_, &GetHistoryInfoNextPage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHistoryInfo_ACK_descriptor_, &GetHistoryInfo_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetHistorySimpleGpsInfo_ACK_descriptor_, &GetHistorySimpleGpsInfo_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopHistoryInfo_descriptor_, &StopHistoryInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopHistoryInfo_ACK_descriptor_, &StopHistoryInfo_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendCommand_descriptor_, &SendCommand::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendCommandSend_ACK_descriptor_, &SendCommandSend_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SendCommand_ACK_descriptor_, &SendCommand_ACK::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverGPS_descriptor_, &DeliverGPS::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverAlarm_descriptor_, &DeliverAlarm::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverOperateData_descriptor_, &DeliverOperateData::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverSMS_descriptor_, &DeliverSMS::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverTravel_descriptor_, &DeliverTravel::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverFault_descriptor_, &DeliverFault::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverOBD_descriptor_, &DeliverOBD::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverAppNotice_descriptor_, &DeliverAppNotice::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverUnitVersion_descriptor_, &DeliverUnitVersion::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeliverECUConfig_descriptor_, &DeliverECUConfig::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TestDeliver_descriptor_, &TestDeliver::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_comcenter_2eproto() {
  delete ComCenterMessage::default_instance_;
  delete ComCenterMessage_reflection_;
  delete ComCenterMessage_ComCenterBaseMessage::default_instance_;
  delete ComCenterMessage_ComCenterBaseMessage_reflection_;
  delete Login::default_instance_;
  delete Login_reflection_;
  delete Login_ACK::default_instance_;
  delete Login_ACK_reflection_;
  delete AddMonitor::default_instance_;
  delete AddMonitor_reflection_;
  delete AddMonitor_ACK::default_instance_;
  delete AddMonitor_ACK_reflection_;
  delete RemoveMonitor::default_instance_;
  delete RemoveMonitor_reflection_;
  delete RemoveMonitor_ACK::default_instance_;
  delete RemoveMonitor_ACK_reflection_;
  delete DeliverUnitLoginOut::default_instance_;
  delete DeliverUnitLoginOut_reflection_;
  delete GetLastInfo::default_instance_;
  delete GetLastInfo_reflection_;
  delete GetLastInfo_ACK::default_instance_;
  delete GetLastInfo_ACK_reflection_;
  delete GetHistoryInfo::default_instance_;
  delete GetHistoryInfo_reflection_;
  delete GetHistoryInfoNextPage::default_instance_;
  delete GetHistoryInfoNextPage_reflection_;
  delete GetHistoryInfo_ACK::default_instance_;
  delete GetHistoryInfo_ACK_reflection_;
  delete GetHistorySimpleGpsInfo_ACK::default_instance_;
  delete GetHistorySimpleGpsInfo_ACK_reflection_;
  delete StopHistoryInfo::default_instance_;
  delete StopHistoryInfo_reflection_;
  delete StopHistoryInfo_ACK::default_instance_;
  delete StopHistoryInfo_ACK_reflection_;
  delete SendCommand::default_instance_;
  delete SendCommand_reflection_;
  delete SendCommandSend_ACK::default_instance_;
  delete SendCommandSend_ACK_reflection_;
  delete SendCommand_ACK::default_instance_;
  delete SendCommand_ACK_reflection_;
  delete DeliverGPS::default_instance_;
  delete DeliverGPS_reflection_;
  delete DeliverAlarm::default_instance_;
  delete DeliverAlarm_reflection_;
  delete DeliverOperateData::default_instance_;
  delete DeliverOperateData_reflection_;
  delete DeliverSMS::default_instance_;
  delete DeliverSMS_reflection_;
  delete DeliverTravel::default_instance_;
  delete DeliverTravel_reflection_;
  delete DeliverFault::default_instance_;
  delete DeliverFault_reflection_;
  delete DeliverOBD::default_instance_;
  delete DeliverOBD_reflection_;
  delete DeliverAppNotice::default_instance_;
  delete DeliverAppNotice_reflection_;
  delete DeliverUnitVersion::default_instance_;
  delete DeliverUnitVersion_reflection_;
  delete DeliverECUConfig::default_instance_;
  delete DeliverECUConfig_reflection_;
  delete TestDeliver::default_instance_;
  delete TestDeliver_reflection_;
}

void protobuf_AddDesc_comcenter_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::gboss::protobuf_AddDesc_GBoss_2eproto();
  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\017comcenter.proto\022\005gboss\032\013GBoss.proto\"\207\001"
    "\n\020ComCenterMessage\022>\n\010messages\030\001 \003(\0132,.g"
    "boss.ComCenterMessage.ComCenterBaseMessa"
    "ge\0323\n\024ComCenterBaseMessage\022\n\n\002id\030\001 \002(\005\022\017"
    "\n\007content\030\002 \001(\014\"w\n\005Login\022\020\n\010username\030\001 \002"
    "(\t\022\020\n\010password\030\002 \002(\t\022\023\n\013callLetters\030\003 \003("
    "\t\022\016\n\006seatid\030\004 \001(\t\022\020\n\010usertype\030\005 \001(\t\022\023\n\013u"
    "serversion\030\006 \001(\t\">\n\tLogin_ACK\022\017\n\007retcode"
    "\030\001 \002(\005\022\016\n\006retmsg\030\002 \001(\t\022\020\n\010username\030\003 \001(\t"
    "\"F\n\nAddMonitor\022\023\n\013callLetters\030\001 \003(\t\022\021\n\ti"
    "nfotypes\030\002 \003(\005\022\020\n\010clearold\030\003 \001(\010\"F\n\016AddM"
    "onitor_ACK\022\017\n\007retcode\030\001 \002(\005\022\016\n\006retmsg\030\002 "
    "\001(\t\022\023\n\013callLetters\030\003 \003(\t\"7\n\rRemoveMonito"
    "r\022\023\n\013callLetters\030\001 \003(\t\022\021\n\tinfotypes\030\002 \003("
    "\005\"I\n\021RemoveMonitor_ACK\022\017\n\007retcode\030\001 \002(\005\022"
    "\016\n\006retmsg\030\002 \001(\t\022\023\n\013callLetters\030\003 \003(\t\"\266\001\n"
    "\023DeliverUnitLoginOut\022\022\n\ncallLetter\030\001 \002(\t"
    "\022\017\n\007inorout\030\002 \002(\005\022\021\n\tgatewayid\030\003 \001(\005\022\023\n\013"
    "gatewaytype\030\004 \001(\005\022\021\n\tloginTime\030\005 \001(\003\022\022\n\n"
    "logoutTime\030\006 \001(\003\022\023\n\013unitversion\030\007 \001(\t\022\026\n"
    "\016upgradegateway\030\010 \001(\010\"@\n\013GetLastInfo\022\020\n\010"
    "infoType\030\001 \002(\005\022\023\n\013callLetters\030\002 \003(\t\022\n\n\002s"
    "n\030\003 \001(\t\"\335\002\n\017GetLastInfo_ACK\022\017\n\007retcode\030\001"
    " \002(\005\022\016\n\006retmsg\030\002 \001(\t\022\035\n\005gpses\030\003 \003(\0132\016.gb"
    "oss.GpsInfo\022\"\n\007travels\030\004 \003(\0132\021.gboss.Tra"
    "velInfo\022 \n\006faults\030\005 \003(\0132\020.gboss.FaultInf"
    "o\022\n\n\002sn\030\006 \001(\t\022$\n\010operates\030\007 \003(\0132\022.gboss."
    "OperateData\022 \n\003sms\030\010 \003(\0132\023.gboss.ShortMe"
    "ssage\022 \n\006alarms\030\t \003(\0132\020.gboss.AlarmInfo\022"
    "\034\n\004obds\030\n \003(\0132\016.gboss.OBDInfo\0220\n\014unitlog"
    "inout\030\013 \003(\0132\032.gboss.DeliverUnitLoginOut\""
    "\267\001\n\016GetHistoryInfo\022\022\n\ncallLetter\030\001 \002(\t\022\020"
    "\n\010infoType\030\002 \002(\005\022\021\n\tstarttime\030\003 \002(\003\022\017\n\007e"
    "ndtime\030\004 \002(\003\022\022\n\npageNumber\030\005 \001(\005\022\023\n\013tota"
    "lNumber\030\006 \001(\005\022\024\n\014autonextpage\030\007 \001(\010\022\n\n\002s"
    "n\030\010 \001(\t\022\020\n\010reversed\030\t \001(\010\"J\n\026GetHistoryI"
    "nfoNextPage\022\022\n\ncallLetter\030\001 \002(\t\022\020\n\010infoT"
    "ype\030\002 \002(\005\022\n\n\002sn\030\003 \001(\t\"\362\002\n\022GetHistoryInfo"
    "_ACK\022\017\n\007retcode\030\001 \002(\005\022\016\n\006retmsg\030\002 \001(\t\022\020\n"
    "\010lastPage\030\003 \002(\010\022\035\n\005gpses\030\004 \003(\0132\016.gboss.G"
    "psInfo\022\"\n\007travels\030\005 \003(\0132\021.gboss.TravelIn"
    "fo\022 \n\006faults\030\006 \003(\0132\020.gboss.FaultInfo\022\n\n\002"
    "sn\030\007 \001(\t\022$\n\010operates\030\010 \003(\0132\022.gboss.Opera"
    "teData\022 \n\003sms\030\t \003(\0132\023.gboss.ShortMessage"
    "\022 \n\006alarms\030\n \003(\0132\020.gboss.AlarmInfo\022\034\n\004ob"
    "ds\030\013 \003(\0132\016.gboss.OBDInfo\0220\n\014unitloginout"
    "\030\014 \003(\0132\032.gboss.DeliverUnitLoginOut\"\225\001\n\033G"
    "etHistorySimpleGpsInfo_ACK\022\022\n\ncallLetter"
    "\030\001 \002(\t\022\017\n\007retcode\030\002 \002(\005\022\016\n\006retmsg\030\003 \001(\t\022"
    "\020\n\010lastPage\030\004 \002(\010\022\n\n\002sn\030\005 \001(\t\022#\n\005gpses\030\006"
    " \003(\0132\024.gboss.GpsSimpleInfo\"C\n\017StopHistor"
    "yInfo\022\022\n\ncallLetter\030\001 \002(\t\022\020\n\010infoType\030\002 "
    "\002(\005\022\n\n\002sn\030\003 \001(\t\"h\n\023StopHistoryInfo_ACK\022\022"
    "\n\ncallLetter\030\001 \002(\t\022\020\n\010infoType\030\002 \002(\005\022\017\n\007"
    "retcode\030\003 \002(\005\022\016\n\006retmsg\030\004 \001(\t\022\n\n\002sn\030\005 \001("
    "\t\"\206\001\n\013SendCommand\022\n\n\002sn\030\001 \002(\t\022\023\n\013callLet"
    "ters\030\002 \003(\t\022\r\n\005cmdId\030\003 \002(\005\022\016\n\006params\030\004 \003("
    "\t\022\020\n\010ackProxy\030\005 \001(\t\022\021\n\tchannelId\030\006 \001(\005\022\022"
    "\n\naddmonitor\030\007 \001(\010\"u\n\023SendCommandSend_AC"
    "K\022\n\n\002sn\030\001 \002(\t\022\022\n\ncallLetter\030\002 \002(\t\022\r\n\005cmd"
    "Id\030\003 \002(\005\022\017\n\007retcode\030\004 \002(\005\022\016\n\006retmsg\030\005 \001("
    "\t\022\016\n\006unitsn\030\006 \001(\005\"\242\001\n\017SendCommand_ACK\022\n\n"
    "\002sn\030\001 \002(\t\022\022\n\ncallLetter\030\002 \002(\t\022\r\n\005cmdId\030\003"
    " \002(\005\022\017\n\007retcode\030\004 \002(\005\022\016\n\006params\030\005 \003(\t\022\037\n"
    "\007gpsInfo\030\006 \003(\0132\016.gboss.GpsInfo\022\016\n\006retmsg"
    "\030\007 \001(\t\022\016\n\006unitsn\030\010 \001(\005\"y\n\nDeliverGPS\022\037\n\007"
    "gpsinfo\030\001 \002(\0132\016.gboss.GpsInfo\022\021\n\tgateway"
    "id\030\002 \001(\005\022\023\n\013gatewaytype\030\003 \001(\005\022\017\n\007alarmid"
    "\030\004 \001(\005\022\021\n\talarmname\030\005 \001(\t\"[\n\014DeliverAlar"
    "m\022#\n\talarminfo\030\001 \002(\0132\020.gboss.AlarmInfo\022\021"
    "\n\tgatewayid\030\002 \001(\005\022\023\n\013gatewaytype\030\003 \001(\005\"^"
    "\n\022DeliverOperateData\022 \n\004data\030\001 \002(\0132\022.gbo"
    "ss.OperateData\022\021\n\tgatewayid\030\002 \001(\005\022\023\n\013gat"
    "ewaytype\030\003 \001(\005\"V\n\nDeliverSMS\022 \n\003msg\030\001 \002("
    "\0132\023.gboss.ShortMessage\022\021\n\tgatewayid\030\002 \001("
    "\005\022\023\n\013gatewaytype\030\003 \001(\005\"^\n\rDeliverTravel\022"
    "%\n\ntravelinfo\030\001 \002(\0132\021.gboss.TravelInfo\022\021"
    "\n\tgatewayid\030\002 \001(\005\022\023\n\013gatewaytype\030\003 \001(\005\"["
    "\n\014DeliverFault\022#\n\tfaultinfo\030\001 \002(\0132\020.gbos"
    "s.FaultInfo\022\021\n\tgatewayid\030\002 \001(\005\022\023\n\013gatewa"
    "ytype\030\003 \001(\005\"U\n\nDeliverOBD\022\037\n\007obdinfo\030\001 \002"
    "(\0132\016.gboss.OBDInfo\022\021\n\tgatewayid\030\002 \001(\005\022\023\n"
    "\013gatewaytype\030\003 \001(\005\"d\n\020DeliverAppNotice\022("
    "\n\nnoticeinfo\030\001 \002(\0132\024.gboss.AppNoticeInfo"
    "\022\021\n\tgatewayid\030\002 \001(\005\022\023\n\013gatewaytype\030\003 \001(\005"
    "\"e\n\022DeliverUnitVersion\022\'\n\013unitVersion\030\001 "
    "\002(\0132\022.gboss.UnitVersion\022\021\n\tgatewayid\030\002 \001"
    "(\005\022\023\n\013gatewaytype\030\003 \001(\005\"_\n\020DeliverECUCon"
    "fig\022#\n\tecuConfig\030\001 \002(\0132\020.gboss.ECUConfig"
    "\022\021\n\tgatewayid\030\002 \001(\005\022\023\n\013gatewaytype\030\003 \001(\005"
    "\"4\n\013TestDeliver\022\020\n\010infoType\030\001 \002(\005\022\023\n\013cal"
    "lLetters\030\002 \003(\tB5\n cc.chinagps.gboss.comc"
    "enter.buffB\021ComCenterDataBuff", 3709);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "comcenter.proto", &protobuf_RegisterTypes);
  ComCenterMessage::default_instance_ = new ComCenterMessage();
  ComCenterMessage_ComCenterBaseMessage::default_instance_ = new ComCenterMessage_ComCenterBaseMessage();
  Login::default_instance_ = new Login();
  Login_ACK::default_instance_ = new Login_ACK();
  AddMonitor::default_instance_ = new AddMonitor();
  AddMonitor_ACK::default_instance_ = new AddMonitor_ACK();
  RemoveMonitor::default_instance_ = new RemoveMonitor();
  RemoveMonitor_ACK::default_instance_ = new RemoveMonitor_ACK();
  DeliverUnitLoginOut::default_instance_ = new DeliverUnitLoginOut();
  GetLastInfo::default_instance_ = new GetLastInfo();
  GetLastInfo_ACK::default_instance_ = new GetLastInfo_ACK();
  GetHistoryInfo::default_instance_ = new GetHistoryInfo();
  GetHistoryInfoNextPage::default_instance_ = new GetHistoryInfoNextPage();
  GetHistoryInfo_ACK::default_instance_ = new GetHistoryInfo_ACK();
  GetHistorySimpleGpsInfo_ACK::default_instance_ = new GetHistorySimpleGpsInfo_ACK();
  StopHistoryInfo::default_instance_ = new StopHistoryInfo();
  StopHistoryInfo_ACK::default_instance_ = new StopHistoryInfo_ACK();
  SendCommand::default_instance_ = new SendCommand();
  SendCommandSend_ACK::default_instance_ = new SendCommandSend_ACK();
  SendCommand_ACK::default_instance_ = new SendCommand_ACK();
  DeliverGPS::default_instance_ = new DeliverGPS();
  DeliverAlarm::default_instance_ = new DeliverAlarm();
  DeliverOperateData::default_instance_ = new DeliverOperateData();
  DeliverSMS::default_instance_ = new DeliverSMS();
  DeliverTravel::default_instance_ = new DeliverTravel();
  DeliverFault::default_instance_ = new DeliverFault();
  DeliverOBD::default_instance_ = new DeliverOBD();
  DeliverAppNotice::default_instance_ = new DeliverAppNotice();
  DeliverUnitVersion::default_instance_ = new DeliverUnitVersion();
  DeliverECUConfig::default_instance_ = new DeliverECUConfig();
  TestDeliver::default_instance_ = new TestDeliver();
  ComCenterMessage::default_instance_->InitAsDefaultInstance();
  ComCenterMessage_ComCenterBaseMessage::default_instance_->InitAsDefaultInstance();
  Login::default_instance_->InitAsDefaultInstance();
  Login_ACK::default_instance_->InitAsDefaultInstance();
  AddMonitor::default_instance_->InitAsDefaultInstance();
  AddMonitor_ACK::default_instance_->InitAsDefaultInstance();
  RemoveMonitor::default_instance_->InitAsDefaultInstance();
  RemoveMonitor_ACK::default_instance_->InitAsDefaultInstance();
  DeliverUnitLoginOut::default_instance_->InitAsDefaultInstance();
  GetLastInfo::default_instance_->InitAsDefaultInstance();
  GetLastInfo_ACK::default_instance_->InitAsDefaultInstance();
  GetHistoryInfo::default_instance_->InitAsDefaultInstance();
  GetHistoryInfoNextPage::default_instance_->InitAsDefaultInstance();
  GetHistoryInfo_ACK::default_instance_->InitAsDefaultInstance();
  GetHistorySimpleGpsInfo_ACK::default_instance_->InitAsDefaultInstance();
  StopHistoryInfo::default_instance_->InitAsDefaultInstance();
  StopHistoryInfo_ACK::default_instance_->InitAsDefaultInstance();
  SendCommand::default_instance_->InitAsDefaultInstance();
  SendCommandSend_ACK::default_instance_->InitAsDefaultInstance();
  SendCommand_ACK::default_instance_->InitAsDefaultInstance();
  DeliverGPS::default_instance_->InitAsDefaultInstance();
  DeliverAlarm::default_instance_->InitAsDefaultInstance();
  DeliverOperateData::default_instance_->InitAsDefaultInstance();
  DeliverSMS::default_instance_->InitAsDefaultInstance();
  DeliverTravel::default_instance_->InitAsDefaultInstance();
  DeliverFault::default_instance_->InitAsDefaultInstance();
  DeliverOBD::default_instance_->InitAsDefaultInstance();
  DeliverAppNotice::default_instance_->InitAsDefaultInstance();
  DeliverUnitVersion::default_instance_->InitAsDefaultInstance();
  DeliverECUConfig::default_instance_->InitAsDefaultInstance();
  TestDeliver::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_comcenter_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_comcenter_2eproto {
  StaticDescriptorInitializer_comcenter_2eproto() {
    protobuf_AddDesc_comcenter_2eproto();
  }
} static_descriptor_initializer_comcenter_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ComCenterMessage_ComCenterBaseMessage::kIdFieldNumber;
const int ComCenterMessage_ComCenterBaseMessage::kContentFieldNumber;
#endif  // !_MSC_VER

ComCenterMessage_ComCenterBaseMessage::ComCenterMessage_ComCenterBaseMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.ComCenterMessage.ComCenterBaseMessage)
}

void ComCenterMessage_ComCenterBaseMessage::InitAsDefaultInstance() {
}

ComCenterMessage_ComCenterBaseMessage::ComCenterMessage_ComCenterBaseMessage(const ComCenterMessage_ComCenterBaseMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.ComCenterMessage.ComCenterBaseMessage)
}

void ComCenterMessage_ComCenterBaseMessage::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_ = 0;
  content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComCenterMessage_ComCenterBaseMessage::~ComCenterMessage_ComCenterBaseMessage() {
  // @@protoc_insertion_point(destructor:gboss.ComCenterMessage.ComCenterBaseMessage)
  SharedDtor();
}

void ComCenterMessage_ComCenterBaseMessage::SharedDtor() {
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void ComCenterMessage_ComCenterBaseMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ComCenterMessage_ComCenterBaseMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComCenterMessage_ComCenterBaseMessage_descriptor_;
}

const ComCenterMessage_ComCenterBaseMessage& ComCenterMessage_ComCenterBaseMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

ComCenterMessage_ComCenterBaseMessage* ComCenterMessage_ComCenterBaseMessage::default_instance_ = NULL;

ComCenterMessage_ComCenterBaseMessage* ComCenterMessage_ComCenterBaseMessage::New() const {
  return new ComCenterMessage_ComCenterBaseMessage;
}

void ComCenterMessage_ComCenterBaseMessage::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    id_ = 0;
    if (has_content()) {
      if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComCenterMessage_ComCenterBaseMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.ComCenterMessage.ComCenterBaseMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_content;
        break;
      }

      // optional bytes content = 2;
      case 2: {
        if (tag == 18) {
         parse_content:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.ComCenterMessage.ComCenterBaseMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.ComCenterMessage.ComCenterBaseMessage)
  return false;
#undef DO_
}

void ComCenterMessage_ComCenterBaseMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.ComCenterMessage.ComCenterBaseMessage)
  // required int32 id = 1;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes content = 2;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.ComCenterMessage.ComCenterBaseMessage)
}

::google_public::protobuf::uint8* ComCenterMessage_ComCenterBaseMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.ComCenterMessage.ComCenterBaseMessage)
  // required int32 id = 1;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes content = 2;
  if (has_content()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.ComCenterMessage.ComCenterBaseMessage)
  return target;
}

int ComCenterMessage_ComCenterBaseMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes content = 2;
    if (has_content()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComCenterMessage_ComCenterBaseMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComCenterMessage_ComCenterBaseMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ComCenterMessage_ComCenterBaseMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComCenterMessage_ComCenterBaseMessage::MergeFrom(const ComCenterMessage_ComCenterBaseMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComCenterMessage_ComCenterBaseMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComCenterMessage_ComCenterBaseMessage::CopyFrom(const ComCenterMessage_ComCenterBaseMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComCenterMessage_ComCenterBaseMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ComCenterMessage_ComCenterBaseMessage::Swap(ComCenterMessage_ComCenterBaseMessage* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ComCenterMessage_ComCenterBaseMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ComCenterMessage_ComCenterBaseMessage_descriptor_;
  metadata.reflection = ComCenterMessage_ComCenterBaseMessage_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int ComCenterMessage::kMessagesFieldNumber;
#endif  // !_MSC_VER

ComCenterMessage::ComCenterMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.ComCenterMessage)
}

void ComCenterMessage::InitAsDefaultInstance() {
}

ComCenterMessage::ComCenterMessage(const ComCenterMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.ComCenterMessage)
}

void ComCenterMessage::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ComCenterMessage::~ComCenterMessage() {
  // @@protoc_insertion_point(destructor:gboss.ComCenterMessage)
  SharedDtor();
}

void ComCenterMessage::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ComCenterMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ComCenterMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ComCenterMessage_descriptor_;
}

const ComCenterMessage& ComCenterMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

ComCenterMessage* ComCenterMessage::default_instance_ = NULL;

ComCenterMessage* ComCenterMessage::New() const {
  return new ComCenterMessage;
}

void ComCenterMessage::Clear() {
  messages_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ComCenterMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.ComCenterMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .gboss.ComCenterMessage.ComCenterBaseMessage messages = 1;
      case 1: {
        if (tag == 10) {
         parse_messages:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_messages()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_messages;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.ComCenterMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.ComCenterMessage)
  return false;
#undef DO_
}

void ComCenterMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.ComCenterMessage)
  // repeated .gboss.ComCenterMessage.ComCenterBaseMessage messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->messages(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.ComCenterMessage)
}

::google_public::protobuf::uint8* ComCenterMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.ComCenterMessage)
  // repeated .gboss.ComCenterMessage.ComCenterBaseMessage messages = 1;
  for (int i = 0; i < this->messages_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->messages(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.ComCenterMessage)
  return target;
}

int ComCenterMessage::ByteSize() const {
  int total_size = 0;

  // repeated .gboss.ComCenterMessage.ComCenterBaseMessage messages = 1;
  total_size += 1 * this->messages_size();
  for (int i = 0; i < this->messages_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->messages(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ComCenterMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ComCenterMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ComCenterMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ComCenterMessage::MergeFrom(const ComCenterMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  messages_.MergeFrom(from.messages_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ComCenterMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ComCenterMessage::CopyFrom(const ComCenterMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ComCenterMessage::IsInitialized() const {

  if (!::google_public::protobuf::internal::AllAreInitialized(this->messages())) return false;
  return true;
}

void ComCenterMessage::Swap(ComCenterMessage* other) {
  if (other != this) {
    messages_.Swap(&other->messages_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ComCenterMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ComCenterMessage_descriptor_;
  metadata.reflection = ComCenterMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login::kUsernameFieldNumber;
const int Login::kPasswordFieldNumber;
const int Login::kCallLettersFieldNumber;
const int Login::kSeatidFieldNumber;
const int Login::kUsertypeFieldNumber;
const int Login::kUserversionFieldNumber;
#endif  // !_MSC_VER

Login::Login()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.Login)
}

void Login::InitAsDefaultInstance() {
}

Login::Login(const Login& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.Login)
}

void Login::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  password_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  seatid_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  usertype_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  userversion_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login::~Login() {
  // @@protoc_insertion_point(destructor:gboss.Login)
  SharedDtor();
}

void Login::SharedDtor() {
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete password_;
  }
  if (seatid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete seatid_;
  }
  if (usertype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete usertype_;
  }
  if (userversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete userversion_;
  }
  if (this != default_instance_) {
  }
}

void Login::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Login::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_descriptor_;
}

const Login& Login::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

Login* Login::default_instance_ = NULL;

Login* Login::New() const {
  return new Login;
}

void Login::Clear() {
  if (_has_bits_[0 / 32] & 59) {
    if (has_username()) {
      if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
    if (has_password()) {
      if (password_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        password_->clear();
      }
    }
    if (has_seatid()) {
      if (seatid_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        seatid_->clear();
      }
    }
    if (has_usertype()) {
      if (usertype_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        usertype_->clear();
      }
    }
    if (has_userversion()) {
      if (userversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        userversion_->clear();
      }
    }
  }
  callletters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.Login)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string username = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // required string password = 2;
      case 2: {
        if (tag == 18) {
         parse_password:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->password().data(), this->password().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "password");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callLetters;
        break;
      }

      // repeated string callLetters = 3;
      case 3: {
        if (tag == 26) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callLetters;
        if (input->ExpectTag(34)) goto parse_seatid;
        break;
      }

      // optional string seatid = 4;
      case 4: {
        if (tag == 34) {
         parse_seatid:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seatid()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->seatid().data(), this->seatid().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "seatid");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_usertype;
        break;
      }

      // optional string usertype = 5;
      case 5: {
        if (tag == 42) {
         parse_usertype:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_usertype()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->usertype().data(), this->usertype().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "usertype");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_userversion;
        break;
      }

      // optional string userversion = 6;
      case 6: {
        if (tag == 50) {
         parse_userversion:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_userversion()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->userversion().data(), this->userversion().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "userversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.Login)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.Login)
  return false;
#undef DO_
}

void Login::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.Login)
  // required string username = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // required string password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->password(), output);
  }

  // repeated string callLetters = 3;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->callletters(i), output);
  }

  // optional string seatid = 4;
  if (has_seatid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seatid().data(), this->seatid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "seatid");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->seatid(), output);
  }

  // optional string usertype = 5;
  if (has_usertype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usertype().data(), this->usertype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "usertype");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->usertype(), output);
  }

  // optional string userversion = 6;
  if (has_userversion()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userversion().data(), this->userversion().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "userversion");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->userversion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.Login)
}

::google_public::protobuf::uint8* Login::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.Login)
  // required string username = 1;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->username(), target);
  }

  // required string password = 2;
  if (has_password()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->password().data(), this->password().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "password");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // repeated string callLetters = 3;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->callletters(i), target);
  }

  // optional string seatid = 4;
  if (has_seatid()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->seatid().data(), this->seatid().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "seatid");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->seatid(), target);
  }

  // optional string usertype = 5;
  if (has_usertype()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->usertype().data(), this->usertype().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "usertype");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->usertype(), target);
  }

  // optional string userversion = 6;
  if (has_userversion()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->userversion().data(), this->userversion().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "userversion");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->userversion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.Login)
  return target;
}

int Login::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string username = 1;
    if (has_username()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

    // required string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional string seatid = 4;
    if (has_seatid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->seatid());
    }

    // optional string usertype = 5;
    if (has_usertype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->usertype());
    }

    // optional string userversion = 6;
    if (has_userversion()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->userversion());
    }

  }
  // repeated string callLetters = 3;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Login*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login::MergeFrom(const Login& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_username()) {
      set_username(from.username());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_seatid()) {
      set_seatid(from.seatid());
    }
    if (from.has_usertype()) {
      set_usertype(from.usertype());
    }
    if (from.has_userversion()) {
      set_userversion(from.userversion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login::CopyFrom(const Login& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Login::Swap(Login* other) {
  if (other != this) {
    std::swap(username_, other->username_);
    std::swap(password_, other->password_);
    callletters_.Swap(&other->callletters_);
    std::swap(seatid_, other->seatid_);
    std::swap(usertype_, other->usertype_);
    std::swap(userversion_, other->userversion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Login::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Login_descriptor_;
  metadata.reflection = Login_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Login_ACK::kRetcodeFieldNumber;
const int Login_ACK::kRetmsgFieldNumber;
const int Login_ACK::kUsernameFieldNumber;
#endif  // !_MSC_VER

Login_ACK::Login_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.Login_ACK)
}

void Login_ACK::InitAsDefaultInstance() {
}

Login_ACK::Login_ACK(const Login_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.Login_ACK)
}

void Login_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  username_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Login_ACK::~Login_ACK() {
  // @@protoc_insertion_point(destructor:gboss.Login_ACK)
  SharedDtor();
}

void Login_ACK::SharedDtor() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete username_;
  }
  if (this != default_instance_) {
  }
}

void Login_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* Login_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Login_ACK_descriptor_;
}

const Login_ACK& Login_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

Login_ACK* Login_ACK::default_instance_ = NULL;

Login_ACK* Login_ACK::New() const {
  return new Login_ACK;
}

void Login_ACK::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    retcode_ = 0;
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
    if (has_username()) {
      if (username_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        username_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Login_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.Login_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_username;
        break;
      }

      // optional string username = 3;
      case 3: {
        if (tag == 26) {
         parse_username:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->username().data(), this->username().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "username");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.Login_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.Login_ACK)
  return false;
#undef DO_
}

void Login_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.Login_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retmsg(), output);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->username(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.Login_ACK)
}

::google_public::protobuf::uint8* Login_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.Login_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retmsg(), target);
  }

  // optional string username = 3;
  if (has_username()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->username().data(), this->username().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "username");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->username(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.Login_ACK)
  return target;
}

int Login_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // optional string username = 3;
    if (has_username()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->username());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Login_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Login_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const Login_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Login_ACK::MergeFrom(const Login_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
    if (from.has_username()) {
      set_username(from.username());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Login_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Login_ACK::CopyFrom(const Login_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Login_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Login_ACK::Swap(Login_ACK* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(username_, other->username_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata Login_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = Login_ACK_descriptor_;
  metadata.reflection = Login_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMonitor::kCallLettersFieldNumber;
const int AddMonitor::kInfotypesFieldNumber;
const int AddMonitor::kClearoldFieldNumber;
#endif  // !_MSC_VER

AddMonitor::AddMonitor()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.AddMonitor)
}

void AddMonitor::InitAsDefaultInstance() {
}

AddMonitor::AddMonitor(const AddMonitor& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.AddMonitor)
}

void AddMonitor::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  clearold_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMonitor::~AddMonitor() {
  // @@protoc_insertion_point(destructor:gboss.AddMonitor)
  SharedDtor();
}

void AddMonitor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* AddMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMonitor_descriptor_;
}

const AddMonitor& AddMonitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

AddMonitor* AddMonitor::default_instance_ = NULL;

AddMonitor* AddMonitor::New() const {
  return new AddMonitor;
}

void AddMonitor::Clear() {
  clearold_ = false;
  callletters_.Clear();
  infotypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMonitor::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.AddMonitor)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string callLetters = 1;
      case 1: {
        if (tag == 10) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_callLetters;
        if (input->ExpectTag(16)) goto parse_infotypes;
        break;
      }

      // repeated int32 infotypes = 2;
      case 2: {
        if (tag == 16) {
         parse_infotypes:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_infotypes())));
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_infotypes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infotypes;
        if (input->ExpectTag(24)) goto parse_clearold;
        break;
      }

      // optional bool clearold = 3;
      case 3: {
        if (tag == 24) {
         parse_clearold:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &clearold_)));
          set_has_clearold();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.AddMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.AddMonitor)
  return false;
#undef DO_
}

void AddMonitor::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.AddMonitor)
  // repeated string callLetters = 1;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->callletters(i), output);
  }

  // repeated int32 infotypes = 2;
  for (int i = 0; i < this->infotypes_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->infotypes(i), output);
  }

  // optional bool clearold = 3;
  if (has_clearold()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->clearold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.AddMonitor)
}

::google_public::protobuf::uint8* AddMonitor::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.AddMonitor)
  // repeated string callLetters = 1;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->callletters(i), target);
  }

  // repeated int32 infotypes = 2;
  for (int i = 0; i < this->infotypes_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->infotypes(i), target);
  }

  // optional bool clearold = 3;
  if (has_clearold()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->clearold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.AddMonitor)
  return target;
}

int AddMonitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool clearold = 3;
    if (has_clearold()) {
      total_size += 1 + 1;
    }

  }
  // repeated string callLetters = 1;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  // repeated int32 infotypes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->infotypes_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->infotypes(i));
    }
    total_size += 1 * this->infotypes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMonitor::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMonitor* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const AddMonitor*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMonitor::MergeFrom(const AddMonitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  infotypes_.MergeFrom(from.infotypes_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_clearold()) {
      set_clearold(from.clearold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMonitor::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMonitor::CopyFrom(const AddMonitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMonitor::IsInitialized() const {

  return true;
}

void AddMonitor::Swap(AddMonitor* other) {
  if (other != this) {
    callletters_.Swap(&other->callletters_);
    infotypes_.Swap(&other->infotypes_);
    std::swap(clearold_, other->clearold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata AddMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = AddMonitor_descriptor_;
  metadata.reflection = AddMonitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddMonitor_ACK::kRetcodeFieldNumber;
const int AddMonitor_ACK::kRetmsgFieldNumber;
const int AddMonitor_ACK::kCallLettersFieldNumber;
#endif  // !_MSC_VER

AddMonitor_ACK::AddMonitor_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.AddMonitor_ACK)
}

void AddMonitor_ACK::InitAsDefaultInstance() {
}

AddMonitor_ACK::AddMonitor_ACK(const AddMonitor_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.AddMonitor_ACK)
}

void AddMonitor_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddMonitor_ACK::~AddMonitor_ACK() {
  // @@protoc_insertion_point(destructor:gboss.AddMonitor_ACK)
  SharedDtor();
}

void AddMonitor_ACK::SharedDtor() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (this != default_instance_) {
  }
}

void AddMonitor_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* AddMonitor_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddMonitor_ACK_descriptor_;
}

const AddMonitor_ACK& AddMonitor_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

AddMonitor_ACK* AddMonitor_ACK::default_instance_ = NULL;

AddMonitor_ACK* AddMonitor_ACK::New() const {
  return new AddMonitor_ACK;
}

void AddMonitor_ACK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0;
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
  }
  callletters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddMonitor_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.AddMonitor_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callLetters;
        break;
      }

      // repeated string callLetters = 3;
      case 3: {
        if (tag == 26) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callLetters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.AddMonitor_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.AddMonitor_ACK)
  return false;
#undef DO_
}

void AddMonitor_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.AddMonitor_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retmsg(), output);
  }

  // repeated string callLetters = 3;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->callletters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.AddMonitor_ACK)
}

::google_public::protobuf::uint8* AddMonitor_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.AddMonitor_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retmsg(), target);
  }

  // repeated string callLetters = 3;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->callletters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.AddMonitor_ACK)
  return target;
}

int AddMonitor_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

  }
  // repeated string callLetters = 3;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddMonitor_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddMonitor_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const AddMonitor_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddMonitor_ACK::MergeFrom(const AddMonitor_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddMonitor_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddMonitor_ACK::CopyFrom(const AddMonitor_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddMonitor_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddMonitor_ACK::Swap(AddMonitor_ACK* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    callletters_.Swap(&other->callletters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata AddMonitor_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = AddMonitor_ACK_descriptor_;
  metadata.reflection = AddMonitor_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMonitor::kCallLettersFieldNumber;
const int RemoveMonitor::kInfotypesFieldNumber;
#endif  // !_MSC_VER

RemoveMonitor::RemoveMonitor()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.RemoveMonitor)
}

void RemoveMonitor::InitAsDefaultInstance() {
}

RemoveMonitor::RemoveMonitor(const RemoveMonitor& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.RemoveMonitor)
}

void RemoveMonitor::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMonitor::~RemoveMonitor() {
  // @@protoc_insertion_point(destructor:gboss.RemoveMonitor)
  SharedDtor();
}

void RemoveMonitor::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemoveMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* RemoveMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMonitor_descriptor_;
}

const RemoveMonitor& RemoveMonitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

RemoveMonitor* RemoveMonitor::default_instance_ = NULL;

RemoveMonitor* RemoveMonitor::New() const {
  return new RemoveMonitor;
}

void RemoveMonitor::Clear() {
  callletters_.Clear();
  infotypes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMonitor::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.RemoveMonitor)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string callLetters = 1;
      case 1: {
        if (tag == 10) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(10)) goto parse_callLetters;
        if (input->ExpectTag(16)) goto parse_infotypes;
        break;
      }

      // repeated int32 infotypes = 2;
      case 2: {
        if (tag == 16) {
         parse_infotypes:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_infotypes())));
        } else if (tag == 18) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_infotypes())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infotypes;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.RemoveMonitor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.RemoveMonitor)
  return false;
#undef DO_
}

void RemoveMonitor::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.RemoveMonitor)
  // repeated string callLetters = 1;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      1, this->callletters(i), output);
  }

  // repeated int32 infotypes = 2;
  for (int i = 0; i < this->infotypes_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->infotypes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.RemoveMonitor)
}

::google_public::protobuf::uint8* RemoveMonitor::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.RemoveMonitor)
  // repeated string callLetters = 1;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->callletters(i), target);
  }

  // repeated int32 infotypes = 2;
  for (int i = 0; i < this->infotypes_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->infotypes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.RemoveMonitor)
  return target;
}

int RemoveMonitor::ByteSize() const {
  int total_size = 0;

  // repeated string callLetters = 1;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  // repeated int32 infotypes = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->infotypes_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->infotypes(i));
    }
    total_size += 1 * this->infotypes_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMonitor::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMonitor* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const RemoveMonitor*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMonitor::MergeFrom(const RemoveMonitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  infotypes_.MergeFrom(from.infotypes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMonitor::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMonitor::CopyFrom(const RemoveMonitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMonitor::IsInitialized() const {

  return true;
}

void RemoveMonitor::Swap(RemoveMonitor* other) {
  if (other != this) {
    callletters_.Swap(&other->callletters_);
    infotypes_.Swap(&other->infotypes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata RemoveMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMonitor_descriptor_;
  metadata.reflection = RemoveMonitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemoveMonitor_ACK::kRetcodeFieldNumber;
const int RemoveMonitor_ACK::kRetmsgFieldNumber;
const int RemoveMonitor_ACK::kCallLettersFieldNumber;
#endif  // !_MSC_VER

RemoveMonitor_ACK::RemoveMonitor_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.RemoveMonitor_ACK)
}

void RemoveMonitor_ACK::InitAsDefaultInstance() {
}

RemoveMonitor_ACK::RemoveMonitor_ACK(const RemoveMonitor_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.RemoveMonitor_ACK)
}

void RemoveMonitor_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemoveMonitor_ACK::~RemoveMonitor_ACK() {
  // @@protoc_insertion_point(destructor:gboss.RemoveMonitor_ACK)
  SharedDtor();
}

void RemoveMonitor_ACK::SharedDtor() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (this != default_instance_) {
  }
}

void RemoveMonitor_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* RemoveMonitor_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemoveMonitor_ACK_descriptor_;
}

const RemoveMonitor_ACK& RemoveMonitor_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

RemoveMonitor_ACK* RemoveMonitor_ACK::default_instance_ = NULL;

RemoveMonitor_ACK* RemoveMonitor_ACK::New() const {
  return new RemoveMonitor_ACK;
}

void RemoveMonitor_ACK::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    retcode_ = 0;
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
  }
  callletters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemoveMonitor_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.RemoveMonitor_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callLetters;
        break;
      }

      // repeated string callLetters = 3;
      case 3: {
        if (tag == 26) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_callLetters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.RemoveMonitor_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.RemoveMonitor_ACK)
  return false;
#undef DO_
}

void RemoveMonitor_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.RemoveMonitor_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retmsg(), output);
  }

  // repeated string callLetters = 3;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      3, this->callletters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.RemoveMonitor_ACK)
}

::google_public::protobuf::uint8* RemoveMonitor_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.RemoveMonitor_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retmsg(), target);
  }

  // repeated string callLetters = 3;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->callletters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.RemoveMonitor_ACK)
  return target;
}

int RemoveMonitor_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

  }
  // repeated string callLetters = 3;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveMonitor_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemoveMonitor_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const RemoveMonitor_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemoveMonitor_ACK::MergeFrom(const RemoveMonitor_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemoveMonitor_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemoveMonitor_ACK::CopyFrom(const RemoveMonitor_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveMonitor_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RemoveMonitor_ACK::Swap(RemoveMonitor_ACK* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    callletters_.Swap(&other->callletters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata RemoveMonitor_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = RemoveMonitor_ACK_descriptor_;
  metadata.reflection = RemoveMonitor_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverUnitLoginOut::kCallLetterFieldNumber;
const int DeliverUnitLoginOut::kInoroutFieldNumber;
const int DeliverUnitLoginOut::kGatewayidFieldNumber;
const int DeliverUnitLoginOut::kGatewaytypeFieldNumber;
const int DeliverUnitLoginOut::kLoginTimeFieldNumber;
const int DeliverUnitLoginOut::kLogoutTimeFieldNumber;
const int DeliverUnitLoginOut::kUnitversionFieldNumber;
const int DeliverUnitLoginOut::kUpgradegatewayFieldNumber;
#endif  // !_MSC_VER

DeliverUnitLoginOut::DeliverUnitLoginOut()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverUnitLoginOut)
}

void DeliverUnitLoginOut::InitAsDefaultInstance() {
}

DeliverUnitLoginOut::DeliverUnitLoginOut(const DeliverUnitLoginOut& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverUnitLoginOut)
}

void DeliverUnitLoginOut::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  inorout_ = 0;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  logintime_ = GOOGLE_LONGLONG(0);
  logouttime_ = GOOGLE_LONGLONG(0);
  unitversion_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  upgradegateway_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverUnitLoginOut::~DeliverUnitLoginOut() {
  // @@protoc_insertion_point(destructor:gboss.DeliverUnitLoginOut)
  SharedDtor();
}

void DeliverUnitLoginOut::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (unitversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete unitversion_;
  }
  if (this != default_instance_) {
  }
}

void DeliverUnitLoginOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverUnitLoginOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverUnitLoginOut_descriptor_;
}

const DeliverUnitLoginOut& DeliverUnitLoginOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverUnitLoginOut* DeliverUnitLoginOut::default_instance_ = NULL;

DeliverUnitLoginOut* DeliverUnitLoginOut::New() const {
  return new DeliverUnitLoginOut;
}

void DeliverUnitLoginOut::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverUnitLoginOut*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(inorout_, upgradegateway_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_unitversion()) {
      if (unitversion_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        unitversion_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverUnitLoginOut::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverUnitLoginOut)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_inorout;
        break;
      }

      // required int32 inorout = 2;
      case 2: {
        if (tag == 16) {
         parse_inorout:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &inorout_)));
          set_has_inorout();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 4;
      case 4: {
        if (tag == 32) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_loginTime;
        break;
      }

      // optional int64 loginTime = 5;
      case 5: {
        if (tag == 40) {
         parse_loginTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_logoutTime;
        break;
      }

      // optional int64 logoutTime = 6;
      case 6: {
        if (tag == 48) {
         parse_logoutTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &logouttime_)));
          set_has_logouttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_unitversion;
        break;
      }

      // optional string unitversion = 7;
      case 7: {
        if (tag == 58) {
         parse_unitversion:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_unitversion()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->unitversion().data(), this->unitversion().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "unitversion");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_upgradegateway;
        break;
      }

      // optional bool upgradegateway = 8;
      case 8: {
        if (tag == 64) {
         parse_upgradegateway:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &upgradegateway_)));
          set_has_upgradegateway();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverUnitLoginOut)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverUnitLoginOut)
  return false;
#undef DO_
}

void DeliverUnitLoginOut::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverUnitLoginOut)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int32 inorout = 2;
  if (has_inorout()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->inorout(), output);
  }

  // optional int32 gatewayid = 3;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 4;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->gatewaytype(), output);
  }

  // optional int64 loginTime = 5;
  if (has_logintime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(5, this->logintime(), output);
  }

  // optional int64 logoutTime = 6;
  if (has_logouttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(6, this->logouttime(), output);
  }

  // optional string unitversion = 7;
  if (has_unitversion()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitversion().data(), this->unitversion().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "unitversion");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->unitversion(), output);
  }

  // optional bool upgradegateway = 8;
  if (has_upgradegateway()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(8, this->upgradegateway(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverUnitLoginOut)
}

::google_public::protobuf::uint8* DeliverUnitLoginOut::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverUnitLoginOut)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int32 inorout = 2;
  if (has_inorout()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->inorout(), target);
  }

  // optional int32 gatewayid = 3;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 4;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->gatewaytype(), target);
  }

  // optional int64 loginTime = 5;
  if (has_logintime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->logintime(), target);
  }

  // optional int64 logoutTime = 6;
  if (has_logouttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->logouttime(), target);
  }

  // optional string unitversion = 7;
  if (has_unitversion()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->unitversion().data(), this->unitversion().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "unitversion");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->unitversion(), target);
  }

  // optional bool upgradegateway = 8;
  if (has_upgradegateway()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->upgradegateway(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverUnitLoginOut)
  return target;
}

int DeliverUnitLoginOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 inorout = 2;
    if (has_inorout()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->inorout());
    }

    // optional int32 gatewayid = 3;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 4;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

    // optional int64 loginTime = 5;
    if (has_logintime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->logintime());
    }

    // optional int64 logoutTime = 6;
    if (has_logouttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->logouttime());
    }

    // optional string unitversion = 7;
    if (has_unitversion()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->unitversion());
    }

    // optional bool upgradegateway = 8;
    if (has_upgradegateway()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverUnitLoginOut::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverUnitLoginOut* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverUnitLoginOut*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverUnitLoginOut::MergeFrom(const DeliverUnitLoginOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_inorout()) {
      set_inorout(from.inorout());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_logouttime()) {
      set_logouttime(from.logouttime());
    }
    if (from.has_unitversion()) {
      set_unitversion(from.unitversion());
    }
    if (from.has_upgradegateway()) {
      set_upgradegateway(from.upgradegateway());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverUnitLoginOut::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverUnitLoginOut::CopyFrom(const DeliverUnitLoginOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverUnitLoginOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeliverUnitLoginOut::Swap(DeliverUnitLoginOut* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(inorout_, other->inorout_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(logintime_, other->logintime_);
    std::swap(logouttime_, other->logouttime_);
    std::swap(unitversion_, other->unitversion_);
    std::swap(upgradegateway_, other->upgradegateway_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverUnitLoginOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverUnitLoginOut_descriptor_;
  metadata.reflection = DeliverUnitLoginOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLastInfo::kInfoTypeFieldNumber;
const int GetLastInfo::kCallLettersFieldNumber;
const int GetLastInfo::kSnFieldNumber;
#endif  // !_MSC_VER

GetLastInfo::GetLastInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GetLastInfo)
}

void GetLastInfo::InitAsDefaultInstance() {
}

GetLastInfo::GetLastInfo(const GetLastInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GetLastInfo)
}

void GetLastInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  infotype_ = 0;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastInfo::~GetLastInfo() {
  // @@protoc_insertion_point(destructor:gboss.GetLastInfo)
  SharedDtor();
}

void GetLastInfo::SharedDtor() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void GetLastInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetLastInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastInfo_descriptor_;
}

const GetLastInfo& GetLastInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

GetLastInfo* GetLastInfo::default_instance_ = NULL;

GetLastInfo* GetLastInfo::New() const {
  return new GetLastInfo;
}

void GetLastInfo::Clear() {
  if (_has_bits_[0 / 32] & 5) {
    infotype_ = 0;
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }
  callletters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GetLastInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 infoType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetters;
        break;
      }

      // repeated string callLetters = 2;
      case 2: {
        if (tag == 18) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetters;
        if (input->ExpectTag(26)) goto parse_sn;
        break;
      }

      // optional string sn = 3;
      case 3: {
        if (tag == 26) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GetLastInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GetLastInfo)
  return false;
#undef DO_
}

void GetLastInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GetLastInfo)
  // required int32 infoType = 1;
  if (has_infotype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->infotype(), output);
  }

  // repeated string callLetters = 2;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->callletters(i), output);
  }

  // optional string sn = 3;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GetLastInfo)
}

::google_public::protobuf::uint8* GetLastInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GetLastInfo)
  // required int32 infoType = 1;
  if (has_infotype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->infotype(), target);
  }

  // repeated string callLetters = 2;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->callletters(i), target);
  }

  // optional string sn = 3;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GetLastInfo)
  return target;
}

int GetLastInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 infoType = 1;
    if (has_infotype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->infotype());
    }

    // optional string sn = 3;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  // repeated string callLetters = 2;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetLastInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastInfo::MergeFrom(const GetLastInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastInfo::CopyFrom(const GetLastInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetLastInfo::Swap(GetLastInfo* other) {
  if (other != this) {
    std::swap(infotype_, other->infotype_);
    callletters_.Swap(&other->callletters_);
    std::swap(sn_, other->sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetLastInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetLastInfo_descriptor_;
  metadata.reflection = GetLastInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetLastInfo_ACK::kRetcodeFieldNumber;
const int GetLastInfo_ACK::kRetmsgFieldNumber;
const int GetLastInfo_ACK::kGpsesFieldNumber;
const int GetLastInfo_ACK::kTravelsFieldNumber;
const int GetLastInfo_ACK::kFaultsFieldNumber;
const int GetLastInfo_ACK::kSnFieldNumber;
const int GetLastInfo_ACK::kOperatesFieldNumber;
const int GetLastInfo_ACK::kSmsFieldNumber;
const int GetLastInfo_ACK::kAlarmsFieldNumber;
const int GetLastInfo_ACK::kObdsFieldNumber;
const int GetLastInfo_ACK::kUnitloginoutFieldNumber;
#endif  // !_MSC_VER

GetLastInfo_ACK::GetLastInfo_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GetLastInfo_ACK)
}

void GetLastInfo_ACK::InitAsDefaultInstance() {
}

GetLastInfo_ACK::GetLastInfo_ACK(const GetLastInfo_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GetLastInfo_ACK)
}

void GetLastInfo_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetLastInfo_ACK::~GetLastInfo_ACK() {
  // @@protoc_insertion_point(destructor:gboss.GetLastInfo_ACK)
  SharedDtor();
}

void GetLastInfo_ACK::SharedDtor() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void GetLastInfo_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetLastInfo_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetLastInfo_ACK_descriptor_;
}

const GetLastInfo_ACK& GetLastInfo_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

GetLastInfo_ACK* GetLastInfo_ACK::default_instance_ = NULL;

GetLastInfo_ACK* GetLastInfo_ACK::New() const {
  return new GetLastInfo_ACK;
}

void GetLastInfo_ACK::Clear() {
  if (_has_bits_[0 / 32] & 35) {
    retcode_ = 0;
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }
  gpses_.Clear();
  travels_.Clear();
  faults_.Clear();
  operates_.Clear();
  sms_.Clear();
  alarms_.Clear();
  obds_.Clear();
  unitloginout_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetLastInfo_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GetLastInfo_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gpses;
        break;
      }

      // repeated .gboss.GpsInfo gpses = 3;
      case 3: {
        if (tag == 26) {
         parse_gpses:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_gpses;
        if (input->ExpectTag(34)) goto parse_travels;
        break;
      }

      // repeated .gboss.TravelInfo travels = 4;
      case 4: {
        if (tag == 34) {
         parse_travels:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_travels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_travels;
        if (input->ExpectTag(42)) goto parse_faults;
        break;
      }

      // repeated .gboss.FaultInfo faults = 5;
      case 5: {
        if (tag == 42) {
         parse_faults:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_faults;
        if (input->ExpectTag(50)) goto parse_sn;
        break;
      }

      // optional string sn = 6;
      case 6: {
        if (tag == 50) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_operates;
        break;
      }

      // repeated .gboss.OperateData operates = 7;
      case 7: {
        if (tag == 58) {
         parse_operates:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_operates;
        if (input->ExpectTag(66)) goto parse_sms;
        break;
      }

      // repeated .gboss.ShortMessage sms = 8;
      case 8: {
        if (tag == 66) {
         parse_sms:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sms;
        if (input->ExpectTag(74)) goto parse_alarms;
        break;
      }

      // repeated .gboss.AlarmInfo alarms = 9;
      case 9: {
        if (tag == 74) {
         parse_alarms:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alarms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_alarms;
        if (input->ExpectTag(82)) goto parse_obds;
        break;
      }

      // repeated .gboss.OBDInfo obds = 10;
      case 10: {
        if (tag == 82) {
         parse_obds:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_obds;
        if (input->ExpectTag(90)) goto parse_unitloginout;
        break;
      }

      // repeated .gboss.DeliverUnitLoginOut unitloginout = 11;
      case 11: {
        if (tag == 90) {
         parse_unitloginout:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitloginout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_unitloginout;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GetLastInfo_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GetLastInfo_ACK)
  return false;
#undef DO_
}

void GetLastInfo_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GetLastInfo_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retmsg(), output);
  }

  // repeated .gboss.GpsInfo gpses = 3;
  for (int i = 0; i < this->gpses_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->gpses(i), output);
  }

  // repeated .gboss.TravelInfo travels = 4;
  for (int i = 0; i < this->travels_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->travels(i), output);
  }

  // repeated .gboss.FaultInfo faults = 5;
  for (int i = 0; i < this->faults_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->faults(i), output);
  }

  // optional string sn = 6;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->sn(), output);
  }

  // repeated .gboss.OperateData operates = 7;
  for (int i = 0; i < this->operates_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->operates(i), output);
  }

  // repeated .gboss.ShortMessage sms = 8;
  for (int i = 0; i < this->sms_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->sms(i), output);
  }

  // repeated .gboss.AlarmInfo alarms = 9;
  for (int i = 0; i < this->alarms_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->alarms(i), output);
  }

  // repeated .gboss.OBDInfo obds = 10;
  for (int i = 0; i < this->obds_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->obds(i), output);
  }

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 11;
  for (int i = 0; i < this->unitloginout_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->unitloginout(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GetLastInfo_ACK)
}

::google_public::protobuf::uint8* GetLastInfo_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GetLastInfo_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retmsg(), target);
  }

  // repeated .gboss.GpsInfo gpses = 3;
  for (int i = 0; i < this->gpses_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->gpses(i), target);
  }

  // repeated .gboss.TravelInfo travels = 4;
  for (int i = 0; i < this->travels_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->travels(i), target);
  }

  // repeated .gboss.FaultInfo faults = 5;
  for (int i = 0; i < this->faults_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->faults(i), target);
  }

  // optional string sn = 6;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sn(), target);
  }

  // repeated .gboss.OperateData operates = 7;
  for (int i = 0; i < this->operates_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->operates(i), target);
  }

  // repeated .gboss.ShortMessage sms = 8;
  for (int i = 0; i < this->sms_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->sms(i), target);
  }

  // repeated .gboss.AlarmInfo alarms = 9;
  for (int i = 0; i < this->alarms_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->alarms(i), target);
  }

  // repeated .gboss.OBDInfo obds = 10;
  for (int i = 0; i < this->obds_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->obds(i), target);
  }

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 11;
  for (int i = 0; i < this->unitloginout_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->unitloginout(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GetLastInfo_ACK)
  return target;
}

int GetLastInfo_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // optional string sn = 6;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  // repeated .gboss.GpsInfo gpses = 3;
  total_size += 1 * this->gpses_size();
  for (int i = 0; i < this->gpses_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpses(i));
  }

  // repeated .gboss.TravelInfo travels = 4;
  total_size += 1 * this->travels_size();
  for (int i = 0; i < this->travels_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->travels(i));
  }

  // repeated .gboss.FaultInfo faults = 5;
  total_size += 1 * this->faults_size();
  for (int i = 0; i < this->faults_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faults(i));
  }

  // repeated .gboss.OperateData operates = 7;
  total_size += 1 * this->operates_size();
  for (int i = 0; i < this->operates_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operates(i));
  }

  // repeated .gboss.ShortMessage sms = 8;
  total_size += 1 * this->sms_size();
  for (int i = 0; i < this->sms_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sms(i));
  }

  // repeated .gboss.AlarmInfo alarms = 9;
  total_size += 1 * this->alarms_size();
  for (int i = 0; i < this->alarms_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alarms(i));
  }

  // repeated .gboss.OBDInfo obds = 10;
  total_size += 1 * this->obds_size();
  for (int i = 0; i < this->obds_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obds(i));
  }

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 11;
  total_size += 1 * this->unitloginout_size();
  for (int i = 0; i < this->unitloginout_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitloginout(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetLastInfo_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetLastInfo_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetLastInfo_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetLastInfo_ACK::MergeFrom(const GetLastInfo_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpses_.MergeFrom(from.gpses_);
  travels_.MergeFrom(from.travels_);
  faults_.MergeFrom(from.faults_);
  operates_.MergeFrom(from.operates_);
  sms_.MergeFrom(from.sms_);
  alarms_.MergeFrom(from.alarms_);
  obds_.MergeFrom(from.obds_);
  unitloginout_.MergeFrom(from.unitloginout_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetLastInfo_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetLastInfo_ACK::CopyFrom(const GetLastInfo_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetLastInfo_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (!::google_public::protobuf::internal::AllAreInitialized(this->gpses())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->travels())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->faults())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->operates())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->sms())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->alarms())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->obds())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->unitloginout())) return false;
  return true;
}

void GetLastInfo_ACK::Swap(GetLastInfo_ACK* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    gpses_.Swap(&other->gpses_);
    travels_.Swap(&other->travels_);
    faults_.Swap(&other->faults_);
    std::swap(sn_, other->sn_);
    operates_.Swap(&other->operates_);
    sms_.Swap(&other->sms_);
    alarms_.Swap(&other->alarms_);
    obds_.Swap(&other->obds_);
    unitloginout_.Swap(&other->unitloginout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetLastInfo_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetLastInfo_ACK_descriptor_;
  metadata.reflection = GetLastInfo_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHistoryInfo::kCallLetterFieldNumber;
const int GetHistoryInfo::kInfoTypeFieldNumber;
const int GetHistoryInfo::kStarttimeFieldNumber;
const int GetHistoryInfo::kEndtimeFieldNumber;
const int GetHistoryInfo::kPageNumberFieldNumber;
const int GetHistoryInfo::kTotalNumberFieldNumber;
const int GetHistoryInfo::kAutonextpageFieldNumber;
const int GetHistoryInfo::kSnFieldNumber;
const int GetHistoryInfo::kReversedFieldNumber;
#endif  // !_MSC_VER

GetHistoryInfo::GetHistoryInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GetHistoryInfo)
}

void GetHistoryInfo::InitAsDefaultInstance() {
}

GetHistoryInfo::GetHistoryInfo(const GetHistoryInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GetHistoryInfo)
}

void GetHistoryInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  infotype_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  pagenumber_ = 0;
  totalnumber_ = 0;
  autonextpage_ = false;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  reversed_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHistoryInfo::~GetHistoryInfo() {
  // @@protoc_insertion_point(destructor:gboss.GetHistoryInfo)
  SharedDtor();
}

void GetHistoryInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void GetHistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetHistoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistoryInfo_descriptor_;
}

const GetHistoryInfo& GetHistoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

GetHistoryInfo* GetHistoryInfo::default_instance_ = NULL;

GetHistoryInfo* GetHistoryInfo::New() const {
  return new GetHistoryInfo;
}

void GetHistoryInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetHistoryInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(starttime_, autonextpage_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }
  reversed_ = false;

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHistoryInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GetHistoryInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infoType;
        break;
      }

      // required int32 infoType = 2;
      case 2: {
        if (tag == 16) {
         parse_infoType:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_starttime;
        break;
      }

      // required int64 starttime = 3;
      case 3: {
        if (tag == 24) {
         parse_starttime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_endtime;
        break;
      }

      // required int64 endtime = 4;
      case 4: {
        if (tag == 32) {
         parse_endtime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_pageNumber;
        break;
      }

      // optional int32 pageNumber = 5;
      case 5: {
        if (tag == 40) {
         parse_pageNumber:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pagenumber_)));
          set_has_pagenumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_totalNumber;
        break;
      }

      // optional int32 totalNumber = 6;
      case 6: {
        if (tag == 48) {
         parse_totalNumber:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumber_)));
          set_has_totalnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_autonextpage;
        break;
      }

      // optional bool autonextpage = 7;
      case 7: {
        if (tag == 56) {
         parse_autonextpage:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &autonextpage_)));
          set_has_autonextpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_sn;
        break;
      }

      // optional string sn = 8;
      case 8: {
        if (tag == 66) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_reversed;
        break;
      }

      // optional bool reversed = 9;
      case 9: {
        if (tag == 72) {
         parse_reversed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &reversed_)));
          set_has_reversed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GetHistoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GetHistoryInfo)
  return false;
#undef DO_
}

void GetHistoryInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GetHistoryInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->infotype(), output);
  }

  // required int64 starttime = 3;
  if (has_starttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(3, this->starttime(), output);
  }

  // required int64 endtime = 4;
  if (has_endtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(4, this->endtime(), output);
  }

  // optional int32 pageNumber = 5;
  if (has_pagenumber()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->pagenumber(), output);
  }

  // optional int32 totalNumber = 6;
  if (has_totalnumber()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalnumber(), output);
  }

  // optional bool autonextpage = 7;
  if (has_autonextpage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(7, this->autonextpage(), output);
  }

  // optional string sn = 8;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->sn(), output);
  }

  // optional bool reversed = 9;
  if (has_reversed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(9, this->reversed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GetHistoryInfo)
}

::google_public::protobuf::uint8* GetHistoryInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GetHistoryInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->infotype(), target);
  }

  // required int64 starttime = 3;
  if (has_starttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->starttime(), target);
  }

  // required int64 endtime = 4;
  if (has_endtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->endtime(), target);
  }

  // optional int32 pageNumber = 5;
  if (has_pagenumber()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pagenumber(), target);
  }

  // optional int32 totalNumber = 6;
  if (has_totalnumber()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalnumber(), target);
  }

  // optional bool autonextpage = 7;
  if (has_autonextpage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->autonextpage(), target);
  }

  // optional string sn = 8;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->sn(), target);
  }

  // optional bool reversed = 9;
  if (has_reversed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->reversed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GetHistoryInfo)
  return target;
}

int GetHistoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 infoType = 2;
    if (has_infotype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->infotype());
    }

    // required int64 starttime = 3;
    if (has_starttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // required int64 endtime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 pageNumber = 5;
    if (has_pagenumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->pagenumber());
    }

    // optional int32 totalNumber = 6;
    if (has_totalnumber()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumber());
    }

    // optional bool autonextpage = 7;
    if (has_autonextpage()) {
      total_size += 1 + 1;
    }

    // optional string sn = 8;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool reversed = 9;
    if (has_reversed()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistoryInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHistoryInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetHistoryInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHistoryInfo::MergeFrom(const GetHistoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_pagenumber()) {
      set_pagenumber(from.pagenumber());
    }
    if (from.has_totalnumber()) {
      set_totalnumber(from.totalnumber());
    }
    if (from.has_autonextpage()) {
      set_autonextpage(from.autonextpage());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_reversed()) {
      set_reversed(from.reversed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHistoryInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistoryInfo::CopyFrom(const GetHistoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetHistoryInfo::Swap(GetHistoryInfo* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(infotype_, other->infotype_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(pagenumber_, other->pagenumber_);
    std::swap(totalnumber_, other->totalnumber_);
    std::swap(autonextpage_, other->autonextpage_);
    std::swap(sn_, other->sn_);
    std::swap(reversed_, other->reversed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetHistoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetHistoryInfo_descriptor_;
  metadata.reflection = GetHistoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHistoryInfoNextPage::kCallLetterFieldNumber;
const int GetHistoryInfoNextPage::kInfoTypeFieldNumber;
const int GetHistoryInfoNextPage::kSnFieldNumber;
#endif  // !_MSC_VER

GetHistoryInfoNextPage::GetHistoryInfoNextPage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GetHistoryInfoNextPage)
}

void GetHistoryInfoNextPage::InitAsDefaultInstance() {
}

GetHistoryInfoNextPage::GetHistoryInfoNextPage(const GetHistoryInfoNextPage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GetHistoryInfoNextPage)
}

void GetHistoryInfoNextPage::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  infotype_ = 0;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHistoryInfoNextPage::~GetHistoryInfoNextPage() {
  // @@protoc_insertion_point(destructor:gboss.GetHistoryInfoNextPage)
  SharedDtor();
}

void GetHistoryInfoNextPage::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void GetHistoryInfoNextPage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetHistoryInfoNextPage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistoryInfoNextPage_descriptor_;
}

const GetHistoryInfoNextPage& GetHistoryInfoNextPage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

GetHistoryInfoNextPage* GetHistoryInfoNextPage::default_instance_ = NULL;

GetHistoryInfoNextPage* GetHistoryInfoNextPage::New() const {
  return new GetHistoryInfoNextPage;
}

void GetHistoryInfoNextPage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    infotype_ = 0;
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHistoryInfoNextPage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GetHistoryInfoNextPage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infoType;
        break;
      }

      // required int32 infoType = 2;
      case 2: {
        if (tag == 16) {
         parse_infoType:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sn;
        break;
      }

      // optional string sn = 3;
      case 3: {
        if (tag == 26) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GetHistoryInfoNextPage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GetHistoryInfoNextPage)
  return false;
#undef DO_
}

void GetHistoryInfoNextPage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GetHistoryInfoNextPage)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->infotype(), output);
  }

  // optional string sn = 3;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GetHistoryInfoNextPage)
}

::google_public::protobuf::uint8* GetHistoryInfoNextPage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GetHistoryInfoNextPage)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->infotype(), target);
  }

  // optional string sn = 3;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GetHistoryInfoNextPage)
  return target;
}

int GetHistoryInfoNextPage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 infoType = 2;
    if (has_infotype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->infotype());
    }

    // optional string sn = 3;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistoryInfoNextPage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHistoryInfoNextPage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetHistoryInfoNextPage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHistoryInfoNextPage::MergeFrom(const GetHistoryInfoNextPage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHistoryInfoNextPage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistoryInfoNextPage::CopyFrom(const GetHistoryInfoNextPage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoryInfoNextPage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GetHistoryInfoNextPage::Swap(GetHistoryInfoNextPage* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(infotype_, other->infotype_);
    std::swap(sn_, other->sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetHistoryInfoNextPage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetHistoryInfoNextPage_descriptor_;
  metadata.reflection = GetHistoryInfoNextPage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHistoryInfo_ACK::kRetcodeFieldNumber;
const int GetHistoryInfo_ACK::kRetmsgFieldNumber;
const int GetHistoryInfo_ACK::kLastPageFieldNumber;
const int GetHistoryInfo_ACK::kGpsesFieldNumber;
const int GetHistoryInfo_ACK::kTravelsFieldNumber;
const int GetHistoryInfo_ACK::kFaultsFieldNumber;
const int GetHistoryInfo_ACK::kSnFieldNumber;
const int GetHistoryInfo_ACK::kOperatesFieldNumber;
const int GetHistoryInfo_ACK::kSmsFieldNumber;
const int GetHistoryInfo_ACK::kAlarmsFieldNumber;
const int GetHistoryInfo_ACK::kObdsFieldNumber;
const int GetHistoryInfo_ACK::kUnitloginoutFieldNumber;
#endif  // !_MSC_VER

GetHistoryInfo_ACK::GetHistoryInfo_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GetHistoryInfo_ACK)
}

void GetHistoryInfo_ACK::InitAsDefaultInstance() {
}

GetHistoryInfo_ACK::GetHistoryInfo_ACK(const GetHistoryInfo_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GetHistoryInfo_ACK)
}

void GetHistoryInfo_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  lastpage_ = false;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHistoryInfo_ACK::~GetHistoryInfo_ACK() {
  // @@protoc_insertion_point(destructor:gboss.GetHistoryInfo_ACK)
  SharedDtor();
}

void GetHistoryInfo_ACK::SharedDtor() {
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void GetHistoryInfo_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetHistoryInfo_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistoryInfo_ACK_descriptor_;
}

const GetHistoryInfo_ACK& GetHistoryInfo_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

GetHistoryInfo_ACK* GetHistoryInfo_ACK::default_instance_ = NULL;

GetHistoryInfo_ACK* GetHistoryInfo_ACK::New() const {
  return new GetHistoryInfo_ACK;
}

void GetHistoryInfo_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetHistoryInfo_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 71) {
    ZR_(retcode_, lastpage_);
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gpses_.Clear();
  travels_.Clear();
  faults_.Clear();
  operates_.Clear();
  sms_.Clear();
  alarms_.Clear();
  obds_.Clear();
  unitloginout_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHistoryInfo_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GetHistoryInfo_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 retcode = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 2;
      case 2: {
        if (tag == 18) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lastPage;
        break;
      }

      // required bool lastPage = 3;
      case 3: {
        if (tag == 24) {
         parse_lastPage:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastpage_)));
          set_has_lastpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gpses;
        break;
      }

      // repeated .gboss.GpsInfo gpses = 4;
      case 4: {
        if (tag == 34) {
         parse_gpses:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_gpses;
        if (input->ExpectTag(42)) goto parse_travels;
        break;
      }

      // repeated .gboss.TravelInfo travels = 5;
      case 5: {
        if (tag == 42) {
         parse_travels:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_travels()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_travels;
        if (input->ExpectTag(50)) goto parse_faults;
        break;
      }

      // repeated .gboss.FaultInfo faults = 6;
      case 6: {
        if (tag == 50) {
         parse_faults:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_faults;
        if (input->ExpectTag(58)) goto parse_sn;
        break;
      }

      // optional string sn = 7;
      case 7: {
        if (tag == 58) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_operates;
        break;
      }

      // repeated .gboss.OperateData operates = 8;
      case 8: {
        if (tag == 66) {
         parse_operates:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_operates()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_operates;
        if (input->ExpectTag(74)) goto parse_sms;
        break;
      }

      // repeated .gboss.ShortMessage sms = 9;
      case 9: {
        if (tag == 74) {
         parse_sms:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_sms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(74)) goto parse_sms;
        if (input->ExpectTag(82)) goto parse_alarms;
        break;
      }

      // repeated .gboss.AlarmInfo alarms = 10;
      case 10: {
        if (tag == 82) {
         parse_alarms:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_alarms()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(82)) goto parse_alarms;
        if (input->ExpectTag(90)) goto parse_obds;
        break;
      }

      // repeated .gboss.OBDInfo obds = 11;
      case 11: {
        if (tag == 90) {
         parse_obds:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_obds()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_obds;
        if (input->ExpectTag(98)) goto parse_unitloginout;
        break;
      }

      // repeated .gboss.DeliverUnitLoginOut unitloginout = 12;
      case 12: {
        if (tag == 98) {
         parse_unitloginout:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_unitloginout()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(98)) goto parse_unitloginout;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GetHistoryInfo_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GetHistoryInfo_ACK)
  return false;
#undef DO_
}

void GetHistoryInfo_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GetHistoryInfo_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->retcode(), output);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->retmsg(), output);
  }

  // required bool lastPage = 3;
  if (has_lastpage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(3, this->lastpage(), output);
  }

  // repeated .gboss.GpsInfo gpses = 4;
  for (int i = 0; i < this->gpses_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->gpses(i), output);
  }

  // repeated .gboss.TravelInfo travels = 5;
  for (int i = 0; i < this->travels_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->travels(i), output);
  }

  // repeated .gboss.FaultInfo faults = 6;
  for (int i = 0; i < this->faults_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->faults(i), output);
  }

  // optional string sn = 7;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->sn(), output);
  }

  // repeated .gboss.OperateData operates = 8;
  for (int i = 0; i < this->operates_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->operates(i), output);
  }

  // repeated .gboss.ShortMessage sms = 9;
  for (int i = 0; i < this->sms_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->sms(i), output);
  }

  // repeated .gboss.AlarmInfo alarms = 10;
  for (int i = 0; i < this->alarms_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->alarms(i), output);
  }

  // repeated .gboss.OBDInfo obds = 11;
  for (int i = 0; i < this->obds_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->obds(i), output);
  }

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 12;
  for (int i = 0; i < this->unitloginout_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->unitloginout(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GetHistoryInfo_ACK)
}

::google_public::protobuf::uint8* GetHistoryInfo_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GetHistoryInfo_ACK)
  // required int32 retcode = 1;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->retcode(), target);
  }

  // optional string retmsg = 2;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->retmsg(), target);
  }

  // required bool lastPage = 3;
  if (has_lastpage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->lastpage(), target);
  }

  // repeated .gboss.GpsInfo gpses = 4;
  for (int i = 0; i < this->gpses_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->gpses(i), target);
  }

  // repeated .gboss.TravelInfo travels = 5;
  for (int i = 0; i < this->travels_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->travels(i), target);
  }

  // repeated .gboss.FaultInfo faults = 6;
  for (int i = 0; i < this->faults_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->faults(i), target);
  }

  // optional string sn = 7;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->sn(), target);
  }

  // repeated .gboss.OperateData operates = 8;
  for (int i = 0; i < this->operates_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->operates(i), target);
  }

  // repeated .gboss.ShortMessage sms = 9;
  for (int i = 0; i < this->sms_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->sms(i), target);
  }

  // repeated .gboss.AlarmInfo alarms = 10;
  for (int i = 0; i < this->alarms_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->alarms(i), target);
  }

  // repeated .gboss.OBDInfo obds = 11;
  for (int i = 0; i < this->obds_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->obds(i), target);
  }

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 12;
  for (int i = 0; i < this->unitloginout_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->unitloginout(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GetHistoryInfo_ACK)
  return target;
}

int GetHistoryInfo_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 retcode = 1;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 2;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // required bool lastPage = 3;
    if (has_lastpage()) {
      total_size += 1 + 1;
    }

    // optional string sn = 7;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  // repeated .gboss.GpsInfo gpses = 4;
  total_size += 1 * this->gpses_size();
  for (int i = 0; i < this->gpses_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpses(i));
  }

  // repeated .gboss.TravelInfo travels = 5;
  total_size += 1 * this->travels_size();
  for (int i = 0; i < this->travels_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->travels(i));
  }

  // repeated .gboss.FaultInfo faults = 6;
  total_size += 1 * this->faults_size();
  for (int i = 0; i < this->faults_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faults(i));
  }

  // repeated .gboss.OperateData operates = 8;
  total_size += 1 * this->operates_size();
  for (int i = 0; i < this->operates_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->operates(i));
  }

  // repeated .gboss.ShortMessage sms = 9;
  total_size += 1 * this->sms_size();
  for (int i = 0; i < this->sms_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->sms(i));
  }

  // repeated .gboss.AlarmInfo alarms = 10;
  total_size += 1 * this->alarms_size();
  for (int i = 0; i < this->alarms_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->alarms(i));
  }

  // repeated .gboss.OBDInfo obds = 11;
  total_size += 1 * this->obds_size();
  for (int i = 0; i < this->obds_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->obds(i));
  }

  // repeated .gboss.DeliverUnitLoginOut unitloginout = 12;
  total_size += 1 * this->unitloginout_size();
  for (int i = 0; i < this->unitloginout_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->unitloginout(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistoryInfo_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHistoryInfo_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetHistoryInfo_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHistoryInfo_ACK::MergeFrom(const GetHistoryInfo_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpses_.MergeFrom(from.gpses_);
  travels_.MergeFrom(from.travels_);
  faults_.MergeFrom(from.faults_);
  operates_.MergeFrom(from.operates_);
  sms_.MergeFrom(from.sms_);
  alarms_.MergeFrom(from.alarms_);
  obds_.MergeFrom(from.obds_);
  unitloginout_.MergeFrom(from.unitloginout_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
    if (from.has_lastpage()) {
      set_lastpage(from.lastpage());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHistoryInfo_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistoryInfo_ACK::CopyFrom(const GetHistoryInfo_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistoryInfo_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (!::google_public::protobuf::internal::AllAreInitialized(this->gpses())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->travels())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->faults())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->operates())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->sms())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->alarms())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->obds())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->unitloginout())) return false;
  return true;
}

void GetHistoryInfo_ACK::Swap(GetHistoryInfo_ACK* other) {
  if (other != this) {
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(lastpage_, other->lastpage_);
    gpses_.Swap(&other->gpses_);
    travels_.Swap(&other->travels_);
    faults_.Swap(&other->faults_);
    std::swap(sn_, other->sn_);
    operates_.Swap(&other->operates_);
    sms_.Swap(&other->sms_);
    alarms_.Swap(&other->alarms_);
    obds_.Swap(&other->obds_);
    unitloginout_.Swap(&other->unitloginout_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetHistoryInfo_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetHistoryInfo_ACK_descriptor_;
  metadata.reflection = GetHistoryInfo_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetHistorySimpleGpsInfo_ACK::kCallLetterFieldNumber;
const int GetHistorySimpleGpsInfo_ACK::kRetcodeFieldNumber;
const int GetHistorySimpleGpsInfo_ACK::kRetmsgFieldNumber;
const int GetHistorySimpleGpsInfo_ACK::kLastPageFieldNumber;
const int GetHistorySimpleGpsInfo_ACK::kSnFieldNumber;
const int GetHistorySimpleGpsInfo_ACK::kGpsesFieldNumber;
#endif  // !_MSC_VER

GetHistorySimpleGpsInfo_ACK::GetHistorySimpleGpsInfo_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GetHistorySimpleGpsInfo_ACK)
}

void GetHistorySimpleGpsInfo_ACK::InitAsDefaultInstance() {
}

GetHistorySimpleGpsInfo_ACK::GetHistorySimpleGpsInfo_ACK(const GetHistorySimpleGpsInfo_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GetHistorySimpleGpsInfo_ACK)
}

void GetHistorySimpleGpsInfo_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  lastpage_ = false;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetHistorySimpleGpsInfo_ACK::~GetHistorySimpleGpsInfo_ACK() {
  // @@protoc_insertion_point(destructor:gboss.GetHistorySimpleGpsInfo_ACK)
  SharedDtor();
}

void GetHistorySimpleGpsInfo_ACK::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void GetHistorySimpleGpsInfo_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GetHistorySimpleGpsInfo_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetHistorySimpleGpsInfo_ACK_descriptor_;
}

const GetHistorySimpleGpsInfo_ACK& GetHistorySimpleGpsInfo_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

GetHistorySimpleGpsInfo_ACK* GetHistorySimpleGpsInfo_ACK::default_instance_ = NULL;

GetHistorySimpleGpsInfo_ACK* GetHistorySimpleGpsInfo_ACK::New() const {
  return new GetHistorySimpleGpsInfo_ACK;
}

void GetHistorySimpleGpsInfo_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GetHistorySimpleGpsInfo_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(retcode_, lastpage_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  gpses_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetHistorySimpleGpsInfo_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GetHistorySimpleGpsInfo_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 2;
      case 2: {
        if (tag == 16) {
         parse_retcode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 3;
      case 3: {
        if (tag == 26) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lastPage;
        break;
      }

      // required bool lastPage = 4;
      case 4: {
        if (tag == 32) {
         parse_lastPage:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lastpage_)));
          set_has_lastpage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sn;
        break;
      }

      // optional string sn = 5;
      case 5: {
        if (tag == 42) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gpses;
        break;
      }

      // repeated .gboss.GpsSimpleInfo gpses = 6;
      case 6: {
        if (tag == 50) {
         parse_gpses:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpses()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gpses;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GetHistorySimpleGpsInfo_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GetHistorySimpleGpsInfo_ACK)
  return false;
#undef DO_
}

void GetHistorySimpleGpsInfo_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GetHistorySimpleGpsInfo_ACK)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int32 retcode = 2;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->retcode(), output);
  }

  // optional string retmsg = 3;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->retmsg(), output);
  }

  // required bool lastPage = 4;
  if (has_lastpage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(4, this->lastpage(), output);
  }

  // optional string sn = 5;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sn(), output);
  }

  // repeated .gboss.GpsSimpleInfo gpses = 6;
  for (int i = 0; i < this->gpses_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gpses(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GetHistorySimpleGpsInfo_ACK)
}

::google_public::protobuf::uint8* GetHistorySimpleGpsInfo_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GetHistorySimpleGpsInfo_ACK)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int32 retcode = 2;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retcode(), target);
  }

  // optional string retmsg = 3;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->retmsg(), target);
  }

  // required bool lastPage = 4;
  if (has_lastpage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->lastpage(), target);
  }

  // optional string sn = 5;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sn(), target);
  }

  // repeated .gboss.GpsSimpleInfo gpses = 6;
  for (int i = 0; i < this->gpses_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gpses(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GetHistorySimpleGpsInfo_ACK)
  return target;
}

int GetHistorySimpleGpsInfo_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 retcode = 2;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 3;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // required bool lastPage = 4;
    if (has_lastpage()) {
      total_size += 1 + 1;
    }

    // optional string sn = 5;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  // repeated .gboss.GpsSimpleInfo gpses = 6;
  total_size += 1 * this->gpses_size();
  for (int i = 0; i < this->gpses_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpses(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetHistorySimpleGpsInfo_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetHistorySimpleGpsInfo_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GetHistorySimpleGpsInfo_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetHistorySimpleGpsInfo_ACK::MergeFrom(const GetHistorySimpleGpsInfo_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  gpses_.MergeFrom(from.gpses_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
    if (from.has_lastpage()) {
      set_lastpage(from.lastpage());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetHistorySimpleGpsInfo_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetHistorySimpleGpsInfo_ACK::CopyFrom(const GetHistorySimpleGpsInfo_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetHistorySimpleGpsInfo_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  if (!::google_public::protobuf::internal::AllAreInitialized(this->gpses())) return false;
  return true;
}

void GetHistorySimpleGpsInfo_ACK::Swap(GetHistorySimpleGpsInfo_ACK* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(lastpage_, other->lastpage_);
    std::swap(sn_, other->sn_);
    gpses_.Swap(&other->gpses_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GetHistorySimpleGpsInfo_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GetHistorySimpleGpsInfo_ACK_descriptor_;
  metadata.reflection = GetHistorySimpleGpsInfo_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopHistoryInfo::kCallLetterFieldNumber;
const int StopHistoryInfo::kInfoTypeFieldNumber;
const int StopHistoryInfo::kSnFieldNumber;
#endif  // !_MSC_VER

StopHistoryInfo::StopHistoryInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.StopHistoryInfo)
}

void StopHistoryInfo::InitAsDefaultInstance() {
}

StopHistoryInfo::StopHistoryInfo(const StopHistoryInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.StopHistoryInfo)
}

void StopHistoryInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  infotype_ = 0;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopHistoryInfo::~StopHistoryInfo() {
  // @@protoc_insertion_point(destructor:gboss.StopHistoryInfo)
  SharedDtor();
}

void StopHistoryInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void StopHistoryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* StopHistoryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopHistoryInfo_descriptor_;
}

const StopHistoryInfo& StopHistoryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

StopHistoryInfo* StopHistoryInfo::default_instance_ = NULL;

StopHistoryInfo* StopHistoryInfo::New() const {
  return new StopHistoryInfo;
}

void StopHistoryInfo::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    infotype_ = 0;
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopHistoryInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.StopHistoryInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infoType;
        break;
      }

      // required int32 infoType = 2;
      case 2: {
        if (tag == 16) {
         parse_infoType:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_sn;
        break;
      }

      // optional string sn = 3;
      case 3: {
        if (tag == 26) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.StopHistoryInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.StopHistoryInfo)
  return false;
#undef DO_
}

void StopHistoryInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.StopHistoryInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->infotype(), output);
  }

  // optional string sn = 3;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->sn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.StopHistoryInfo)
}

::google_public::protobuf::uint8* StopHistoryInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.StopHistoryInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->infotype(), target);
  }

  // optional string sn = 3;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.StopHistoryInfo)
  return target;
}

int StopHistoryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 infoType = 2;
    if (has_infotype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->infotype());
    }

    // optional string sn = 3;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopHistoryInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopHistoryInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const StopHistoryInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopHistoryInfo::MergeFrom(const StopHistoryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopHistoryInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopHistoryInfo::CopyFrom(const StopHistoryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopHistoryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StopHistoryInfo::Swap(StopHistoryInfo* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(infotype_, other->infotype_);
    std::swap(sn_, other->sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata StopHistoryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = StopHistoryInfo_descriptor_;
  metadata.reflection = StopHistoryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StopHistoryInfo_ACK::kCallLetterFieldNumber;
const int StopHistoryInfo_ACK::kInfoTypeFieldNumber;
const int StopHistoryInfo_ACK::kRetcodeFieldNumber;
const int StopHistoryInfo_ACK::kRetmsgFieldNumber;
const int StopHistoryInfo_ACK::kSnFieldNumber;
#endif  // !_MSC_VER

StopHistoryInfo_ACK::StopHistoryInfo_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.StopHistoryInfo_ACK)
}

void StopHistoryInfo_ACK::InitAsDefaultInstance() {
}

StopHistoryInfo_ACK::StopHistoryInfo_ACK(const StopHistoryInfo_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.StopHistoryInfo_ACK)
}

void StopHistoryInfo_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  infotype_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopHistoryInfo_ACK::~StopHistoryInfo_ACK() {
  // @@protoc_insertion_point(destructor:gboss.StopHistoryInfo_ACK)
  SharedDtor();
}

void StopHistoryInfo_ACK::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (this != default_instance_) {
  }
}

void StopHistoryInfo_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* StopHistoryInfo_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopHistoryInfo_ACK_descriptor_;
}

const StopHistoryInfo_ACK& StopHistoryInfo_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

StopHistoryInfo_ACK* StopHistoryInfo_ACK::default_instance_ = NULL;

StopHistoryInfo_ACK* StopHistoryInfo_ACK::New() const {
  return new StopHistoryInfo_ACK;
}

void StopHistoryInfo_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<StopHistoryInfo_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(infotype_, retcode_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopHistoryInfo_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.StopHistoryInfo_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_infoType;
        break;
      }

      // required int32 infoType = 2;
      case 2: {
        if (tag == 16) {
         parse_infoType:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 3;
      case 3: {
        if (tag == 24) {
         parse_retcode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 4;
      case 4: {
        if (tag == 34) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_sn;
        break;
      }

      // optional string sn = 5;
      case 5: {
        if (tag == 42) {
         parse_sn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.StopHistoryInfo_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.StopHistoryInfo_ACK)
  return false;
#undef DO_
}

void StopHistoryInfo_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.StopHistoryInfo_ACK)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->infotype(), output);
  }

  // required int32 retcode = 3;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->retcode(), output);
  }

  // optional string retmsg = 4;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->retmsg(), output);
  }

  // optional string sn = 5;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->sn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.StopHistoryInfo_ACK)
}

::google_public::protobuf::uint8* StopHistoryInfo_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.StopHistoryInfo_ACK)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int32 infoType = 2;
  if (has_infotype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->infotype(), target);
  }

  // required int32 retcode = 3;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->retcode(), target);
  }

  // optional string retmsg = 4;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->retmsg(), target);
  }

  // optional string sn = 5;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.StopHistoryInfo_ACK)
  return target;
}

int StopHistoryInfo_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 infoType = 2;
    if (has_infotype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->infotype());
    }

    // required int32 retcode = 3;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 4;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // optional string sn = 5;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopHistoryInfo_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopHistoryInfo_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const StopHistoryInfo_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopHistoryInfo_ACK::MergeFrom(const StopHistoryInfo_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
    if (from.has_sn()) {
      set_sn(from.sn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopHistoryInfo_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopHistoryInfo_ACK::CopyFrom(const StopHistoryInfo_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopHistoryInfo_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void StopHistoryInfo_ACK::Swap(StopHistoryInfo_ACK* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(infotype_, other->infotype_);
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(sn_, other->sn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata StopHistoryInfo_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = StopHistoryInfo_ACK_descriptor_;
  metadata.reflection = StopHistoryInfo_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendCommand::kSnFieldNumber;
const int SendCommand::kCallLettersFieldNumber;
const int SendCommand::kCmdIdFieldNumber;
const int SendCommand::kParamsFieldNumber;
const int SendCommand::kAckProxyFieldNumber;
const int SendCommand::kChannelIdFieldNumber;
const int SendCommand::kAddmonitorFieldNumber;
#endif  // !_MSC_VER

SendCommand::SendCommand()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.SendCommand)
}

void SendCommand::InitAsDefaultInstance() {
}

SendCommand::SendCommand(const SendCommand& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.SendCommand)
}

void SendCommand::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdid_ = 0;
  ackproxy_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  channelid_ = 0;
  addmonitor_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendCommand::~SendCommand() {
  // @@protoc_insertion_point(destructor:gboss.SendCommand)
  SharedDtor();
}

void SendCommand::SharedDtor() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (ackproxy_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete ackproxy_;
  }
  if (this != default_instance_) {
  }
}

void SendCommand::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SendCommand::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendCommand_descriptor_;
}

const SendCommand& SendCommand::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

SendCommand* SendCommand::default_instance_ = NULL;

SendCommand* SendCommand::New() const {
  return new SendCommand;
}

void SendCommand::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendCommand*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 117) {
    ZR_(cmdid_, channelid_);
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
    if (has_ackproxy()) {
      if (ackproxy_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        ackproxy_->clear();
      }
    }
    addmonitor_ = false;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  callletters_.Clear();
  params_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendCommand::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.SendCommand)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetters;
        break;
      }

      // repeated string callLetters = 2;
      case 2: {
        if (tag == 18) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetters;
        if (input->ExpectTag(24)) goto parse_cmdId;
        break;
      }

      // required int32 cmdId = 3;
      case 3: {
        if (tag == 24) {
         parse_cmdId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_params;
        break;
      }

      // repeated string params = 4;
      case 4: {
        if (tag == 34) {
         parse_params:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_params;
        if (input->ExpectTag(42)) goto parse_ackProxy;
        break;
      }

      // optional string ackProxy = 5;
      case 5: {
        if (tag == 42) {
         parse_ackProxy:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ackproxy()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->ackproxy().data(), this->ackproxy().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "ackproxy");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_channelId;
        break;
      }

      // optional int32 channelId = 6;
      case 6: {
        if (tag == 48) {
         parse_channelId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &channelid_)));
          set_has_channelid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_addmonitor;
        break;
      }

      // optional bool addmonitor = 7;
      case 7: {
        if (tag == 56) {
         parse_addmonitor:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &addmonitor_)));
          set_has_addmonitor();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.SendCommand)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.SendCommand)
  return false;
#undef DO_
}

void SendCommand::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.SendCommand)
  // required string sn = 1;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sn(), output);
  }

  // repeated string callLetters = 2;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->callletters(i), output);
  }

  // required int32 cmdId = 3;
  if (has_cmdid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmdid(), output);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->params(i).data(), this->params(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "params");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      4, this->params(i), output);
  }

  // optional string ackProxy = 5;
  if (has_ackproxy()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ackproxy().data(), this->ackproxy().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ackproxy");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ackproxy(), output);
  }

  // optional int32 channelId = 6;
  if (has_channelid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->channelid(), output);
  }

  // optional bool addmonitor = 7;
  if (has_addmonitor()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(7, this->addmonitor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.SendCommand)
}

::google_public::protobuf::uint8* SendCommand::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.SendCommand)
  // required string sn = 1;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }

  // repeated string callLetters = 2;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->callletters(i), target);
  }

  // required int32 cmdId = 3;
  if (has_cmdid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmdid(), target);
  }

  // repeated string params = 4;
  for (int i = 0; i < this->params_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params(i).data(), this->params(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->params(i), target);
  }

  // optional string ackProxy = 5;
  if (has_ackproxy()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->ackproxy().data(), this->ackproxy().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "ackproxy");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ackproxy(), target);
  }

  // optional int32 channelId = 6;
  if (has_channelid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->channelid(), target);
  }

  // optional bool addmonitor = 7;
  if (has_addmonitor()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->addmonitor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.SendCommand)
  return target;
}

int SendCommand::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // required int32 cmdId = 3;
    if (has_cmdid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // optional string ackProxy = 5;
    if (has_ackproxy()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->ackproxy());
    }

    // optional int32 channelId = 6;
    if (has_channelid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->channelid());
    }

    // optional bool addmonitor = 7;
    if (has_addmonitor()) {
      total_size += 1 + 1;
    }

  }
  // repeated string callLetters = 2;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  // repeated string params = 4;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCommand::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendCommand* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SendCommand*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendCommand::MergeFrom(const SendCommand& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  params_.MergeFrom(from.params_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_ackproxy()) {
      set_ackproxy(from.ackproxy());
    }
    if (from.has_channelid()) {
      set_channelid(from.channelid());
    }
    if (from.has_addmonitor()) {
      set_addmonitor(from.addmonitor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendCommand::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommand::CopyFrom(const SendCommand& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommand::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void SendCommand::Swap(SendCommand* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    callletters_.Swap(&other->callletters_);
    std::swap(cmdid_, other->cmdid_);
    params_.Swap(&other->params_);
    std::swap(ackproxy_, other->ackproxy_);
    std::swap(channelid_, other->channelid_);
    std::swap(addmonitor_, other->addmonitor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SendCommand::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SendCommand_descriptor_;
  metadata.reflection = SendCommand_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendCommandSend_ACK::kSnFieldNumber;
const int SendCommandSend_ACK::kCallLetterFieldNumber;
const int SendCommandSend_ACK::kCmdIdFieldNumber;
const int SendCommandSend_ACK::kRetcodeFieldNumber;
const int SendCommandSend_ACK::kRetmsgFieldNumber;
const int SendCommandSend_ACK::kUnitsnFieldNumber;
#endif  // !_MSC_VER

SendCommandSend_ACK::SendCommandSend_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.SendCommandSend_ACK)
}

void SendCommandSend_ACK::InitAsDefaultInstance() {
}

SendCommandSend_ACK::SendCommandSend_ACK(const SendCommandSend_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.SendCommandSend_ACK)
}

void SendCommandSend_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdid_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  unitsn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendCommandSend_ACK::~SendCommandSend_ACK() {
  // @@protoc_insertion_point(destructor:gboss.SendCommandSend_ACK)
  SharedDtor();
}

void SendCommandSend_ACK::SharedDtor() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (this != default_instance_) {
  }
}

void SendCommandSend_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SendCommandSend_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendCommandSend_ACK_descriptor_;
}

const SendCommandSend_ACK& SendCommandSend_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

SendCommandSend_ACK* SendCommandSend_ACK::default_instance_ = NULL;

SendCommandSend_ACK* SendCommandSend_ACK::New() const {
  return new SendCommandSend_ACK;
}

void SendCommandSend_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendCommandSend_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(cmdid_, retcode_);
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
    unitsn_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendCommandSend_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.SendCommandSend_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetter;
        break;
      }

      // required string callLetter = 2;
      case 2: {
        if (tag == 18) {
         parse_callLetter:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmdId;
        break;
      }

      // required int32 cmdId = 3;
      case 3: {
        if (tag == 24) {
         parse_cmdId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 4;
      case 4: {
        if (tag == 32) {
         parse_retcode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 5;
      case 5: {
        if (tag == 42) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unitsn;
        break;
      }

      // optional int32 unitsn = 6;
      case 6: {
        if (tag == 48) {
         parse_unitsn:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitsn_)));
          set_has_unitsn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.SendCommandSend_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.SendCommandSend_ACK)
  return false;
#undef DO_
}

void SendCommandSend_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.SendCommandSend_ACK)
  // required string sn = 1;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sn(), output);
  }

  // required string callLetter = 2;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->callletter(), output);
  }

  // required int32 cmdId = 3;
  if (has_cmdid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmdid(), output);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // optional string retmsg = 5;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->retmsg(), output);
  }

  // optional int32 unitsn = 6;
  if (has_unitsn()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->unitsn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.SendCommandSend_ACK)
}

::google_public::protobuf::uint8* SendCommandSend_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.SendCommandSend_ACK)
  // required string sn = 1;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }

  // required string callLetter = 2;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->callletter(), target);
  }

  // required int32 cmdId = 3;
  if (has_cmdid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmdid(), target);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // optional string retmsg = 5;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->retmsg(), target);
  }

  // optional int32 unitsn = 6;
  if (has_unitsn()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unitsn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.SendCommandSend_ACK)
  return target;
}

int SendCommandSend_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // required string callLetter = 2;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 cmdId = 3;
    if (has_cmdid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // required int32 retcode = 4;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 5;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // optional int32 unitsn = 6;
    if (has_unitsn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->unitsn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCommandSend_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendCommandSend_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SendCommandSend_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendCommandSend_ACK::MergeFrom(const SendCommandSend_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
    if (from.has_unitsn()) {
      set_unitsn(from.unitsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendCommandSend_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommandSend_ACK::CopyFrom(const SendCommandSend_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommandSend_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void SendCommandSend_ACK::Swap(SendCommandSend_ACK* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(callletter_, other->callletter_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(retcode_, other->retcode_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(unitsn_, other->unitsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SendCommandSend_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SendCommandSend_ACK_descriptor_;
  metadata.reflection = SendCommandSend_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SendCommand_ACK::kSnFieldNumber;
const int SendCommand_ACK::kCallLetterFieldNumber;
const int SendCommand_ACK::kCmdIdFieldNumber;
const int SendCommand_ACK::kRetcodeFieldNumber;
const int SendCommand_ACK::kParamsFieldNumber;
const int SendCommand_ACK::kGpsInfoFieldNumber;
const int SendCommand_ACK::kRetmsgFieldNumber;
const int SendCommand_ACK::kUnitsnFieldNumber;
#endif  // !_MSC_VER

SendCommand_ACK::SendCommand_ACK()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.SendCommand_ACK)
}

void SendCommand_ACK::InitAsDefaultInstance() {
}

SendCommand_ACK::SendCommand_ACK(const SendCommand_ACK& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.SendCommand_ACK)
}

void SendCommand_ACK::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  sn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  cmdid_ = 0;
  retcode_ = 0;
  retmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  unitsn_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SendCommand_ACK::~SendCommand_ACK() {
  // @@protoc_insertion_point(destructor:gboss.SendCommand_ACK)
  SharedDtor();
}

void SendCommand_ACK::SharedDtor() {
  if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete sn_;
  }
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete retmsg_;
  }
  if (this != default_instance_) {
  }
}

void SendCommand_ACK::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* SendCommand_ACK::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SendCommand_ACK_descriptor_;
}

const SendCommand_ACK& SendCommand_ACK::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

SendCommand_ACK* SendCommand_ACK::default_instance_ = NULL;

SendCommand_ACK* SendCommand_ACK::New() const {
  return new SendCommand_ACK;
}

void SendCommand_ACK::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<SendCommand_ACK*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 207) {
    ZR_(cmdid_, retcode_);
    if (has_sn()) {
      if (sn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        sn_->clear();
      }
    }
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_retmsg()) {
      if (retmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        retmsg_->clear();
      }
    }
    unitsn_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  params_.Clear();
  gpsinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SendCommand_ACK::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.SendCommand_ACK)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sn = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->sn().data(), this->sn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "sn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetter;
        break;
      }

      // required string callLetter = 2;
      case 2: {
        if (tag == 18) {
         parse_callLetter:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_cmdId;
        break;
      }

      // required int32 cmdId = 3;
      case 3: {
        if (tag == 24) {
         parse_cmdId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_retcode;
        break;
      }

      // required int32 retcode = 4;
      case 4: {
        if (tag == 32) {
         parse_retcode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retcode_)));
          set_has_retcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        break;
      }

      // repeated string params = 5;
      case 5: {
        if (tag == 42) {
         parse_params:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_params()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->params(this->params_size() - 1).data(),
            this->params(this->params_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "params");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_params;
        if (input->ExpectTag(50)) goto parse_gpsInfo;
        break;
      }

      // repeated .gboss.GpsInfo gpsInfo = 6;
      case 6: {
        if (tag == 50) {
         parse_gpsInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_gpsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_gpsInfo;
        if (input->ExpectTag(58)) goto parse_retmsg;
        break;
      }

      // optional string retmsg = 7;
      case 7: {
        if (tag == 58) {
         parse_retmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_retmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->retmsg().data(), this->retmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "retmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_unitsn;
        break;
      }

      // optional int32 unitsn = 8;
      case 8: {
        if (tag == 64) {
         parse_unitsn:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitsn_)));
          set_has_unitsn();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.SendCommand_ACK)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.SendCommand_ACK)
  return false;
#undef DO_
}

void SendCommand_ACK::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.SendCommand_ACK)
  // required string sn = 1;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->sn(), output);
  }

  // required string callLetter = 2;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->callletter(), output);
  }

  // required int32 cmdId = 3;
  if (has_cmdid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->cmdid(), output);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->retcode(), output);
  }

  // repeated string params = 5;
  for (int i = 0; i < this->params_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->params(i).data(), this->params(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "params");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      5, this->params(i), output);
  }

  // repeated .gboss.GpsInfo gpsInfo = 6;
  for (int i = 0; i < this->gpsinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->gpsinfo(i), output);
  }

  // optional string retmsg = 7;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->retmsg(), output);
  }

  // optional int32 unitsn = 8;
  if (has_unitsn()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->unitsn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.SendCommand_ACK)
}

::google_public::protobuf::uint8* SendCommand_ACK::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.SendCommand_ACK)
  // required string sn = 1;
  if (has_sn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->sn().data(), this->sn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "sn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sn(), target);
  }

  // required string callLetter = 2;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->callletter(), target);
  }

  // required int32 cmdId = 3;
  if (has_cmdid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->cmdid(), target);
  }

  // required int32 retcode = 4;
  if (has_retcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->retcode(), target);
  }

  // repeated string params = 5;
  for (int i = 0; i < this->params_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->params(i).data(), this->params(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "params");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(5, this->params(i), target);
  }

  // repeated .gboss.GpsInfo gpsInfo = 6;
  for (int i = 0; i < this->gpsinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->gpsinfo(i), target);
  }

  // optional string retmsg = 7;
  if (has_retmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->retmsg().data(), this->retmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "retmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->retmsg(), target);
  }

  // optional int32 unitsn = 8;
  if (has_unitsn()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->unitsn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.SendCommand_ACK)
  return target;
}

int SendCommand_ACK::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sn = 1;
    if (has_sn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->sn());
    }

    // required string callLetter = 2;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int32 cmdId = 3;
    if (has_cmdid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // required int32 retcode = 4;
    if (has_retcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->retcode());
    }

    // optional string retmsg = 7;
    if (has_retmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->retmsg());
    }

    // optional int32 unitsn = 8;
    if (has_unitsn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->unitsn());
    }

  }
  // repeated string params = 5;
  total_size += 1 * this->params_size();
  for (int i = 0; i < this->params_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->params(i));
  }

  // repeated .gboss.GpsInfo gpsInfo = 6;
  total_size += 1 * this->gpsinfo_size();
  for (int i = 0; i < this->gpsinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->gpsinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SendCommand_ACK::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SendCommand_ACK* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const SendCommand_ACK*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SendCommand_ACK::MergeFrom(const SendCommand_ACK& from) {
  GOOGLE_CHECK_NE(&from, this);
  params_.MergeFrom(from.params_);
  gpsinfo_.MergeFrom(from.gpsinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sn()) {
      set_sn(from.sn());
    }
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_retcode()) {
      set_retcode(from.retcode());
    }
    if (from.has_retmsg()) {
      set_retmsg(from.retmsg());
    }
    if (from.has_unitsn()) {
      set_unitsn(from.unitsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SendCommand_ACK::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SendCommand_ACK::CopyFrom(const SendCommand_ACK& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SendCommand_ACK::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google_public::protobuf::internal::AllAreInitialized(this->gpsinfo())) return false;
  return true;
}

void SendCommand_ACK::Swap(SendCommand_ACK* other) {
  if (other != this) {
    std::swap(sn_, other->sn_);
    std::swap(callletter_, other->callletter_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(retcode_, other->retcode_);
    params_.Swap(&other->params_);
    gpsinfo_.Swap(&other->gpsinfo_);
    std::swap(retmsg_, other->retmsg_);
    std::swap(unitsn_, other->unitsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata SendCommand_ACK::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = SendCommand_ACK_descriptor_;
  metadata.reflection = SendCommand_ACK_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverGPS::kGpsinfoFieldNumber;
const int DeliverGPS::kGatewayidFieldNumber;
const int DeliverGPS::kGatewaytypeFieldNumber;
const int DeliverGPS::kAlarmidFieldNumber;
const int DeliverGPS::kAlarmnameFieldNumber;
#endif  // !_MSC_VER

DeliverGPS::DeliverGPS()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverGPS)
}

void DeliverGPS::InitAsDefaultInstance() {
  gpsinfo_ = const_cast< ::gboss::GpsInfo*>(&::gboss::GpsInfo::default_instance());
}

DeliverGPS::DeliverGPS(const DeliverGPS& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverGPS)
}

void DeliverGPS::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  gpsinfo_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  alarmid_ = 0;
  alarmname_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverGPS::~DeliverGPS() {
  // @@protoc_insertion_point(destructor:gboss.DeliverGPS)
  SharedDtor();
}

void DeliverGPS::SharedDtor() {
  if (alarmname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete alarmname_;
  }
  if (this != default_instance_) {
    delete gpsinfo_;
  }
}

void DeliverGPS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverGPS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverGPS_descriptor_;
}

const DeliverGPS& DeliverGPS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverGPS* DeliverGPS::default_instance_ = NULL;

DeliverGPS* DeliverGPS::New() const {
  return new DeliverGPS;
}

void DeliverGPS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverGPS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_gpsinfo()) {
      if (gpsinfo_ != NULL) gpsinfo_->::gboss::GpsInfo::Clear();
    }
    alarmid_ = 0;
    if (has_alarmname()) {
      if (alarmname_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        alarmname_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverGPS::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverGPS)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.GpsInfo gpsinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_gpsinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_alarmid;
        break;
      }

      // optional int32 alarmid = 4;
      case 4: {
        if (tag == 32) {
         parse_alarmid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmid_)));
          set_has_alarmid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_alarmname;
        break;
      }

      // optional string alarmname = 5;
      case 5: {
        if (tag == 42) {
         parse_alarmname:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_alarmname()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->alarmname().data(), this->alarmname().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "alarmname");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverGPS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverGPS)
  return false;
#undef DO_
}

void DeliverGPS::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverGPS)
  // required .gboss.GpsInfo gpsinfo = 1;
  if (has_gpsinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->gpsinfo(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  // optional int32 alarmid = 4;
  if (has_alarmid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->alarmid(), output);
  }

  // optional string alarmname = 5;
  if (has_alarmname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmname().data(), this->alarmname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "alarmname");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->alarmname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverGPS)
}

::google_public::protobuf::uint8* DeliverGPS::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverGPS)
  // required .gboss.GpsInfo gpsinfo = 1;
  if (has_gpsinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->gpsinfo(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  // optional int32 alarmid = 4;
  if (has_alarmid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->alarmid(), target);
  }

  // optional string alarmname = 5;
  if (has_alarmname()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->alarmname().data(), this->alarmname().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "alarmname");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->alarmname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverGPS)
  return target;
}

int DeliverGPS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.GpsInfo gpsinfo = 1;
    if (has_gpsinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->gpsinfo());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

    // optional int32 alarmid = 4;
    if (has_alarmid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmid());
    }

    // optional string alarmname = 5;
    if (has_alarmname()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->alarmname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverGPS::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverGPS* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverGPS*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverGPS::MergeFrom(const DeliverGPS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpsinfo()) {
      mutable_gpsinfo()->::gboss::GpsInfo::MergeFrom(from.gpsinfo());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
    if (from.has_alarmid()) {
      set_alarmid(from.alarmid());
    }
    if (from.has_alarmname()) {
      set_alarmname(from.alarmname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverGPS::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverGPS::CopyFrom(const DeliverGPS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverGPS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_gpsinfo()) {
    if (!this->gpsinfo().IsInitialized()) return false;
  }
  return true;
}

void DeliverGPS::Swap(DeliverGPS* other) {
  if (other != this) {
    std::swap(gpsinfo_, other->gpsinfo_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(alarmid_, other->alarmid_);
    std::swap(alarmname_, other->alarmname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverGPS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverGPS_descriptor_;
  metadata.reflection = DeliverGPS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverAlarm::kAlarminfoFieldNumber;
const int DeliverAlarm::kGatewayidFieldNumber;
const int DeliverAlarm::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverAlarm::DeliverAlarm()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverAlarm)
}

void DeliverAlarm::InitAsDefaultInstance() {
  alarminfo_ = const_cast< ::gboss::AlarmInfo*>(&::gboss::AlarmInfo::default_instance());
}

DeliverAlarm::DeliverAlarm(const DeliverAlarm& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverAlarm)
}

void DeliverAlarm::SharedCtor() {
  _cached_size_ = 0;
  alarminfo_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverAlarm::~DeliverAlarm() {
  // @@protoc_insertion_point(destructor:gboss.DeliverAlarm)
  SharedDtor();
}

void DeliverAlarm::SharedDtor() {
  if (this != default_instance_) {
    delete alarminfo_;
  }
}

void DeliverAlarm::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverAlarm::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverAlarm_descriptor_;
}

const DeliverAlarm& DeliverAlarm::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverAlarm* DeliverAlarm::default_instance_ = NULL;

DeliverAlarm* DeliverAlarm::New() const {
  return new DeliverAlarm;
}

void DeliverAlarm::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverAlarm*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_alarminfo()) {
      if (alarminfo_ != NULL) alarminfo_->::gboss::AlarmInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverAlarm::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverAlarm)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.AlarmInfo alarminfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_alarminfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverAlarm)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverAlarm)
  return false;
#undef DO_
}

void DeliverAlarm::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverAlarm)
  // required .gboss.AlarmInfo alarminfo = 1;
  if (has_alarminfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->alarminfo(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverAlarm)
}

::google_public::protobuf::uint8* DeliverAlarm::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverAlarm)
  // required .gboss.AlarmInfo alarminfo = 1;
  if (has_alarminfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->alarminfo(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverAlarm)
  return target;
}

int DeliverAlarm::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.AlarmInfo alarminfo = 1;
    if (has_alarminfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->alarminfo());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverAlarm::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverAlarm* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverAlarm*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverAlarm::MergeFrom(const DeliverAlarm& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_alarminfo()) {
      mutable_alarminfo()->::gboss::AlarmInfo::MergeFrom(from.alarminfo());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverAlarm::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverAlarm::CopyFrom(const DeliverAlarm& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverAlarm::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_alarminfo()) {
    if (!this->alarminfo().IsInitialized()) return false;
  }
  return true;
}

void DeliverAlarm::Swap(DeliverAlarm* other) {
  if (other != this) {
    std::swap(alarminfo_, other->alarminfo_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverAlarm::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverAlarm_descriptor_;
  metadata.reflection = DeliverAlarm_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverOperateData::kDataFieldNumber;
const int DeliverOperateData::kGatewayidFieldNumber;
const int DeliverOperateData::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverOperateData::DeliverOperateData()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverOperateData)
}

void DeliverOperateData::InitAsDefaultInstance() {
  data_ = const_cast< ::gboss::OperateData*>(&::gboss::OperateData::default_instance());
}

DeliverOperateData::DeliverOperateData(const DeliverOperateData& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverOperateData)
}

void DeliverOperateData::SharedCtor() {
  _cached_size_ = 0;
  data_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverOperateData::~DeliverOperateData() {
  // @@protoc_insertion_point(destructor:gboss.DeliverOperateData)
  SharedDtor();
}

void DeliverOperateData::SharedDtor() {
  if (this != default_instance_) {
    delete data_;
  }
}

void DeliverOperateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverOperateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverOperateData_descriptor_;
}

const DeliverOperateData& DeliverOperateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverOperateData* DeliverOperateData::default_instance_ = NULL;

DeliverOperateData* DeliverOperateData::New() const {
  return new DeliverOperateData;
}

void DeliverOperateData::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverOperateData*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_data()) {
      if (data_ != NULL) data_->::gboss::OperateData::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverOperateData::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverOperateData)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.OperateData data = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_data()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverOperateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverOperateData)
  return false;
#undef DO_
}

void DeliverOperateData::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverOperateData)
  // required .gboss.OperateData data = 1;
  if (has_data()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverOperateData)
}

::google_public::protobuf::uint8* DeliverOperateData::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverOperateData)
  // required .gboss.OperateData data = 1;
  if (has_data()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverOperateData)
  return target;
}

int DeliverOperateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.OperateData data = 1;
    if (has_data()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->data());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverOperateData::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverOperateData* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverOperateData*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverOperateData::MergeFrom(const DeliverOperateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_data()) {
      mutable_data()->::gboss::OperateData::MergeFrom(from.data());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverOperateData::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverOperateData::CopyFrom(const DeliverOperateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverOperateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_data()) {
    if (!this->data().IsInitialized()) return false;
  }
  return true;
}

void DeliverOperateData::Swap(DeliverOperateData* other) {
  if (other != this) {
    std::swap(data_, other->data_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverOperateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverOperateData_descriptor_;
  metadata.reflection = DeliverOperateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverSMS::kMsgFieldNumber;
const int DeliverSMS::kGatewayidFieldNumber;
const int DeliverSMS::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverSMS::DeliverSMS()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverSMS)
}

void DeliverSMS::InitAsDefaultInstance() {
  msg_ = const_cast< ::gboss::ShortMessage*>(&::gboss::ShortMessage::default_instance());
}

DeliverSMS::DeliverSMS(const DeliverSMS& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverSMS)
}

void DeliverSMS::SharedCtor() {
  _cached_size_ = 0;
  msg_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverSMS::~DeliverSMS() {
  // @@protoc_insertion_point(destructor:gboss.DeliverSMS)
  SharedDtor();
}

void DeliverSMS::SharedDtor() {
  if (this != default_instance_) {
    delete msg_;
  }
}

void DeliverSMS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverSMS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverSMS_descriptor_;
}

const DeliverSMS& DeliverSMS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverSMS* DeliverSMS::default_instance_ = NULL;

DeliverSMS* DeliverSMS::New() const {
  return new DeliverSMS;
}

void DeliverSMS::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverSMS*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_msg()) {
      if (msg_ != NULL) msg_->::gboss::ShortMessage::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverSMS::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverSMS)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.ShortMessage msg = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_msg()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverSMS)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverSMS)
  return false;
#undef DO_
}

void DeliverSMS::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverSMS)
  // required .gboss.ShortMessage msg = 1;
  if (has_msg()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->msg(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverSMS)
}

::google_public::protobuf::uint8* DeliverSMS::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverSMS)
  // required .gboss.ShortMessage msg = 1;
  if (has_msg()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->msg(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverSMS)
  return target;
}

int DeliverSMS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.ShortMessage msg = 1;
    if (has_msg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->msg());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverSMS::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverSMS* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverSMS*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverSMS::MergeFrom(const DeliverSMS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_msg()) {
      mutable_msg()->::gboss::ShortMessage::MergeFrom(from.msg());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverSMS::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverSMS::CopyFrom(const DeliverSMS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverSMS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_msg()) {
    if (!this->msg().IsInitialized()) return false;
  }
  return true;
}

void DeliverSMS::Swap(DeliverSMS* other) {
  if (other != this) {
    std::swap(msg_, other->msg_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverSMS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverSMS_descriptor_;
  metadata.reflection = DeliverSMS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverTravel::kTravelinfoFieldNumber;
const int DeliverTravel::kGatewayidFieldNumber;
const int DeliverTravel::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverTravel::DeliverTravel()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverTravel)
}

void DeliverTravel::InitAsDefaultInstance() {
  travelinfo_ = const_cast< ::gboss::TravelInfo*>(&::gboss::TravelInfo::default_instance());
}

DeliverTravel::DeliverTravel(const DeliverTravel& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverTravel)
}

void DeliverTravel::SharedCtor() {
  _cached_size_ = 0;
  travelinfo_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverTravel::~DeliverTravel() {
  // @@protoc_insertion_point(destructor:gboss.DeliverTravel)
  SharedDtor();
}

void DeliverTravel::SharedDtor() {
  if (this != default_instance_) {
    delete travelinfo_;
  }
}

void DeliverTravel::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverTravel::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverTravel_descriptor_;
}

const DeliverTravel& DeliverTravel::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverTravel* DeliverTravel::default_instance_ = NULL;

DeliverTravel* DeliverTravel::New() const {
  return new DeliverTravel;
}

void DeliverTravel::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverTravel*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_travelinfo()) {
      if (travelinfo_ != NULL) travelinfo_->::gboss::TravelInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverTravel::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverTravel)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.TravelInfo travelinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_travelinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverTravel)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverTravel)
  return false;
#undef DO_
}

void DeliverTravel::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverTravel)
  // required .gboss.TravelInfo travelinfo = 1;
  if (has_travelinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->travelinfo(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverTravel)
}

::google_public::protobuf::uint8* DeliverTravel::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverTravel)
  // required .gboss.TravelInfo travelinfo = 1;
  if (has_travelinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->travelinfo(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverTravel)
  return target;
}

int DeliverTravel::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.TravelInfo travelinfo = 1;
    if (has_travelinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->travelinfo());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverTravel::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverTravel* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverTravel*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverTravel::MergeFrom(const DeliverTravel& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_travelinfo()) {
      mutable_travelinfo()->::gboss::TravelInfo::MergeFrom(from.travelinfo());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverTravel::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverTravel::CopyFrom(const DeliverTravel& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverTravel::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_travelinfo()) {
    if (!this->travelinfo().IsInitialized()) return false;
  }
  return true;
}

void DeliverTravel::Swap(DeliverTravel* other) {
  if (other != this) {
    std::swap(travelinfo_, other->travelinfo_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverTravel::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverTravel_descriptor_;
  metadata.reflection = DeliverTravel_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverFault::kFaultinfoFieldNumber;
const int DeliverFault::kGatewayidFieldNumber;
const int DeliverFault::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverFault::DeliverFault()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverFault)
}

void DeliverFault::InitAsDefaultInstance() {
  faultinfo_ = const_cast< ::gboss::FaultInfo*>(&::gboss::FaultInfo::default_instance());
}

DeliverFault::DeliverFault(const DeliverFault& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverFault)
}

void DeliverFault::SharedCtor() {
  _cached_size_ = 0;
  faultinfo_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverFault::~DeliverFault() {
  // @@protoc_insertion_point(destructor:gboss.DeliverFault)
  SharedDtor();
}

void DeliverFault::SharedDtor() {
  if (this != default_instance_) {
    delete faultinfo_;
  }
}

void DeliverFault::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverFault::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverFault_descriptor_;
}

const DeliverFault& DeliverFault::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverFault* DeliverFault::default_instance_ = NULL;

DeliverFault* DeliverFault::New() const {
  return new DeliverFault;
}

void DeliverFault::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverFault*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_faultinfo()) {
      if (faultinfo_ != NULL) faultinfo_->::gboss::FaultInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverFault::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverFault)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.FaultInfo faultinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faultinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverFault)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverFault)
  return false;
#undef DO_
}

void DeliverFault::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverFault)
  // required .gboss.FaultInfo faultinfo = 1;
  if (has_faultinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->faultinfo(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverFault)
}

::google_public::protobuf::uint8* DeliverFault::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverFault)
  // required .gboss.FaultInfo faultinfo = 1;
  if (has_faultinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->faultinfo(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverFault)
  return target;
}

int DeliverFault::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.FaultInfo faultinfo = 1;
    if (has_faultinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faultinfo());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverFault::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverFault* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverFault*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverFault::MergeFrom(const DeliverFault& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faultinfo()) {
      mutable_faultinfo()->::gboss::FaultInfo::MergeFrom(from.faultinfo());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverFault::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverFault::CopyFrom(const DeliverFault& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverFault::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_faultinfo()) {
    if (!this->faultinfo().IsInitialized()) return false;
  }
  return true;
}

void DeliverFault::Swap(DeliverFault* other) {
  if (other != this) {
    std::swap(faultinfo_, other->faultinfo_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverFault::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverFault_descriptor_;
  metadata.reflection = DeliverFault_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverOBD::kObdinfoFieldNumber;
const int DeliverOBD::kGatewayidFieldNumber;
const int DeliverOBD::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverOBD::DeliverOBD()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverOBD)
}

void DeliverOBD::InitAsDefaultInstance() {
  obdinfo_ = const_cast< ::gboss::OBDInfo*>(&::gboss::OBDInfo::default_instance());
}

DeliverOBD::DeliverOBD(const DeliverOBD& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverOBD)
}

void DeliverOBD::SharedCtor() {
  _cached_size_ = 0;
  obdinfo_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverOBD::~DeliverOBD() {
  // @@protoc_insertion_point(destructor:gboss.DeliverOBD)
  SharedDtor();
}

void DeliverOBD::SharedDtor() {
  if (this != default_instance_) {
    delete obdinfo_;
  }
}

void DeliverOBD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverOBD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverOBD_descriptor_;
}

const DeliverOBD& DeliverOBD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverOBD* DeliverOBD::default_instance_ = NULL;

DeliverOBD* DeliverOBD::New() const {
  return new DeliverOBD;
}

void DeliverOBD::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverOBD*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_obdinfo()) {
      if (obdinfo_ != NULL) obdinfo_->::gboss::OBDInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverOBD::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverOBD)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.OBDInfo obdinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obdinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverOBD)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverOBD)
  return false;
#undef DO_
}

void DeliverOBD::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverOBD)
  // required .gboss.OBDInfo obdinfo = 1;
  if (has_obdinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->obdinfo(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverOBD)
}

::google_public::protobuf::uint8* DeliverOBD::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverOBD)
  // required .gboss.OBDInfo obdinfo = 1;
  if (has_obdinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->obdinfo(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverOBD)
  return target;
}

int DeliverOBD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.OBDInfo obdinfo = 1;
    if (has_obdinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obdinfo());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverOBD::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverOBD* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverOBD*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverOBD::MergeFrom(const DeliverOBD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_obdinfo()) {
      mutable_obdinfo()->::gboss::OBDInfo::MergeFrom(from.obdinfo());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverOBD::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverOBD::CopyFrom(const DeliverOBD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverOBD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_obdinfo()) {
    if (!this->obdinfo().IsInitialized()) return false;
  }
  return true;
}

void DeliverOBD::Swap(DeliverOBD* other) {
  if (other != this) {
    std::swap(obdinfo_, other->obdinfo_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverOBD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverOBD_descriptor_;
  metadata.reflection = DeliverOBD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverAppNotice::kNoticeinfoFieldNumber;
const int DeliverAppNotice::kGatewayidFieldNumber;
const int DeliverAppNotice::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverAppNotice::DeliverAppNotice()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverAppNotice)
}

void DeliverAppNotice::InitAsDefaultInstance() {
  noticeinfo_ = const_cast< ::gboss::AppNoticeInfo*>(&::gboss::AppNoticeInfo::default_instance());
}

DeliverAppNotice::DeliverAppNotice(const DeliverAppNotice& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverAppNotice)
}

void DeliverAppNotice::SharedCtor() {
  _cached_size_ = 0;
  noticeinfo_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverAppNotice::~DeliverAppNotice() {
  // @@protoc_insertion_point(destructor:gboss.DeliverAppNotice)
  SharedDtor();
}

void DeliverAppNotice::SharedDtor() {
  if (this != default_instance_) {
    delete noticeinfo_;
  }
}

void DeliverAppNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverAppNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverAppNotice_descriptor_;
}

const DeliverAppNotice& DeliverAppNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverAppNotice* DeliverAppNotice::default_instance_ = NULL;

DeliverAppNotice* DeliverAppNotice::New() const {
  return new DeliverAppNotice;
}

void DeliverAppNotice::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverAppNotice*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_noticeinfo()) {
      if (noticeinfo_ != NULL) noticeinfo_->::gboss::AppNoticeInfo::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverAppNotice::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverAppNotice)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.AppNoticeInfo noticeinfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_noticeinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverAppNotice)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverAppNotice)
  return false;
#undef DO_
}

void DeliverAppNotice::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverAppNotice)
  // required .gboss.AppNoticeInfo noticeinfo = 1;
  if (has_noticeinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->noticeinfo(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverAppNotice)
}

::google_public::protobuf::uint8* DeliverAppNotice::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverAppNotice)
  // required .gboss.AppNoticeInfo noticeinfo = 1;
  if (has_noticeinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->noticeinfo(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverAppNotice)
  return target;
}

int DeliverAppNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.AppNoticeInfo noticeinfo = 1;
    if (has_noticeinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->noticeinfo());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverAppNotice::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverAppNotice* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverAppNotice*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverAppNotice::MergeFrom(const DeliverAppNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticeinfo()) {
      mutable_noticeinfo()->::gboss::AppNoticeInfo::MergeFrom(from.noticeinfo());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverAppNotice::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverAppNotice::CopyFrom(const DeliverAppNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverAppNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_noticeinfo()) {
    if (!this->noticeinfo().IsInitialized()) return false;
  }
  return true;
}

void DeliverAppNotice::Swap(DeliverAppNotice* other) {
  if (other != this) {
    std::swap(noticeinfo_, other->noticeinfo_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverAppNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverAppNotice_descriptor_;
  metadata.reflection = DeliverAppNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverUnitVersion::kUnitVersionFieldNumber;
const int DeliverUnitVersion::kGatewayidFieldNumber;
const int DeliverUnitVersion::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverUnitVersion::DeliverUnitVersion()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverUnitVersion)
}

void DeliverUnitVersion::InitAsDefaultInstance() {
  unitversion_ = const_cast< ::gboss::UnitVersion*>(&::gboss::UnitVersion::default_instance());
}

DeliverUnitVersion::DeliverUnitVersion(const DeliverUnitVersion& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverUnitVersion)
}

void DeliverUnitVersion::SharedCtor() {
  _cached_size_ = 0;
  unitversion_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverUnitVersion::~DeliverUnitVersion() {
  // @@protoc_insertion_point(destructor:gboss.DeliverUnitVersion)
  SharedDtor();
}

void DeliverUnitVersion::SharedDtor() {
  if (this != default_instance_) {
    delete unitversion_;
  }
}

void DeliverUnitVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverUnitVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverUnitVersion_descriptor_;
}

const DeliverUnitVersion& DeliverUnitVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverUnitVersion* DeliverUnitVersion::default_instance_ = NULL;

DeliverUnitVersion* DeliverUnitVersion::New() const {
  return new DeliverUnitVersion;
}

void DeliverUnitVersion::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverUnitVersion*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_unitversion()) {
      if (unitversion_ != NULL) unitversion_->::gboss::UnitVersion::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverUnitVersion::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverUnitVersion)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.UnitVersion unitVersion = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_unitversion()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverUnitVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverUnitVersion)
  return false;
#undef DO_
}

void DeliverUnitVersion::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverUnitVersion)
  // required .gboss.UnitVersion unitVersion = 1;
  if (has_unitversion()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->unitversion(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverUnitVersion)
}

::google_public::protobuf::uint8* DeliverUnitVersion::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverUnitVersion)
  // required .gboss.UnitVersion unitVersion = 1;
  if (has_unitversion()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->unitversion(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverUnitVersion)
  return target;
}

int DeliverUnitVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.UnitVersion unitVersion = 1;
    if (has_unitversion()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->unitversion());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverUnitVersion::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverUnitVersion* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverUnitVersion*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverUnitVersion::MergeFrom(const DeliverUnitVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_unitversion()) {
      mutable_unitversion()->::gboss::UnitVersion::MergeFrom(from.unitversion());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverUnitVersion::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverUnitVersion::CopyFrom(const DeliverUnitVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverUnitVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_unitversion()) {
    if (!this->unitversion().IsInitialized()) return false;
  }
  return true;
}

void DeliverUnitVersion::Swap(DeliverUnitVersion* other) {
  if (other != this) {
    std::swap(unitversion_, other->unitversion_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverUnitVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverUnitVersion_descriptor_;
  metadata.reflection = DeliverUnitVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeliverECUConfig::kEcuConfigFieldNumber;
const int DeliverECUConfig::kGatewayidFieldNumber;
const int DeliverECUConfig::kGatewaytypeFieldNumber;
#endif  // !_MSC_VER

DeliverECUConfig::DeliverECUConfig()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.DeliverECUConfig)
}

void DeliverECUConfig::InitAsDefaultInstance() {
  ecuconfig_ = const_cast< ::gboss::ECUConfig*>(&::gboss::ECUConfig::default_instance());
}

DeliverECUConfig::DeliverECUConfig(const DeliverECUConfig& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.DeliverECUConfig)
}

void DeliverECUConfig::SharedCtor() {
  _cached_size_ = 0;
  ecuconfig_ = NULL;
  gatewayid_ = 0;
  gatewaytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeliverECUConfig::~DeliverECUConfig() {
  // @@protoc_insertion_point(destructor:gboss.DeliverECUConfig)
  SharedDtor();
}

void DeliverECUConfig::SharedDtor() {
  if (this != default_instance_) {
    delete ecuconfig_;
  }
}

void DeliverECUConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* DeliverECUConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeliverECUConfig_descriptor_;
}

const DeliverECUConfig& DeliverECUConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

DeliverECUConfig* DeliverECUConfig::default_instance_ = NULL;

DeliverECUConfig* DeliverECUConfig::New() const {
  return new DeliverECUConfig;
}

void DeliverECUConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<DeliverECUConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 7) {
    ZR_(gatewayid_, gatewaytype_);
    if (has_ecuconfig()) {
      if (ecuconfig_ != NULL) ecuconfig_->::gboss::ECUConfig::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeliverECUConfig::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.DeliverECUConfig)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .gboss.ECUConfig ecuConfig = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ecuconfig()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_gatewayid;
        break;
      }

      // optional int32 gatewayid = 2;
      case 2: {
        if (tag == 16) {
         parse_gatewayid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewayid_)));
          set_has_gatewayid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_gatewaytype;
        break;
      }

      // optional int32 gatewaytype = 3;
      case 3: {
        if (tag == 24) {
         parse_gatewaytype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gatewaytype_)));
          set_has_gatewaytype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.DeliverECUConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.DeliverECUConfig)
  return false;
#undef DO_
}

void DeliverECUConfig::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.DeliverECUConfig)
  // required .gboss.ECUConfig ecuConfig = 1;
  if (has_ecuconfig()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->ecuconfig(), output);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->gatewayid(), output);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->gatewaytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.DeliverECUConfig)
}

::google_public::protobuf::uint8* DeliverECUConfig::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.DeliverECUConfig)
  // required .gboss.ECUConfig ecuConfig = 1;
  if (has_ecuconfig()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->ecuconfig(), target);
  }

  // optional int32 gatewayid = 2;
  if (has_gatewayid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->gatewayid(), target);
  }

  // optional int32 gatewaytype = 3;
  if (has_gatewaytype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->gatewaytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.DeliverECUConfig)
  return target;
}

int DeliverECUConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .gboss.ECUConfig ecuConfig = 1;
    if (has_ecuconfig()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ecuconfig());
    }

    // optional int32 gatewayid = 2;
    if (has_gatewayid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewayid());
    }

    // optional int32 gatewaytype = 3;
    if (has_gatewaytype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->gatewaytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeliverECUConfig::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeliverECUConfig* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const DeliverECUConfig*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeliverECUConfig::MergeFrom(const DeliverECUConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ecuconfig()) {
      mutable_ecuconfig()->::gboss::ECUConfig::MergeFrom(from.ecuconfig());
    }
    if (from.has_gatewayid()) {
      set_gatewayid(from.gatewayid());
    }
    if (from.has_gatewaytype()) {
      set_gatewaytype(from.gatewaytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeliverECUConfig::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeliverECUConfig::CopyFrom(const DeliverECUConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeliverECUConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_ecuconfig()) {
    if (!this->ecuconfig().IsInitialized()) return false;
  }
  return true;
}

void DeliverECUConfig::Swap(DeliverECUConfig* other) {
  if (other != this) {
    std::swap(ecuconfig_, other->ecuconfig_);
    std::swap(gatewayid_, other->gatewayid_);
    std::swap(gatewaytype_, other->gatewaytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata DeliverECUConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = DeliverECUConfig_descriptor_;
  metadata.reflection = DeliverECUConfig_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TestDeliver::kInfoTypeFieldNumber;
const int TestDeliver::kCallLettersFieldNumber;
#endif  // !_MSC_VER

TestDeliver::TestDeliver()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.TestDeliver)
}

void TestDeliver::InitAsDefaultInstance() {
}

TestDeliver::TestDeliver(const TestDeliver& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.TestDeliver)
}

void TestDeliver::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  infotype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TestDeliver::~TestDeliver() {
  // @@protoc_insertion_point(destructor:gboss.TestDeliver)
  SharedDtor();
}

void TestDeliver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TestDeliver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TestDeliver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TestDeliver_descriptor_;
}

const TestDeliver& TestDeliver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_comcenter_2eproto();
  return *default_instance_;
}

TestDeliver* TestDeliver::default_instance_ = NULL;

TestDeliver* TestDeliver::New() const {
  return new TestDeliver;
}

void TestDeliver::Clear() {
  infotype_ = 0;
  callletters_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TestDeliver::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.TestDeliver)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 infoType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &infotype_)));
          set_has_infotype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetters;
        break;
      }

      // repeated string callLetters = 2;
      case 2: {
        if (tag == 18) {
         parse_callLetters:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_callletters()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletters(this->callletters_size() - 1).data(),
            this->callletters(this->callletters_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletters");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_callLetters;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.TestDeliver)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.TestDeliver)
  return false;
#undef DO_
}

void TestDeliver::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.TestDeliver)
  // required int32 infoType = 1;
  if (has_infotype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->infotype(), output);
  }

  // repeated string callLetters = 2;
  for (int i = 0; i < this->callletters_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->callletters(i).data(), this->callletters(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "callletters");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->callletters(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.TestDeliver)
}

::google_public::protobuf::uint8* TestDeliver::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.TestDeliver)
  // required int32 infoType = 1;
  if (has_infotype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->infotype(), target);
  }

  // repeated string callLetters = 2;
  for (int i = 0; i < this->callletters_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletters(i).data(), this->callletters(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletters");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->callletters(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.TestDeliver)
  return target;
}

int TestDeliver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 infoType = 1;
    if (has_infotype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->infotype());
    }

  }
  // repeated string callLetters = 2;
  total_size += 1 * this->callletters_size();
  for (int i = 0; i < this->callletters_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->callletters(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TestDeliver::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TestDeliver* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TestDeliver*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TestDeliver::MergeFrom(const TestDeliver& from) {
  GOOGLE_CHECK_NE(&from, this);
  callletters_.MergeFrom(from.callletters_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_infotype()) {
      set_infotype(from.infotype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TestDeliver::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TestDeliver::CopyFrom(const TestDeliver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TestDeliver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TestDeliver::Swap(TestDeliver* other) {
  if (other != this) {
    std::swap(infotype_, other->infotype_);
    callletters_.Swap(&other->callletters_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TestDeliver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TestDeliver_descriptor_;
  metadata.reflection = TestDeliver_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gboss

// @@protoc_insertion_point(global_scope)
