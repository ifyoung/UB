// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: GBoss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "GBoss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace gboss {

namespace {

const ::google_public::protobuf::Descriptor* MapEntry_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  MapEntry_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OBDInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OBDInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GpsSimpleInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GpsSimpleInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* BaseStationInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  BaseStationInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* BaseStationAddress_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  BaseStationAddress_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* YDWInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  YDWInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* NodeLostInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  NodeLostInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* NodeFaultInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  NodeFaultInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FaultLightStatus_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FaultLightStatus_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GpsBaseInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GpsBaseInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GpsRoadInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GpsRoadInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GpsPointInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GpsPointInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GpsReferPosition_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GpsReferPosition_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* GpsInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  GpsInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* AlarmInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  AlarmInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* UnitVersion_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  UnitVersion_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OperateDataBaseInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OperateDataBaseInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* OperateData_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  OperateData_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ShortMessage_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ShortMessage_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* TravelInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  TravelInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FaultDefine_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FaultDefine_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* FaultInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  FaultInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* AppNoticeInfo_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  AppNoticeInfo_reflection_ = NULL;
const ::google_public::protobuf::Descriptor* ECUConfig_descriptor_ = NULL;
const ::google_public::protobuf::internal::GeneratedMessageReflection*
  ECUConfig_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_GBoss_2eproto() {
  protobuf_AddDesc_GBoss_2eproto();
  const ::google_public::protobuf::FileDescriptor* file =
    ::google_public::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "GBoss.proto");
  GOOGLE_CHECK(file != NULL);
  MapEntry_descriptor_ = file->message_type(0);
  static const int MapEntry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, value_),
  };
  MapEntry_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      MapEntry_descriptor_,
      MapEntry::default_instance_,
      MapEntry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapEntry, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(MapEntry));
  OBDInfo_descriptor_ = file->message_type(1);
  static const int OBDInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, remainoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, remainpercentoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, averageoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, houroil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, totaldistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, watertemperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, reviseoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, rotationspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, intakeairtemperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, airdischange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, otherinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, gpstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, remaindistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, history_),
  };
  OBDInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OBDInfo_descriptor_,
      OBDInfo::default_instance_,
      OBDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OBDInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OBDInfo));
  GpsSimpleInfo_descriptor_ = file->message_type(2);
  static const int GpsSimpleInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, gpstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, totaldistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, oil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, remainpercentoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, canspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, remaindistance_),
  };
  GpsSimpleInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GpsSimpleInfo_descriptor_,
      GpsSimpleInfo::default_instance_,
      GpsSimpleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsSimpleInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsSimpleInfo));
  BaseStationInfo_descriptor_ = file->message_type(3);
  static const int BaseStationInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationInfo, mcc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationInfo, mnc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationInfo, lac_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationInfo, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationInfo, bsss_),
  };
  BaseStationInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      BaseStationInfo_descriptor_,
      BaseStationInfo::default_instance_,
      BaseStationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseStationInfo));
  BaseStationAddress_descriptor_ = file->message_type(4);
  static const int BaseStationAddress_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationAddress, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationAddress, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationAddress, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationAddress, addressdesc_),
  };
  BaseStationAddress_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      BaseStationAddress_descriptor_,
      BaseStationAddress::default_instance_,
      BaseStationAddress_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationAddress, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseStationAddress, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseStationAddress));
  YDWInfo_descriptor_ = file->message_type(5);
  static const int YDWInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDWInfo, temperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDWInfo, drivingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDWInfo, totaldistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDWInfo, unitpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDWInfo, bluetoothpower_),
  };
  YDWInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      YDWInfo_descriptor_,
      YDWInfo::default_instance_,
      YDWInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDWInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(YDWInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(YDWInfo));
  NodeLostInfo_descriptor_ = file->message_type(6);
  static const int NodeLostInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, abs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, esp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, ems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, peps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, tcu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, bcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, icm_),
  };
  NodeLostInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      NodeLostInfo_descriptor_,
      NodeLostInfo::default_instance_,
      NodeLostInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeLostInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeLostInfo));
  NodeFaultInfo_descriptor_ = file->message_type(7);
  static const int NodeFaultInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, ebd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, abs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, esp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, svs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, mil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, tcu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, peps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, tbox_),
  };
  NodeFaultInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      NodeFaultInfo_descriptor_,
      NodeFaultInfo::default_instance_,
      NodeFaultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeFaultInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeFaultInfo));
  FaultLightStatus_descriptor_ = file->message_type(8);
  static const int FaultLightStatus_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultLightStatus, nodelostinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultLightStatus, nodefaultinfo_),
  };
  FaultLightStatus_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FaultLightStatus_descriptor_,
      FaultLightStatus::default_instance_,
      FaultLightStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultLightStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultLightStatus, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FaultLightStatus));
  GpsBaseInfo_descriptor_ = file->message_type(9);
  static const int GpsBaseInfo_offsets_[19] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, gpstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, loc_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, lat_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, lng_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, speed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, course_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, totaldistance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, oil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, oilpercent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, temperature1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, temperature2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, appendparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, obdinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, basestations_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, address_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, ydwinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, signal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, faultlightstatus_),
  };
  GpsBaseInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GpsBaseInfo_descriptor_,
      GpsBaseInfo::default_instance_,
      GpsBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsBaseInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsBaseInfo));
  GpsRoadInfo_descriptor_ = file->message_type(10);
  static const int GpsRoadInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, latonroad_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, lngonroad_),
  };
  GpsRoadInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GpsRoadInfo_descriptor_,
      GpsRoadInfo::default_instance_,
      GpsRoadInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsRoadInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsRoadInfo));
  GpsPointInfo_descriptor_ = file->message_type(11);
  static const int GpsPointInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsPointInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsPointInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsPointInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsPointInfo, id_),
  };
  GpsPointInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GpsPointInfo_descriptor_,
      GpsPointInfo::default_instance_,
      GpsPointInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsPointInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsPointInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsPointInfo));
  GpsReferPosition_descriptor_ = file->message_type(12);
  static const int GpsReferPosition_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsReferPosition, province_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsReferPosition, city_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsReferPosition, county_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsReferPosition, roads_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsReferPosition, points_),
  };
  GpsReferPosition_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GpsReferPosition_descriptor_,
      GpsReferPosition::default_instance_,
      GpsReferPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsReferPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsReferPosition, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsReferPosition));
  GpsInfo_descriptor_ = file->message_type(13);
  static const int GpsInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, referposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, history_),
  };
  GpsInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      GpsInfo_descriptor_,
      GpsInfo::default_instance_,
      GpsInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GpsInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(GpsInfo));
  AlarmInfo_descriptor_ = file->message_type(14);
  static const int AlarmInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, referposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, history_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, trigger_),
  };
  AlarmInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      AlarmInfo_descriptor_,
      AlarmInfo::default_instance_,
      AlarmInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlarmInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(AlarmInfo));
  UnitVersion_descriptor_ = file->message_type(15);
  static const int UnitVersion_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitVersion, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitVersion, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitVersion, result_),
  };
  UnitVersion_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      UnitVersion_descriptor_,
      UnitVersion::default_instance_,
      UnitVersion_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitVersion, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UnitVersion, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(UnitVersion));
  OperateDataBaseInfo_descriptor_ = file->message_type(16);
  static const int OperateDataBaseInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, price_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, counttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, operatemoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, operatemile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, nullmile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, overspeedmile_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, overspeedcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, poweroffcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, powerofftime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, sequenceno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, appendparams_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, perprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, licenseno_),
  };
  OperateDataBaseInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OperateDataBaseInfo_descriptor_,
      OperateDataBaseInfo::default_instance_,
      OperateDataBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateDataBaseInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateDataBaseInfo));
  OperateData_descriptor_ = file->message_type(17);
  static const int OperateData_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, startgps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, startpoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, stopgps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, stoppoi_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, history_),
  };
  OperateData_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      OperateData_descriptor_,
      OperateData::default_instance_,
      OperateData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperateData, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(OperateData));
  ShortMessage_descriptor_ = file->message_type(18);
  static const int ShortMessage_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, recvtime_),
  };
  ShortMessage_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ShortMessage_descriptor_,
      ShortMessage::default_instance_,
      ShortMessage_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ShortMessage, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ShortMessage));
  TravelInfo_descriptor_ = file->message_type(19);
  static const int TravelInfo_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, distance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, maxspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, overspeedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, quickbrakecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, emergencybrakecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, quickspeedupcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, emergencyspeedupcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, averagespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, maxwatertemperature_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, maxrotationspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, voltage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, totaloil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, averageoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, tireddrivingtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, serialnumber_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, averagerotationspeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, maxoil_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, idletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, startgps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, startreferpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, endgps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, endreferpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, history_),
  };
  TravelInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      TravelInfo_descriptor_,
      TravelInfo::default_instance_,
      TravelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TravelInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(TravelInfo));
  FaultDefine_descriptor_ = file->message_type(20);
  static const int FaultDefine_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultDefine, faulttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultDefine, faultcode_),
  };
  FaultDefine_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FaultDefine_descriptor_,
      FaultDefine::default_instance_,
      FaultDefine_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultDefine, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultDefine, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FaultDefine));
  FaultInfo_descriptor_ = file->message_type(21);
  static const int FaultInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultInfo, faulttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultInfo, faults_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultInfo, unittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultInfo, history_),
  };
  FaultInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      FaultInfo_descriptor_,
      FaultInfo::default_instance_,
      FaultInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FaultInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(FaultInfo));
  AppNoticeInfo_descriptor_ = file->message_type(22);
  static const int AppNoticeInfo_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, referposition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, cmdid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, cmdretcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, cmdretmsg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, noticetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, alarmstatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, cmdsn_),
  };
  AppNoticeInfo_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      AppNoticeInfo_descriptor_,
      AppNoticeInfo::default_instance_,
      AppNoticeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AppNoticeInfo, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(AppNoticeInfo));
  ECUConfig_descriptor_ = file->message_type(23);
  static const int ECUConfig_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, callletter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, updatetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, abs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, esp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, srs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, ems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, immo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, peps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, bcm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, tcu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, tpms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, apm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, icm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, eps_),
  };
  ECUConfig_reflection_ =
    new ::google_public::protobuf::internal::GeneratedMessageReflection(
      ECUConfig_descriptor_,
      ECUConfig::default_instance_,
      ECUConfig_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ECUConfig, _unknown_fields_),
      -1,
      ::google_public::protobuf::DescriptorPool::generated_pool(),
      ::google_public::protobuf::MessageFactory::generated_factory(),
      sizeof(ECUConfig));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google_public::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_GBoss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapEntry_descriptor_, &MapEntry::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OBDInfo_descriptor_, &OBDInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsSimpleInfo_descriptor_, &GpsSimpleInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseStationInfo_descriptor_, &BaseStationInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseStationAddress_descriptor_, &BaseStationAddress::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    YDWInfo_descriptor_, &YDWInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeLostInfo_descriptor_, &NodeLostInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeFaultInfo_descriptor_, &NodeFaultInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaultLightStatus_descriptor_, &FaultLightStatus::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsBaseInfo_descriptor_, &GpsBaseInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsRoadInfo_descriptor_, &GpsRoadInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsPointInfo_descriptor_, &GpsPointInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsReferPosition_descriptor_, &GpsReferPosition::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GpsInfo_descriptor_, &GpsInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlarmInfo_descriptor_, &AlarmInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UnitVersion_descriptor_, &UnitVersion::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateDataBaseInfo_descriptor_, &OperateDataBaseInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperateData_descriptor_, &OperateData::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ShortMessage_descriptor_, &ShortMessage::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TravelInfo_descriptor_, &TravelInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaultDefine_descriptor_, &FaultDefine::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FaultInfo_descriptor_, &FaultInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AppNoticeInfo_descriptor_, &AppNoticeInfo::default_instance());
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ECUConfig_descriptor_, &ECUConfig::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_GBoss_2eproto() {
  delete MapEntry::default_instance_;
  delete MapEntry_reflection_;
  delete OBDInfo::default_instance_;
  delete OBDInfo_reflection_;
  delete GpsSimpleInfo::default_instance_;
  delete GpsSimpleInfo_reflection_;
  delete BaseStationInfo::default_instance_;
  delete BaseStationInfo_reflection_;
  delete BaseStationAddress::default_instance_;
  delete BaseStationAddress_reflection_;
  delete YDWInfo::default_instance_;
  delete YDWInfo_reflection_;
  delete NodeLostInfo::default_instance_;
  delete NodeLostInfo_reflection_;
  delete NodeFaultInfo::default_instance_;
  delete NodeFaultInfo_reflection_;
  delete FaultLightStatus::default_instance_;
  delete FaultLightStatus_reflection_;
  delete GpsBaseInfo::default_instance_;
  delete GpsBaseInfo_reflection_;
  delete GpsRoadInfo::default_instance_;
  delete GpsRoadInfo_reflection_;
  delete GpsPointInfo::default_instance_;
  delete GpsPointInfo_reflection_;
  delete GpsReferPosition::default_instance_;
  delete GpsReferPosition_reflection_;
  delete GpsInfo::default_instance_;
  delete GpsInfo_reflection_;
  delete AlarmInfo::default_instance_;
  delete AlarmInfo_reflection_;
  delete UnitVersion::default_instance_;
  delete UnitVersion_reflection_;
  delete OperateDataBaseInfo::default_instance_;
  delete OperateDataBaseInfo_reflection_;
  delete OperateData::default_instance_;
  delete OperateData_reflection_;
  delete ShortMessage::default_instance_;
  delete ShortMessage_reflection_;
  delete TravelInfo::default_instance_;
  delete TravelInfo_reflection_;
  delete FaultDefine::default_instance_;
  delete FaultDefine_reflection_;
  delete FaultInfo::default_instance_;
  delete FaultInfo_reflection_;
  delete AppNoticeInfo::default_instance_;
  delete AppNoticeInfo_reflection_;
  delete ECUConfig::default_instance_;
  delete ECUConfig_reflection_;
}

void protobuf_AddDesc_GBoss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google_public::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\013GBoss.proto\022\005gboss\"&\n\010MapEntry\022\013\n\003key\030"
    "\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\375\002\n\007OBDInfo\022\021\n\trema"
    "inOil\030\001 \001(\005\022\030\n\020remainPercentOil\030\002 \001(\005\022\022\n"
    "\naverageOil\030\003 \001(\005\022\017\n\007hourOil\030\004 \001(\005\022\025\n\rto"
    "talDistance\030\005 \001(\005\022\030\n\020waterTemperature\030\006 "
    "\001(\005\022\021\n\treviseOil\030\007 \001(\005\022\025\n\rrotationSpeed\030"
    "\010 \001(\005\022\034\n\024intakeAirTemperature\030\t \001(\005\022\024\n\014a"
    "irDischange\030\n \001(\005\022\"\n\totherInfo\030\013 \003(\0132\017.g"
    "boss.MapEntry\022\022\n\ncallLetter\030\014 \001(\t\022\017\n\007gps"
    "Time\030\r \001(\003\022\r\n\005speed\030\016 \001(\005\022\026\n\016remainDista"
    "nce\030\017 \001(\005\022\020\n\010unitType\030\020 \001(\005\022\017\n\007history\030\021"
    " \001(\005\"\336\001\n\rGpsSimpleInfo\022\017\n\007gpsTime\030\001 \002(\003\022"
    "\013\n\003loc\030\002 \002(\010\022\013\n\003lat\030\003 \002(\005\022\013\n\003lng\030\004 \002(\005\022\r"
    "\n\005speed\030\005 \002(\005\022\016\n\006course\030\006 \002(\005\022\016\n\006status\030"
    "\007 \003(\005\022\025\n\rtotalDistance\030\010 \001(\005\022\013\n\003oil\030\t \001("
    "\005\022\030\n\020remainPercentOil\030\n \001(\005\022\020\n\010canspeed\030"
    "\013 \001(\005\022\026\n\016remainDistance\030\014 \001(\005\"S\n\017BaseSta"
    "tionInfo\022\013\n\003mcc\030\001 \002(\t\022\013\n\003mnc\030\002 \002(\t\022\013\n\003la"
    "c\030\003 \002(\005\022\013\n\003cid\030\004 \002(\005\022\014\n\004bsss\030\005 \001(\005\"V\n\022Ba"
    "seStationAddress\022\013\n\003lat\030\001 \002(\005\022\013\n\003lng\030\002 \002"
    "(\005\022\021\n\tprecision\030\003 \001(\005\022\023\n\013addressDesc\030\004 \001"
    "(\t\"u\n\007YDWInfo\022\023\n\013temperature\030\001 \002(\005\022\023\n\013dr"
    "ivingTime\030\002 \002(\005\022\025\n\rtotalDistance\030\003 \002(\005\022\021"
    "\n\tunitPower\030\004 \002(\005\022\026\n\016bluetoothPower\030\005 \002("
    "\005\"j\n\014NodeLostInfo\022\013\n\003abs\030\001 \001(\005\022\013\n\003esp\030\002 "
    "\001(\005\022\013\n\003ems\030\003 \001(\005\022\014\n\004peps\030\004 \001(\005\022\013\n\003tcu\030\005 "
    "\001(\005\022\013\n\003bcm\030\006 \001(\005\022\013\n\003icm\030\007 \001(\005\"y\n\rNodeFau"
    "ltInfo\022\013\n\003ebd\030\001 \001(\005\022\013\n\003abs\030\002 \001(\005\022\013\n\003esp\030"
    "\003 \001(\005\022\013\n\003svs\030\004 \001(\005\022\013\n\003mil\030\005 \001(\005\022\013\n\003tcu\030\006"
    " \001(\005\022\014\n\004peps\030\007 \001(\005\022\014\n\004tbox\030\010 \001(\005\"j\n\020Faul"
    "tLightStatus\022)\n\014nodeLostInfo\030\001 \001(\0132\023.gbo"
    "ss.NodeLostInfo\022+\n\rnodeFaultInfo\030\002 \001(\0132\024"
    ".gboss.NodeFaultInfo\"\336\003\n\013GpsBaseInfo\022\017\n\007"
    "gpsTime\030\001 \002(\003\022\013\n\003loc\030\002 \002(\010\022\013\n\003lat\030\003 \002(\005\022"
    "\013\n\003lng\030\004 \002(\005\022\r\n\005speed\030\005 \002(\005\022\016\n\006course\030\006 "
    "\002(\005\022\016\n\006status\030\007 \003(\005\022\025\n\rtotalDistance\030\010 \001"
    "(\005\022\013\n\003oil\030\t \001(\005\022\022\n\noilPercent\030\n \001(\005\022\024\n\014t"
    "emperature1\030\013 \001(\005\022\024\n\014temperature2\030\014 \001(\005\022"
    "%\n\014appendParams\030\r \003(\0132\017.gboss.MapEntry\022\037"
    "\n\007obdInfo\030\016 \001(\0132\016.gboss.OBDInfo\022,\n\014baseS"
    "tations\030\017 \003(\0132\026.gboss.BaseStationInfo\022*\n"
    "\007address\030\020 \001(\0132\031.gboss.BaseStationAddres"
    "s\022\037\n\007ydwInfo\030\021 \001(\0132\016.gboss.YDWInfo\022\016\n\006si"
    "gnal\030\022 \001(\005\0221\n\020faultLightStatus\030\023 \001(\0132\027.g"
    "boss.FaultLightStatus\"n\n\013GpsRoadInfo\022\014\n\004"
    "name\030\001 \002(\t\022\r\n\005level\030\002 \002(\005\022\020\n\010distance\030\003 "
    "\002(\005\022\n\n\002id\030\004 \001(\005\022\021\n\tlatOnRoad\030\005 \001(\005\022\021\n\tln"
    "gOnRoad\030\006 \001(\005\"H\n\014GpsPointInfo\022\014\n\004name\030\001 "
    "\002(\t\022\014\n\004type\030\002 \002(\005\022\020\n\010distance\030\003 \002(\005\022\n\n\002i"
    "d\030\004 \001(\005\"\212\001\n\020GpsReferPosition\022\020\n\010province"
    "\030\001 \002(\t\022\014\n\004city\030\002 \002(\t\022\016\n\006county\030\003 \002(\t\022!\n\005"
    "roads\030\004 \003(\0132\022.gboss.GpsRoadInfo\022#\n\006point"
    "s\030\005 \003(\0132\023.gboss.GpsPointInfo\"\225\001\n\007GpsInfo"
    "\022\022\n\ncallLetter\030\001 \002(\t\022$\n\010baseInfo\030\002 \002(\0132\022"
    ".gboss.GpsBaseInfo\022.\n\rreferPosition\030\003 \001("
    "\0132\027.gboss.GpsReferPosition\022\017\n\007content\030\004 "
    "\001(\014\022\017\n\007history\030\005 \001(\005\"\272\001\n\tAlarmInfo\022\022\n\nca"
    "llLetter\030\001 \002(\t\022$\n\010baseInfo\030\002 \002(\0132\022.gboss"
    ".GpsBaseInfo\022.\n\rreferPosition\030\003 \001(\0132\027.gb"
    "oss.GpsReferPosition\022\017\n\007content\030\004 \001(\014\022\017\n"
    "\007history\030\005 \001(\005\022\020\n\010unittype\030\006 \001(\005\022\017\n\007trig"
    "ger\030\007 \001(\005\"B\n\013UnitVersion\022\022\n\ncallLetter\030\001"
    " \002(\t\022\017\n\007version\030\002 \002(\t\022\016\n\006result\030\003 \001(\005\"\260\002"
    "\n\023OperateDataBaseInfo\022\r\n\005price\030\001 \002(\005\022\021\n\t"
    "countTime\030\002 \002(\005\022\024\n\014operateMoney\030\003 \002(\005\022\023\n"
    "\013operateMile\030\004 \002(\005\022\020\n\010nullMile\030\005 \001(\005\022\025\n\r"
    "overSpeedMile\030\006 \001(\005\022\026\n\016overSpeedCount\030\007 "
    "\001(\005\022\025\n\rpowerOffCount\030\010 \001(\005\022\024\n\014powerOffTi"
    "me\030\t \001(\005\022\022\n\nsequenceNo\030\n \001(\005\022%\n\014appendPa"
    "rams\030\013 \003(\0132\017.gboss.MapEntry\022\020\n\010perprice\030"
    "\014 \001(\005\022\021\n\tlicenseno\030\r \001(\t\"\221\002\n\013OperateData"
    "\022\022\n\ncallLetter\030\001 \002(\t\022,\n\010baseInfo\030\002 \002(\0132\032"
    ".gboss.OperateDataBaseInfo\022$\n\010startGps\030\003"
    " \002(\0132\022.gboss.GpsBaseInfo\022)\n\010startPoi\030\004 \001"
    "(\0132\027.gboss.GpsReferPosition\022#\n\007stopGps\030\005"
    " \002(\0132\022.gboss.GpsBaseInfo\022(\n\007stopPoi\030\006 \001("
    "\0132\027.gboss.GpsReferPosition\022\017\n\007content\030\007 "
    "\001(\014\022\017\n\007history\030\010 \001(\005\"A\n\014ShortMessage\022\022\n\n"
    "callLetter\030\001 \002(\t\022\013\n\003msg\030\002 \002(\t\022\020\n\010recvTim"
    "e\030\003 \001(\003\"\234\005\n\nTravelInfo\022\022\n\ncallLetter\030\001 \002"
    "(\t\022\021\n\tstartTime\030\002 \002(\003\022\017\n\007endTime\030\003 \002(\003\022\020"
    "\n\010distance\030\004 \001(\005\022\020\n\010maxSpeed\030\005 \001(\005\022\025\n\rov"
    "erSpeedTime\030\006 \001(\005\022\027\n\017quickBrakeCount\030\007 \001"
    "(\005\022\033\n\023emergencyBrakeCount\030\010 \001(\005\022\031\n\021quick"
    "SpeedUpCount\030\t \001(\005\022\035\n\025emergencySpeedUpCo"
    "unt\030\n \001(\005\022\024\n\014averageSpeed\030\013 \001(\005\022\033\n\023maxWa"
    "terTemperature\030\014 \001(\005\022\030\n\020maxRotationSpeed"
    "\030\r \001(\005\022\017\n\007voltage\030\016 \001(\005\022\020\n\010totalOil\030\017 \001("
    "\005\022\022\n\naverageOil\030\020 \001(\005\022\030\n\020tiredDrivingTim"
    "e\030\021 \001(\005\022\024\n\014serialNumber\030\022 \001(\005\022\034\n\024average"
    "RotationSpeed\030\023 \001(\005\022\016\n\006maxOil\030\024 \001(\005\022\020\n\010i"
    "dleTime\030\025 \001(\005\022$\n\010startGps\030\026 \001(\0132\022.gboss."
    "GpsBaseInfo\022.\n\rstartReferPos\030\027 \001(\0132\027.gbo"
    "ss.GpsReferPosition\022\"\n\006endGps\030\030 \001(\0132\022.gb"
    "oss.GpsBaseInfo\022,\n\013endReferPos\030\031 \001(\0132\027.g"
    "boss.GpsReferPosition\022\017\n\007history\030\032 \001(\005\"3"
    "\n\013FaultDefine\022\021\n\tfaultType\030\001 \001(\005\022\021\n\tfaul"
    "tCode\030\002 \003(\t\"y\n\tFaultInfo\022\022\n\ncallLetter\030\001"
    " \002(\t\022\021\n\tfaultTime\030\002 \002(\003\022\"\n\006faults\030\003 \003(\0132"
    "\022.gboss.FaultDefine\022\020\n\010unitType\030\004 \001(\005\022\017\n"
    "\007history\030\005 \001(\005\"\207\002\n\rAppNoticeInfo\022\022\n\ncall"
    "Letter\030\001 \002(\t\022\r\n\005title\030\002 \002(\t\022\017\n\007content\030\003"
    " \002(\t\022$\n\010baseInfo\030\004 \001(\0132\022.gboss.GpsBaseIn"
    "fo\022.\n\rreferPosition\030\005 \001(\0132\027.gboss.GpsRef"
    "erPosition\022\r\n\005cmdId\030\006 \001(\005\022\022\n\ncmdretcode\030"
    "\007 \001(\005\022\021\n\tcmdretmsg\030\010 \001(\t\022\022\n\nnoticetype\030\t"
    " \001(\005\022\023\n\013alarmstatus\030\n \001(\005\022\r\n\005cmdsn\030\013 \001(\t"
    "\"\322\001\n\tECUConfig\022\022\n\ncallLetter\030\001 \002(\t\022\022\n\nup"
    "dateTime\030\002 \002(\003\022\013\n\003abs\030\003 \001(\005\022\013\n\003esp\030\004 \001(\005"
    "\022\013\n\003srs\030\005 \001(\005\022\013\n\003ems\030\006 \001(\005\022\014\n\004immo\030\007 \001(\005"
    "\022\014\n\004peps\030\010 \001(\005\022\013\n\003bcm\030\t \001(\005\022\013\n\003tcu\030\n \001(\005"
    "\022\014\n\004tpms\030\013 \001(\005\022\013\n\003apm\030\014 \001(\005\022\013\n\003icm\030\r \001(\005"
    "\022\013\n\003eps\030\016 \001(\005B1\n cc.chinagps.gboss.comce"
    "nter.buffB\rGBossDataBuff", 4544);
  ::google_public::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "GBoss.proto", &protobuf_RegisterTypes);
  MapEntry::default_instance_ = new MapEntry();
  OBDInfo::default_instance_ = new OBDInfo();
  GpsSimpleInfo::default_instance_ = new GpsSimpleInfo();
  BaseStationInfo::default_instance_ = new BaseStationInfo();
  BaseStationAddress::default_instance_ = new BaseStationAddress();
  YDWInfo::default_instance_ = new YDWInfo();
  NodeLostInfo::default_instance_ = new NodeLostInfo();
  NodeFaultInfo::default_instance_ = new NodeFaultInfo();
  FaultLightStatus::default_instance_ = new FaultLightStatus();
  GpsBaseInfo::default_instance_ = new GpsBaseInfo();
  GpsRoadInfo::default_instance_ = new GpsRoadInfo();
  GpsPointInfo::default_instance_ = new GpsPointInfo();
  GpsReferPosition::default_instance_ = new GpsReferPosition();
  GpsInfo::default_instance_ = new GpsInfo();
  AlarmInfo::default_instance_ = new AlarmInfo();
  UnitVersion::default_instance_ = new UnitVersion();
  OperateDataBaseInfo::default_instance_ = new OperateDataBaseInfo();
  OperateData::default_instance_ = new OperateData();
  ShortMessage::default_instance_ = new ShortMessage();
  TravelInfo::default_instance_ = new TravelInfo();
  FaultDefine::default_instance_ = new FaultDefine();
  FaultInfo::default_instance_ = new FaultInfo();
  AppNoticeInfo::default_instance_ = new AppNoticeInfo();
  ECUConfig::default_instance_ = new ECUConfig();
  MapEntry::default_instance_->InitAsDefaultInstance();
  OBDInfo::default_instance_->InitAsDefaultInstance();
  GpsSimpleInfo::default_instance_->InitAsDefaultInstance();
  BaseStationInfo::default_instance_->InitAsDefaultInstance();
  BaseStationAddress::default_instance_->InitAsDefaultInstance();
  YDWInfo::default_instance_->InitAsDefaultInstance();
  NodeLostInfo::default_instance_->InitAsDefaultInstance();
  NodeFaultInfo::default_instance_->InitAsDefaultInstance();
  FaultLightStatus::default_instance_->InitAsDefaultInstance();
  GpsBaseInfo::default_instance_->InitAsDefaultInstance();
  GpsRoadInfo::default_instance_->InitAsDefaultInstance();
  GpsPointInfo::default_instance_->InitAsDefaultInstance();
  GpsReferPosition::default_instance_->InitAsDefaultInstance();
  GpsInfo::default_instance_->InitAsDefaultInstance();
  AlarmInfo::default_instance_->InitAsDefaultInstance();
  UnitVersion::default_instance_->InitAsDefaultInstance();
  OperateDataBaseInfo::default_instance_->InitAsDefaultInstance();
  OperateData::default_instance_->InitAsDefaultInstance();
  ShortMessage::default_instance_->InitAsDefaultInstance();
  TravelInfo::default_instance_->InitAsDefaultInstance();
  FaultDefine::default_instance_->InitAsDefaultInstance();
  FaultInfo::default_instance_->InitAsDefaultInstance();
  AppNoticeInfo::default_instance_->InitAsDefaultInstance();
  ECUConfig::default_instance_->InitAsDefaultInstance();
  ::google_public::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_GBoss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_GBoss_2eproto {
  StaticDescriptorInitializer_GBoss_2eproto() {
    protobuf_AddDesc_GBoss_2eproto();
  }
} static_descriptor_initializer_GBoss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MapEntry::kKeyFieldNumber;
const int MapEntry::kValueFieldNumber;
#endif  // !_MSC_VER

MapEntry::MapEntry()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.MapEntry)
}

void MapEntry::InitAsDefaultInstance() {
}

MapEntry::MapEntry(const MapEntry& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.MapEntry)
}

void MapEntry::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  value_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapEntry::~MapEntry() {
  // @@protoc_insertion_point(destructor:gboss.MapEntry)
  SharedDtor();
}

void MapEntry::SharedDtor() {
  if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete key_;
  }
  if (value_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void MapEntry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* MapEntry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapEntry_descriptor_;
}

const MapEntry& MapEntry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

MapEntry* MapEntry::default_instance_ = NULL;

MapEntry* MapEntry::New() const {
  return new MapEntry;
}

void MapEntry::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_key()) {
      if (key_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapEntry::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.MapEntry)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->key().data(), this->key().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "key");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (tag == 18) {
         parse_value:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->value().data(), this->value().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "value");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.MapEntry)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.MapEntry)
  return false;
#undef DO_
}

void MapEntry::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.MapEntry)
  // required string key = 1;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.MapEntry)
}

::google_public::protobuf::uint8* MapEntry::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.MapEntry)
  // required string key = 1;
  if (has_key()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->key().data(), this->key().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "key");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->value().data(), this->value().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "value");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.MapEntry)
  return target;
}

int MapEntry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapEntry::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapEntry* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const MapEntry*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapEntry::MergeFrom(const MapEntry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapEntry::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapEntry::CopyFrom(const MapEntry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapEntry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MapEntry::Swap(MapEntry* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata MapEntry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = MapEntry_descriptor_;
  metadata.reflection = MapEntry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OBDInfo::kRemainOilFieldNumber;
const int OBDInfo::kRemainPercentOilFieldNumber;
const int OBDInfo::kAverageOilFieldNumber;
const int OBDInfo::kHourOilFieldNumber;
const int OBDInfo::kTotalDistanceFieldNumber;
const int OBDInfo::kWaterTemperatureFieldNumber;
const int OBDInfo::kReviseOilFieldNumber;
const int OBDInfo::kRotationSpeedFieldNumber;
const int OBDInfo::kIntakeAirTemperatureFieldNumber;
const int OBDInfo::kAirDischangeFieldNumber;
const int OBDInfo::kOtherInfoFieldNumber;
const int OBDInfo::kCallLetterFieldNumber;
const int OBDInfo::kGpsTimeFieldNumber;
const int OBDInfo::kSpeedFieldNumber;
const int OBDInfo::kRemainDistanceFieldNumber;
const int OBDInfo::kUnitTypeFieldNumber;
const int OBDInfo::kHistoryFieldNumber;
#endif  // !_MSC_VER

OBDInfo::OBDInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.OBDInfo)
}

void OBDInfo::InitAsDefaultInstance() {
}

OBDInfo::OBDInfo(const OBDInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.OBDInfo)
}

void OBDInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  remainoil_ = 0;
  remainpercentoil_ = 0;
  averageoil_ = 0;
  houroil_ = 0;
  totaldistance_ = 0;
  watertemperature_ = 0;
  reviseoil_ = 0;
  rotationspeed_ = 0;
  intakeairtemperature_ = 0;
  airdischange_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  gpstime_ = GOOGLE_LONGLONG(0);
  speed_ = 0;
  remaindistance_ = 0;
  unittype_ = 0;
  history_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OBDInfo::~OBDInfo() {
  // @@protoc_insertion_point(destructor:gboss.OBDInfo)
  SharedDtor();
}

void OBDInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (this != default_instance_) {
  }
}

void OBDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OBDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OBDInfo_descriptor_;
}

const OBDInfo& OBDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

OBDInfo* OBDInfo::default_instance_ = NULL;

OBDInfo* OBDInfo::New() const {
  return new OBDInfo;
}

void OBDInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OBDInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(remainoil_, rotationspeed_);
  }
  if (_has_bits_[8 / 32] & 64256) {
    ZR_(intakeairtemperature_, airdischange_);
    ZR_(gpstime_, unittype_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
  }
  history_ = 0;

#undef OFFSET_OF_FIELD_
#undef ZR_

  otherinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OBDInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.OBDInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 remainOil = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainoil_)));
          set_has_remainoil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_remainPercentOil;
        break;
      }

      // optional int32 remainPercentOil = 2;
      case 2: {
        if (tag == 16) {
         parse_remainPercentOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainpercentoil_)));
          set_has_remainpercentoil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_averageOil;
        break;
      }

      // optional int32 averageOil = 3;
      case 3: {
        if (tag == 24) {
         parse_averageOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averageoil_)));
          set_has_averageoil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_hourOil;
        break;
      }

      // optional int32 hourOil = 4;
      case 4: {
        if (tag == 32) {
         parse_hourOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &houroil_)));
          set_has_houroil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_totalDistance;
        break;
      }

      // optional int32 totalDistance = 5;
      case 5: {
        if (tag == 40) {
         parse_totalDistance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldistance_)));
          set_has_totaldistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_waterTemperature;
        break;
      }

      // optional int32 waterTemperature = 6;
      case 6: {
        if (tag == 48) {
         parse_waterTemperature:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &watertemperature_)));
          set_has_watertemperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_reviseOil;
        break;
      }

      // optional int32 reviseOil = 7;
      case 7: {
        if (tag == 56) {
         parse_reviseOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reviseoil_)));
          set_has_reviseoil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_rotationSpeed;
        break;
      }

      // optional int32 rotationSpeed = 8;
      case 8: {
        if (tag == 64) {
         parse_rotationSpeed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rotationspeed_)));
          set_has_rotationspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_intakeAirTemperature;
        break;
      }

      // optional int32 intakeAirTemperature = 9;
      case 9: {
        if (tag == 72) {
         parse_intakeAirTemperature:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &intakeairtemperature_)));
          set_has_intakeairtemperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_airDischange;
        break;
      }

      // optional int32 airDischange = 10;
      case 10: {
        if (tag == 80) {
         parse_airDischange:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &airdischange_)));
          set_has_airdischange();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_otherInfo;
        break;
      }

      // repeated .gboss.MapEntry otherInfo = 11;
      case 11: {
        if (tag == 90) {
         parse_otherInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_otherInfo;
        if (input->ExpectTag(98)) goto parse_callLetter;
        break;
      }

      // optional string callLetter = 12;
      case 12: {
        if (tag == 98) {
         parse_callLetter:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_gpsTime;
        break;
      }

      // optional int64 gpsTime = 13;
      case 13: {
        if (tag == 104) {
         parse_gpsTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gpstime_)));
          set_has_gpstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_speed;
        break;
      }

      // optional int32 speed = 14;
      case 14: {
        if (tag == 112) {
         parse_speed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_remainDistance;
        break;
      }

      // optional int32 remainDistance = 15;
      case 15: {
        if (tag == 120) {
         parse_remainDistance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindistance_)));
          set_has_remaindistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_unitType;
        break;
      }

      // optional int32 unitType = 16;
      case 16: {
        if (tag == 128) {
         parse_unitType:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_history;
        break;
      }

      // optional int32 history = 17;
      case 17: {
        if (tag == 136) {
         parse_history:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.OBDInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.OBDInfo)
  return false;
#undef DO_
}

void OBDInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.OBDInfo)
  // optional int32 remainOil = 1;
  if (has_remainoil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->remainoil(), output);
  }

  // optional int32 remainPercentOil = 2;
  if (has_remainpercentoil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->remainpercentoil(), output);
  }

  // optional int32 averageOil = 3;
  if (has_averageoil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->averageoil(), output);
  }

  // optional int32 hourOil = 4;
  if (has_houroil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->houroil(), output);
  }

  // optional int32 totalDistance = 5;
  if (has_totaldistance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->totaldistance(), output);
  }

  // optional int32 waterTemperature = 6;
  if (has_watertemperature()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->watertemperature(), output);
  }

  // optional int32 reviseOil = 7;
  if (has_reviseoil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->reviseoil(), output);
  }

  // optional int32 rotationSpeed = 8;
  if (has_rotationspeed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->rotationspeed(), output);
  }

  // optional int32 intakeAirTemperature = 9;
  if (has_intakeairtemperature()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->intakeairtemperature(), output);
  }

  // optional int32 airDischange = 10;
  if (has_airdischange()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->airdischange(), output);
  }

  // repeated .gboss.MapEntry otherInfo = 11;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->otherinfo(i), output);
  }

  // optional string callLetter = 12;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      12, this->callletter(), output);
  }

  // optional int64 gpsTime = 13;
  if (has_gpstime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(13, this->gpstime(), output);
  }

  // optional int32 speed = 14;
  if (has_speed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(14, this->speed(), output);
  }

  // optional int32 remainDistance = 15;
  if (has_remaindistance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(15, this->remaindistance(), output);
  }

  // optional int32 unitType = 16;
  if (has_unittype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(16, this->unittype(), output);
  }

  // optional int32 history = 17;
  if (has_history()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(17, this->history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.OBDInfo)
}

::google_public::protobuf::uint8* OBDInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.OBDInfo)
  // optional int32 remainOil = 1;
  if (has_remainoil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->remainoil(), target);
  }

  // optional int32 remainPercentOil = 2;
  if (has_remainpercentoil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->remainpercentoil(), target);
  }

  // optional int32 averageOil = 3;
  if (has_averageoil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->averageoil(), target);
  }

  // optional int32 hourOil = 4;
  if (has_houroil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->houroil(), target);
  }

  // optional int32 totalDistance = 5;
  if (has_totaldistance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totaldistance(), target);
  }

  // optional int32 waterTemperature = 6;
  if (has_watertemperature()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->watertemperature(), target);
  }

  // optional int32 reviseOil = 7;
  if (has_reviseoil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->reviseoil(), target);
  }

  // optional int32 rotationSpeed = 8;
  if (has_rotationspeed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->rotationspeed(), target);
  }

  // optional int32 intakeAirTemperature = 9;
  if (has_intakeairtemperature()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->intakeairtemperature(), target);
  }

  // optional int32 airDischange = 10;
  if (has_airdischange()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->airdischange(), target);
  }

  // repeated .gboss.MapEntry otherInfo = 11;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->otherinfo(i), target);
  }

  // optional string callLetter = 12;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->callletter(), target);
  }

  // optional int64 gpsTime = 13;
  if (has_gpstime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(13, this->gpstime(), target);
  }

  // optional int32 speed = 14;
  if (has_speed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->speed(), target);
  }

  // optional int32 remainDistance = 15;
  if (has_remaindistance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->remaindistance(), target);
  }

  // optional int32 unitType = 16;
  if (has_unittype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->unittype(), target);
  }

  // optional int32 history = 17;
  if (has_history()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.OBDInfo)
  return target;
}

int OBDInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 remainOil = 1;
    if (has_remainoil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->remainoil());
    }

    // optional int32 remainPercentOil = 2;
    if (has_remainpercentoil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->remainpercentoil());
    }

    // optional int32 averageOil = 3;
    if (has_averageoil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->averageoil());
    }

    // optional int32 hourOil = 4;
    if (has_houroil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->houroil());
    }

    // optional int32 totalDistance = 5;
    if (has_totaldistance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldistance());
    }

    // optional int32 waterTemperature = 6;
    if (has_watertemperature()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->watertemperature());
    }

    // optional int32 reviseOil = 7;
    if (has_reviseoil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->reviseoil());
    }

    // optional int32 rotationSpeed = 8;
    if (has_rotationspeed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->rotationspeed());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 intakeAirTemperature = 9;
    if (has_intakeairtemperature()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->intakeairtemperature());
    }

    // optional int32 airDischange = 10;
    if (has_airdischange()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->airdischange());
    }

    // optional string callLetter = 12;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // optional int64 gpsTime = 13;
    if (has_gpstime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->gpstime());
    }

    // optional int32 speed = 14;
    if (has_speed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // optional int32 remainDistance = 15;
    if (has_remaindistance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindistance());
    }

    // optional int32 unitType = 16;
    if (has_unittype()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->unittype());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 history = 17;
    if (has_history()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->history());
    }

  }
  // repeated .gboss.MapEntry otherInfo = 11;
  total_size += 1 * this->otherinfo_size();
  for (int i = 0; i < this->otherinfo_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OBDInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OBDInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OBDInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OBDInfo::MergeFrom(const OBDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherinfo_.MergeFrom(from.otherinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_remainoil()) {
      set_remainoil(from.remainoil());
    }
    if (from.has_remainpercentoil()) {
      set_remainpercentoil(from.remainpercentoil());
    }
    if (from.has_averageoil()) {
      set_averageoil(from.averageoil());
    }
    if (from.has_houroil()) {
      set_houroil(from.houroil());
    }
    if (from.has_totaldistance()) {
      set_totaldistance(from.totaldistance());
    }
    if (from.has_watertemperature()) {
      set_watertemperature(from.watertemperature());
    }
    if (from.has_reviseoil()) {
      set_reviseoil(from.reviseoil());
    }
    if (from.has_rotationspeed()) {
      set_rotationspeed(from.rotationspeed());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_intakeairtemperature()) {
      set_intakeairtemperature(from.intakeairtemperature());
    }
    if (from.has_airdischange()) {
      set_airdischange(from.airdischange());
    }
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_gpstime()) {
      set_gpstime(from.gpstime());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_remaindistance()) {
      set_remaindistance(from.remaindistance());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_history()) {
      set_history(from.history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OBDInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OBDInfo::CopyFrom(const OBDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OBDInfo::IsInitialized() const {

  if (!::google_public::protobuf::internal::AllAreInitialized(this->otherinfo())) return false;
  return true;
}

void OBDInfo::Swap(OBDInfo* other) {
  if (other != this) {
    std::swap(remainoil_, other->remainoil_);
    std::swap(remainpercentoil_, other->remainpercentoil_);
    std::swap(averageoil_, other->averageoil_);
    std::swap(houroil_, other->houroil_);
    std::swap(totaldistance_, other->totaldistance_);
    std::swap(watertemperature_, other->watertemperature_);
    std::swap(reviseoil_, other->reviseoil_);
    std::swap(rotationspeed_, other->rotationspeed_);
    std::swap(intakeairtemperature_, other->intakeairtemperature_);
    std::swap(airdischange_, other->airdischange_);
    otherinfo_.Swap(&other->otherinfo_);
    std::swap(callletter_, other->callletter_);
    std::swap(gpstime_, other->gpstime_);
    std::swap(speed_, other->speed_);
    std::swap(remaindistance_, other->remaindistance_);
    std::swap(unittype_, other->unittype_);
    std::swap(history_, other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OBDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OBDInfo_descriptor_;
  metadata.reflection = OBDInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsSimpleInfo::kGpsTimeFieldNumber;
const int GpsSimpleInfo::kLocFieldNumber;
const int GpsSimpleInfo::kLatFieldNumber;
const int GpsSimpleInfo::kLngFieldNumber;
const int GpsSimpleInfo::kSpeedFieldNumber;
const int GpsSimpleInfo::kCourseFieldNumber;
const int GpsSimpleInfo::kStatusFieldNumber;
const int GpsSimpleInfo::kTotalDistanceFieldNumber;
const int GpsSimpleInfo::kOilFieldNumber;
const int GpsSimpleInfo::kRemainPercentOilFieldNumber;
const int GpsSimpleInfo::kCanspeedFieldNumber;
const int GpsSimpleInfo::kRemainDistanceFieldNumber;
#endif  // !_MSC_VER

GpsSimpleInfo::GpsSimpleInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GpsSimpleInfo)
}

void GpsSimpleInfo::InitAsDefaultInstance() {
}

GpsSimpleInfo::GpsSimpleInfo(const GpsSimpleInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GpsSimpleInfo)
}

void GpsSimpleInfo::SharedCtor() {
  _cached_size_ = 0;
  gpstime_ = GOOGLE_LONGLONG(0);
  loc_ = false;
  lat_ = 0;
  lng_ = 0;
  speed_ = 0;
  course_ = 0;
  totaldistance_ = 0;
  oil_ = 0;
  remainpercentoil_ = 0;
  canspeed_ = 0;
  remaindistance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsSimpleInfo::~GpsSimpleInfo() {
  // @@protoc_insertion_point(destructor:gboss.GpsSimpleInfo)
  SharedDtor();
}

void GpsSimpleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GpsSimpleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GpsSimpleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsSimpleInfo_descriptor_;
}

const GpsSimpleInfo& GpsSimpleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

GpsSimpleInfo* GpsSimpleInfo::default_instance_ = NULL;

GpsSimpleInfo* GpsSimpleInfo::New() const {
  return new GpsSimpleInfo;
}

void GpsSimpleInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GpsSimpleInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(gpstime_, speed_);
    ZR_(course_, totaldistance_);
  }
  ZR_(oil_, remaindistance_);

#undef OFFSET_OF_FIELD_
#undef ZR_

  status_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsSimpleInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GpsSimpleInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gpsTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gpstime_)));
          set_has_gpstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_loc;
        break;
      }

      // required bool loc = 2;
      case 2: {
        if (tag == 16) {
         parse_loc:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loc_)));
          set_has_loc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lat;
        break;
      }

      // required int32 lat = 3;
      case 3: {
        if (tag == 24) {
         parse_lat:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lng;
        break;
      }

      // required int32 lng = 4;
      case 4: {
        if (tag == 32) {
         parse_lng:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }

      // required int32 speed = 5;
      case 5: {
        if (tag == 40) {
         parse_speed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_course;
        break;
      }

      // required int32 course = 6;
      case 6: {
        if (tag == 48) {
         parse_course:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &course_)));
          set_has_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // repeated int32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_status())));
        } else if (tag == 58) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        if (input->ExpectTag(64)) goto parse_totalDistance;
        break;
      }

      // optional int32 totalDistance = 8;
      case 8: {
        if (tag == 64) {
         parse_totalDistance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldistance_)));
          set_has_totaldistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_oil;
        break;
      }

      // optional int32 oil = 9;
      case 9: {
        if (tag == 72) {
         parse_oil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oil_)));
          set_has_oil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_remainPercentOil;
        break;
      }

      // optional int32 remainPercentOil = 10;
      case 10: {
        if (tag == 80) {
         parse_remainPercentOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remainpercentoil_)));
          set_has_remainpercentoil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_canspeed;
        break;
      }

      // optional int32 canspeed = 11;
      case 11: {
        if (tag == 88) {
         parse_canspeed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canspeed_)));
          set_has_canspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_remainDistance;
        break;
      }

      // optional int32 remainDistance = 12;
      case 12: {
        if (tag == 96) {
         parse_remainDistance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &remaindistance_)));
          set_has_remaindistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GpsSimpleInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GpsSimpleInfo)
  return false;
#undef DO_
}

void GpsSimpleInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GpsSimpleInfo)
  // required int64 gpsTime = 1;
  if (has_gpstime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(1, this->gpstime(), output);
  }

  // required bool loc = 2;
  if (has_loc()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->loc(), output);
  }

  // required int32 lat = 3;
  if (has_lat()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->lat(), output);
  }

  // required int32 lng = 4;
  if (has_lng()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->lng(), output);
  }

  // required int32 speed = 5;
  if (has_speed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->speed(), output);
  }

  // required int32 course = 6;
  if (has_course()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->course(), output);
  }

  // repeated int32 status = 7;
  for (int i = 0; i < this->status_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->status(i), output);
  }

  // optional int32 totalDistance = 8;
  if (has_totaldistance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->totaldistance(), output);
  }

  // optional int32 oil = 9;
  if (has_oil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->oil(), output);
  }

  // optional int32 remainPercentOil = 10;
  if (has_remainpercentoil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->remainpercentoil(), output);
  }

  // optional int32 canspeed = 11;
  if (has_canspeed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(11, this->canspeed(), output);
  }

  // optional int32 remainDistance = 12;
  if (has_remaindistance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(12, this->remaindistance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GpsSimpleInfo)
}

::google_public::protobuf::uint8* GpsSimpleInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GpsSimpleInfo)
  // required int64 gpsTime = 1;
  if (has_gpstime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gpstime(), target);
  }

  // required bool loc = 2;
  if (has_loc()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->loc(), target);
  }

  // required int32 lat = 3;
  if (has_lat()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lat(), target);
  }

  // required int32 lng = 4;
  if (has_lng()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lng(), target);
  }

  // required int32 speed = 5;
  if (has_speed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speed(), target);
  }

  // required int32 course = 6;
  if (has_course()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->course(), target);
  }

  // repeated int32 status = 7;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->status(i), target);
  }

  // optional int32 totalDistance = 8;
  if (has_totaldistance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totaldistance(), target);
  }

  // optional int32 oil = 9;
  if (has_oil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->oil(), target);
  }

  // optional int32 remainPercentOil = 10;
  if (has_remainpercentoil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->remainpercentoil(), target);
  }

  // optional int32 canspeed = 11;
  if (has_canspeed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->canspeed(), target);
  }

  // optional int32 remainDistance = 12;
  if (has_remaindistance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->remaindistance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GpsSimpleInfo)
  return target;
}

int GpsSimpleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gpsTime = 1;
    if (has_gpstime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->gpstime());
    }

    // required bool loc = 2;
    if (has_loc()) {
      total_size += 1 + 1;
    }

    // required int32 lat = 3;
    if (has_lat()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lat());
    }

    // required int32 lng = 4;
    if (has_lng()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lng());
    }

    // required int32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // required int32 course = 6;
    if (has_course()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->course());
    }

    // optional int32 totalDistance = 8;
    if (has_totaldistance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldistance());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 oil = 9;
    if (has_oil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->oil());
    }

    // optional int32 remainPercentOil = 10;
    if (has_remainpercentoil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->remainpercentoil());
    }

    // optional int32 canspeed = 11;
    if (has_canspeed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->canspeed());
    }

    // optional int32 remainDistance = 12;
    if (has_remaindistance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->remaindistance());
    }

  }
  // repeated int32 status = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->status_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->status(i));
    }
    total_size += 1 * this->status_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsSimpleInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsSimpleInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GpsSimpleInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsSimpleInfo::MergeFrom(const GpsSimpleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpstime()) {
      set_gpstime(from.gpstime());
    }
    if (from.has_loc()) {
      set_loc(from.loc());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_course()) {
      set_course(from.course());
    }
    if (from.has_totaldistance()) {
      set_totaldistance(from.totaldistance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_oil()) {
      set_oil(from.oil());
    }
    if (from.has_remainpercentoil()) {
      set_remainpercentoil(from.remainpercentoil());
    }
    if (from.has_canspeed()) {
      set_canspeed(from.canspeed());
    }
    if (from.has_remaindistance()) {
      set_remaindistance(from.remaindistance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsSimpleInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsSimpleInfo::CopyFrom(const GpsSimpleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsSimpleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void GpsSimpleInfo::Swap(GpsSimpleInfo* other) {
  if (other != this) {
    std::swap(gpstime_, other->gpstime_);
    std::swap(loc_, other->loc_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(speed_, other->speed_);
    std::swap(course_, other->course_);
    status_.Swap(&other->status_);
    std::swap(totaldistance_, other->totaldistance_);
    std::swap(oil_, other->oil_);
    std::swap(remainpercentoil_, other->remainpercentoil_);
    std::swap(canspeed_, other->canspeed_);
    std::swap(remaindistance_, other->remaindistance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GpsSimpleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GpsSimpleInfo_descriptor_;
  metadata.reflection = GpsSimpleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseStationInfo::kMccFieldNumber;
const int BaseStationInfo::kMncFieldNumber;
const int BaseStationInfo::kLacFieldNumber;
const int BaseStationInfo::kCidFieldNumber;
const int BaseStationInfo::kBsssFieldNumber;
#endif  // !_MSC_VER

BaseStationInfo::BaseStationInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.BaseStationInfo)
}

void BaseStationInfo::InitAsDefaultInstance() {
}

BaseStationInfo::BaseStationInfo(const BaseStationInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.BaseStationInfo)
}

void BaseStationInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  mcc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  mnc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  lac_ = 0;
  cid_ = 0;
  bsss_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseStationInfo::~BaseStationInfo() {
  // @@protoc_insertion_point(destructor:gboss.BaseStationInfo)
  SharedDtor();
}

void BaseStationInfo::SharedDtor() {
  if (mcc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mcc_;
  }
  if (mnc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete mnc_;
  }
  if (this != default_instance_) {
  }
}

void BaseStationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* BaseStationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseStationInfo_descriptor_;
}

const BaseStationInfo& BaseStationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

BaseStationInfo* BaseStationInfo::default_instance_ = NULL;

BaseStationInfo* BaseStationInfo::New() const {
  return new BaseStationInfo;
}

void BaseStationInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BaseStationInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(lac_, bsss_);
    if (has_mcc()) {
      if (mcc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mcc_->clear();
      }
    }
    if (has_mnc()) {
      if (mnc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        mnc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseStationInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.BaseStationInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string mcc = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mcc()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mcc().data(), this->mcc().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "mcc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_mnc;
        break;
      }

      // required string mnc = 2;
      case 2: {
        if (tag == 18) {
         parse_mnc:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mnc()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->mnc().data(), this->mnc().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "mnc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lac;
        break;
      }

      // required int32 lac = 3;
      case 3: {
        if (tag == 24) {
         parse_lac:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lac_)));
          set_has_lac();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_cid;
        break;
      }

      // required int32 cid = 4;
      case 4: {
        if (tag == 32) {
         parse_cid:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bsss;
        break;
      }

      // optional int32 bsss = 5;
      case 5: {
        if (tag == 40) {
         parse_bsss:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bsss_)));
          set_has_bsss();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.BaseStationInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.BaseStationInfo)
  return false;
#undef DO_
}

void BaseStationInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.BaseStationInfo)
  // required string mcc = 1;
  if (has_mcc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mcc().data(), this->mcc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "mcc");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mcc(), output);
  }

  // required string mnc = 2;
  if (has_mnc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mnc().data(), this->mnc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "mnc");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mnc(), output);
  }

  // required int32 lac = 3;
  if (has_lac()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->lac(), output);
  }

  // required int32 cid = 4;
  if (has_cid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->cid(), output);
  }

  // optional int32 bsss = 5;
  if (has_bsss()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->bsss(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.BaseStationInfo)
}

::google_public::protobuf::uint8* BaseStationInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.BaseStationInfo)
  // required string mcc = 1;
  if (has_mcc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mcc().data(), this->mcc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "mcc");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->mcc(), target);
  }

  // required string mnc = 2;
  if (has_mnc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->mnc().data(), this->mnc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "mnc");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->mnc(), target);
  }

  // required int32 lac = 3;
  if (has_lac()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lac(), target);
  }

  // required int32 cid = 4;
  if (has_cid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cid(), target);
  }

  // optional int32 bsss = 5;
  if (has_bsss()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bsss(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.BaseStationInfo)
  return target;
}

int BaseStationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string mcc = 1;
    if (has_mcc()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->mcc());
    }

    // required string mnc = 2;
    if (has_mnc()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->mnc());
    }

    // required int32 lac = 3;
    if (has_lac()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lac());
    }

    // required int32 cid = 4;
    if (has_cid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->cid());
    }

    // optional int32 bsss = 5;
    if (has_bsss()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->bsss());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseStationInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseStationInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const BaseStationInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseStationInfo::MergeFrom(const BaseStationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mcc()) {
      set_mcc(from.mcc());
    }
    if (from.has_mnc()) {
      set_mnc(from.mnc());
    }
    if (from.has_lac()) {
      set_lac(from.lac());
    }
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_bsss()) {
      set_bsss(from.bsss());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseStationInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseStationInfo::CopyFrom(const BaseStationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BaseStationInfo::Swap(BaseStationInfo* other) {
  if (other != this) {
    std::swap(mcc_, other->mcc_);
    std::swap(mnc_, other->mnc_);
    std::swap(lac_, other->lac_);
    std::swap(cid_, other->cid_);
    std::swap(bsss_, other->bsss_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata BaseStationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = BaseStationInfo_descriptor_;
  metadata.reflection = BaseStationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseStationAddress::kLatFieldNumber;
const int BaseStationAddress::kLngFieldNumber;
const int BaseStationAddress::kPrecisionFieldNumber;
const int BaseStationAddress::kAddressDescFieldNumber;
#endif  // !_MSC_VER

BaseStationAddress::BaseStationAddress()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.BaseStationAddress)
}

void BaseStationAddress::InitAsDefaultInstance() {
}

BaseStationAddress::BaseStationAddress(const BaseStationAddress& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.BaseStationAddress)
}

void BaseStationAddress::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  lat_ = 0;
  lng_ = 0;
  precision_ = 0;
  addressdesc_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseStationAddress::~BaseStationAddress() {
  // @@protoc_insertion_point(destructor:gboss.BaseStationAddress)
  SharedDtor();
}

void BaseStationAddress::SharedDtor() {
  if (addressdesc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete addressdesc_;
  }
  if (this != default_instance_) {
  }
}

void BaseStationAddress::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* BaseStationAddress::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseStationAddress_descriptor_;
}

const BaseStationAddress& BaseStationAddress::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

BaseStationAddress* BaseStationAddress::default_instance_ = NULL;

BaseStationAddress* BaseStationAddress::New() const {
  return new BaseStationAddress;
}

void BaseStationAddress::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<BaseStationAddress*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(lat_, lng_);
    precision_ = 0;
    if (has_addressdesc()) {
      if (addressdesc_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        addressdesc_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseStationAddress::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.BaseStationAddress)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lat = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_lng;
        break;
      }

      // required int32 lng = 2;
      case 2: {
        if (tag == 16) {
         parse_lng:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_precision;
        break;
      }

      // optional int32 precision = 3;
      case 3: {
        if (tag == 24) {
         parse_precision:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_addressDesc;
        break;
      }

      // optional string addressDesc = 4;
      case 4: {
        if (tag == 34) {
         parse_addressDesc:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_addressdesc()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->addressdesc().data(), this->addressdesc().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "addressdesc");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.BaseStationAddress)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.BaseStationAddress)
  return false;
#undef DO_
}

void BaseStationAddress::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.BaseStationAddress)
  // required int32 lat = 1;
  if (has_lat()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->lat(), output);
  }

  // required int32 lng = 2;
  if (has_lng()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->lng(), output);
  }

  // optional int32 precision = 3;
  if (has_precision()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->precision(), output);
  }

  // optional string addressDesc = 4;
  if (has_addressdesc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addressdesc().data(), this->addressdesc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "addressdesc");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->addressdesc(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.BaseStationAddress)
}

::google_public::protobuf::uint8* BaseStationAddress::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.BaseStationAddress)
  // required int32 lat = 1;
  if (has_lat()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lat(), target);
  }

  // required int32 lng = 2;
  if (has_lng()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lng(), target);
  }

  // optional int32 precision = 3;
  if (has_precision()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->precision(), target);
  }

  // optional string addressDesc = 4;
  if (has_addressdesc()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->addressdesc().data(), this->addressdesc().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "addressdesc");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->addressdesc(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.BaseStationAddress)
  return target;
}

int BaseStationAddress::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lat = 1;
    if (has_lat()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lat());
    }

    // required int32 lng = 2;
    if (has_lng()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lng());
    }

    // optional int32 precision = 3;
    if (has_precision()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // optional string addressDesc = 4;
    if (has_addressdesc()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->addressdesc());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseStationAddress::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseStationAddress* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const BaseStationAddress*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseStationAddress::MergeFrom(const BaseStationAddress& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_addressdesc()) {
      set_addressdesc(from.addressdesc());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseStationAddress::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseStationAddress::CopyFrom(const BaseStationAddress& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseStationAddress::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BaseStationAddress::Swap(BaseStationAddress* other) {
  if (other != this) {
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(precision_, other->precision_);
    std::swap(addressdesc_, other->addressdesc_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata BaseStationAddress::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = BaseStationAddress_descriptor_;
  metadata.reflection = BaseStationAddress_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int YDWInfo::kTemperatureFieldNumber;
const int YDWInfo::kDrivingTimeFieldNumber;
const int YDWInfo::kTotalDistanceFieldNumber;
const int YDWInfo::kUnitPowerFieldNumber;
const int YDWInfo::kBluetoothPowerFieldNumber;
#endif  // !_MSC_VER

YDWInfo::YDWInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.YDWInfo)
}

void YDWInfo::InitAsDefaultInstance() {
}

YDWInfo::YDWInfo(const YDWInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.YDWInfo)
}

void YDWInfo::SharedCtor() {
  _cached_size_ = 0;
  temperature_ = 0;
  drivingtime_ = 0;
  totaldistance_ = 0;
  unitpower_ = 0;
  bluetoothpower_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

YDWInfo::~YDWInfo() {
  // @@protoc_insertion_point(destructor:gboss.YDWInfo)
  SharedDtor();
}

void YDWInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void YDWInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* YDWInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return YDWInfo_descriptor_;
}

const YDWInfo& YDWInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

YDWInfo* YDWInfo::default_instance_ = NULL;

YDWInfo* YDWInfo::New() const {
  return new YDWInfo;
}

void YDWInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<YDWInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 31) {
    ZR_(temperature_, bluetoothpower_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool YDWInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.YDWInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 temperature = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature_)));
          set_has_temperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_drivingTime;
        break;
      }

      // required int32 drivingTime = 2;
      case 2: {
        if (tag == 16) {
         parse_drivingTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &drivingtime_)));
          set_has_drivingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_totalDistance;
        break;
      }

      // required int32 totalDistance = 3;
      case 3: {
        if (tag == 24) {
         parse_totalDistance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldistance_)));
          set_has_totaldistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_unitPower;
        break;
      }

      // required int32 unitPower = 4;
      case 4: {
        if (tag == 32) {
         parse_unitPower:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unitpower_)));
          set_has_unitpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_bluetoothPower;
        break;
      }

      // required int32 bluetoothPower = 5;
      case 5: {
        if (tag == 40) {
         parse_bluetoothPower:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluetoothpower_)));
          set_has_bluetoothpower();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.YDWInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.YDWInfo)
  return false;
#undef DO_
}

void YDWInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.YDWInfo)
  // required int32 temperature = 1;
  if (has_temperature()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->temperature(), output);
  }

  // required int32 drivingTime = 2;
  if (has_drivingtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->drivingtime(), output);
  }

  // required int32 totalDistance = 3;
  if (has_totaldistance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->totaldistance(), output);
  }

  // required int32 unitPower = 4;
  if (has_unitpower()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->unitpower(), output);
  }

  // required int32 bluetoothPower = 5;
  if (has_bluetoothpower()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->bluetoothpower(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.YDWInfo)
}

::google_public::protobuf::uint8* YDWInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.YDWInfo)
  // required int32 temperature = 1;
  if (has_temperature()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->temperature(), target);
  }

  // required int32 drivingTime = 2;
  if (has_drivingtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->drivingtime(), target);
  }

  // required int32 totalDistance = 3;
  if (has_totaldistance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totaldistance(), target);
  }

  // required int32 unitPower = 4;
  if (has_unitpower()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unitpower(), target);
  }

  // required int32 bluetoothPower = 5;
  if (has_bluetoothpower()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bluetoothpower(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.YDWInfo)
  return target;
}

int YDWInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 temperature = 1;
    if (has_temperature()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->temperature());
    }

    // required int32 drivingTime = 2;
    if (has_drivingtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->drivingtime());
    }

    // required int32 totalDistance = 3;
    if (has_totaldistance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldistance());
    }

    // required int32 unitPower = 4;
    if (has_unitpower()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->unitpower());
    }

    // required int32 bluetoothPower = 5;
    if (has_bluetoothpower()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->bluetoothpower());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void YDWInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const YDWInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const YDWInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void YDWInfo::MergeFrom(const YDWInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_temperature()) {
      set_temperature(from.temperature());
    }
    if (from.has_drivingtime()) {
      set_drivingtime(from.drivingtime());
    }
    if (from.has_totaldistance()) {
      set_totaldistance(from.totaldistance());
    }
    if (from.has_unitpower()) {
      set_unitpower(from.unitpower());
    }
    if (from.has_bluetoothpower()) {
      set_bluetoothpower(from.bluetoothpower());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void YDWInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void YDWInfo::CopyFrom(const YDWInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool YDWInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void YDWInfo::Swap(YDWInfo* other) {
  if (other != this) {
    std::swap(temperature_, other->temperature_);
    std::swap(drivingtime_, other->drivingtime_);
    std::swap(totaldistance_, other->totaldistance_);
    std::swap(unitpower_, other->unitpower_);
    std::swap(bluetoothpower_, other->bluetoothpower_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata YDWInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = YDWInfo_descriptor_;
  metadata.reflection = YDWInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeLostInfo::kAbsFieldNumber;
const int NodeLostInfo::kEspFieldNumber;
const int NodeLostInfo::kEmsFieldNumber;
const int NodeLostInfo::kPepsFieldNumber;
const int NodeLostInfo::kTcuFieldNumber;
const int NodeLostInfo::kBcmFieldNumber;
const int NodeLostInfo::kIcmFieldNumber;
#endif  // !_MSC_VER

NodeLostInfo::NodeLostInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.NodeLostInfo)
}

void NodeLostInfo::InitAsDefaultInstance() {
}

NodeLostInfo::NodeLostInfo(const NodeLostInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.NodeLostInfo)
}

void NodeLostInfo::SharedCtor() {
  _cached_size_ = 0;
  abs_ = 0;
  esp_ = 0;
  ems_ = 0;
  peps_ = 0;
  tcu_ = 0;
  bcm_ = 0;
  icm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeLostInfo::~NodeLostInfo() {
  // @@protoc_insertion_point(destructor:gboss.NodeLostInfo)
  SharedDtor();
}

void NodeLostInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeLostInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* NodeLostInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeLostInfo_descriptor_;
}

const NodeLostInfo& NodeLostInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

NodeLostInfo* NodeLostInfo::default_instance_ = NULL;

NodeLostInfo* NodeLostInfo::New() const {
  return new NodeLostInfo;
}

void NodeLostInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NodeLostInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(abs_, icm_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeLostInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.NodeLostInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 abs = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_)));
          set_has_abs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_esp;
        break;
      }

      // optional int32 esp = 2;
      case 2: {
        if (tag == 16) {
         parse_esp:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_)));
          set_has_esp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_ems;
        break;
      }

      // optional int32 ems = 3;
      case 3: {
        if (tag == 24) {
         parse_ems:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ems_)));
          set_has_ems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_peps;
        break;
      }

      // optional int32 peps = 4;
      case 4: {
        if (tag == 32) {
         parse_peps:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peps_)));
          set_has_peps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_tcu;
        break;
      }

      // optional int32 tcu = 5;
      case 5: {
        if (tag == 40) {
         parse_tcu:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcu_)));
          set_has_tcu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_bcm;
        break;
      }

      // optional int32 bcm = 6;
      case 6: {
        if (tag == 48) {
         parse_bcm:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcm_)));
          set_has_bcm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_icm;
        break;
      }

      // optional int32 icm = 7;
      case 7: {
        if (tag == 56) {
         parse_icm:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icm_)));
          set_has_icm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.NodeLostInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.NodeLostInfo)
  return false;
#undef DO_
}

void NodeLostInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.NodeLostInfo)
  // optional int32 abs = 1;
  if (has_abs()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->abs(), output);
  }

  // optional int32 esp = 2;
  if (has_esp()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->esp(), output);
  }

  // optional int32 ems = 3;
  if (has_ems()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->ems(), output);
  }

  // optional int32 peps = 4;
  if (has_peps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->peps(), output);
  }

  // optional int32 tcu = 5;
  if (has_tcu()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->tcu(), output);
  }

  // optional int32 bcm = 6;
  if (has_bcm()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->bcm(), output);
  }

  // optional int32 icm = 7;
  if (has_icm()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->icm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.NodeLostInfo)
}

::google_public::protobuf::uint8* NodeLostInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.NodeLostInfo)
  // optional int32 abs = 1;
  if (has_abs()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->abs(), target);
  }

  // optional int32 esp = 2;
  if (has_esp()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->esp(), target);
  }

  // optional int32 ems = 3;
  if (has_ems()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ems(), target);
  }

  // optional int32 peps = 4;
  if (has_peps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->peps(), target);
  }

  // optional int32 tcu = 5;
  if (has_tcu()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tcu(), target);
  }

  // optional int32 bcm = 6;
  if (has_bcm()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bcm(), target);
  }

  // optional int32 icm = 7;
  if (has_icm()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->icm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.NodeLostInfo)
  return target;
}

int NodeLostInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 abs = 1;
    if (has_abs()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->abs());
    }

    // optional int32 esp = 2;
    if (has_esp()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->esp());
    }

    // optional int32 ems = 3;
    if (has_ems()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->ems());
    }

    // optional int32 peps = 4;
    if (has_peps()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->peps());
    }

    // optional int32 tcu = 5;
    if (has_tcu()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tcu());
    }

    // optional int32 bcm = 6;
    if (has_bcm()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->bcm());
    }

    // optional int32 icm = 7;
    if (has_icm()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->icm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeLostInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeLostInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const NodeLostInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeLostInfo::MergeFrom(const NodeLostInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_abs()) {
      set_abs(from.abs());
    }
    if (from.has_esp()) {
      set_esp(from.esp());
    }
    if (from.has_ems()) {
      set_ems(from.ems());
    }
    if (from.has_peps()) {
      set_peps(from.peps());
    }
    if (from.has_tcu()) {
      set_tcu(from.tcu());
    }
    if (from.has_bcm()) {
      set_bcm(from.bcm());
    }
    if (from.has_icm()) {
      set_icm(from.icm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeLostInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeLostInfo::CopyFrom(const NodeLostInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeLostInfo::IsInitialized() const {

  return true;
}

void NodeLostInfo::Swap(NodeLostInfo* other) {
  if (other != this) {
    std::swap(abs_, other->abs_);
    std::swap(esp_, other->esp_);
    std::swap(ems_, other->ems_);
    std::swap(peps_, other->peps_);
    std::swap(tcu_, other->tcu_);
    std::swap(bcm_, other->bcm_);
    std::swap(icm_, other->icm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata NodeLostInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = NodeLostInfo_descriptor_;
  metadata.reflection = NodeLostInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NodeFaultInfo::kEbdFieldNumber;
const int NodeFaultInfo::kAbsFieldNumber;
const int NodeFaultInfo::kEspFieldNumber;
const int NodeFaultInfo::kSvsFieldNumber;
const int NodeFaultInfo::kMilFieldNumber;
const int NodeFaultInfo::kTcuFieldNumber;
const int NodeFaultInfo::kPepsFieldNumber;
const int NodeFaultInfo::kTboxFieldNumber;
#endif  // !_MSC_VER

NodeFaultInfo::NodeFaultInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.NodeFaultInfo)
}

void NodeFaultInfo::InitAsDefaultInstance() {
}

NodeFaultInfo::NodeFaultInfo(const NodeFaultInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.NodeFaultInfo)
}

void NodeFaultInfo::SharedCtor() {
  _cached_size_ = 0;
  ebd_ = 0;
  abs_ = 0;
  esp_ = 0;
  svs_ = 0;
  mil_ = 0;
  tcu_ = 0;
  peps_ = 0;
  tbox_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeFaultInfo::~NodeFaultInfo() {
  // @@protoc_insertion_point(destructor:gboss.NodeFaultInfo)
  SharedDtor();
}

void NodeFaultInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NodeFaultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* NodeFaultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeFaultInfo_descriptor_;
}

const NodeFaultInfo& NodeFaultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

NodeFaultInfo* NodeFaultInfo::default_instance_ = NULL;

NodeFaultInfo* NodeFaultInfo::New() const {
  return new NodeFaultInfo;
}

void NodeFaultInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<NodeFaultInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(ebd_, tbox_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeFaultInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.NodeFaultInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ebd = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ebd_)));
          set_has_ebd();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_abs;
        break;
      }

      // optional int32 abs = 2;
      case 2: {
        if (tag == 16) {
         parse_abs:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_)));
          set_has_abs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_esp;
        break;
      }

      // optional int32 esp = 3;
      case 3: {
        if (tag == 24) {
         parse_esp:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_)));
          set_has_esp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_svs;
        break;
      }

      // optional int32 svs = 4;
      case 4: {
        if (tag == 32) {
         parse_svs:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &svs_)));
          set_has_svs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_mil;
        break;
      }

      // optional int32 mil = 5;
      case 5: {
        if (tag == 40) {
         parse_mil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mil_)));
          set_has_mil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_tcu;
        break;
      }

      // optional int32 tcu = 6;
      case 6: {
        if (tag == 48) {
         parse_tcu:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcu_)));
          set_has_tcu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_peps;
        break;
      }

      // optional int32 peps = 7;
      case 7: {
        if (tag == 56) {
         parse_peps:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peps_)));
          set_has_peps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_tbox;
        break;
      }

      // optional int32 tbox = 8;
      case 8: {
        if (tag == 64) {
         parse_tbox:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tbox_)));
          set_has_tbox();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.NodeFaultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.NodeFaultInfo)
  return false;
#undef DO_
}

void NodeFaultInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.NodeFaultInfo)
  // optional int32 ebd = 1;
  if (has_ebd()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->ebd(), output);
  }

  // optional int32 abs = 2;
  if (has_abs()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->abs(), output);
  }

  // optional int32 esp = 3;
  if (has_esp()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->esp(), output);
  }

  // optional int32 svs = 4;
  if (has_svs()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->svs(), output);
  }

  // optional int32 mil = 5;
  if (has_mil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->mil(), output);
  }

  // optional int32 tcu = 6;
  if (has_tcu()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->tcu(), output);
  }

  // optional int32 peps = 7;
  if (has_peps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->peps(), output);
  }

  // optional int32 tbox = 8;
  if (has_tbox()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->tbox(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.NodeFaultInfo)
}

::google_public::protobuf::uint8* NodeFaultInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.NodeFaultInfo)
  // optional int32 ebd = 1;
  if (has_ebd()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ebd(), target);
  }

  // optional int32 abs = 2;
  if (has_abs()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->abs(), target);
  }

  // optional int32 esp = 3;
  if (has_esp()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->esp(), target);
  }

  // optional int32 svs = 4;
  if (has_svs()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->svs(), target);
  }

  // optional int32 mil = 5;
  if (has_mil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->mil(), target);
  }

  // optional int32 tcu = 6;
  if (has_tcu()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->tcu(), target);
  }

  // optional int32 peps = 7;
  if (has_peps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->peps(), target);
  }

  // optional int32 tbox = 8;
  if (has_tbox()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->tbox(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.NodeFaultInfo)
  return target;
}

int NodeFaultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ebd = 1;
    if (has_ebd()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->ebd());
    }

    // optional int32 abs = 2;
    if (has_abs()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->abs());
    }

    // optional int32 esp = 3;
    if (has_esp()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->esp());
    }

    // optional int32 svs = 4;
    if (has_svs()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->svs());
    }

    // optional int32 mil = 5;
    if (has_mil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->mil());
    }

    // optional int32 tcu = 6;
    if (has_tcu()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tcu());
    }

    // optional int32 peps = 7;
    if (has_peps()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->peps());
    }

    // optional int32 tbox = 8;
    if (has_tbox()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tbox());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeFaultInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeFaultInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const NodeFaultInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeFaultInfo::MergeFrom(const NodeFaultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ebd()) {
      set_ebd(from.ebd());
    }
    if (from.has_abs()) {
      set_abs(from.abs());
    }
    if (from.has_esp()) {
      set_esp(from.esp());
    }
    if (from.has_svs()) {
      set_svs(from.svs());
    }
    if (from.has_mil()) {
      set_mil(from.mil());
    }
    if (from.has_tcu()) {
      set_tcu(from.tcu());
    }
    if (from.has_peps()) {
      set_peps(from.peps());
    }
    if (from.has_tbox()) {
      set_tbox(from.tbox());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeFaultInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeFaultInfo::CopyFrom(const NodeFaultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeFaultInfo::IsInitialized() const {

  return true;
}

void NodeFaultInfo::Swap(NodeFaultInfo* other) {
  if (other != this) {
    std::swap(ebd_, other->ebd_);
    std::swap(abs_, other->abs_);
    std::swap(esp_, other->esp_);
    std::swap(svs_, other->svs_);
    std::swap(mil_, other->mil_);
    std::swap(tcu_, other->tcu_);
    std::swap(peps_, other->peps_);
    std::swap(tbox_, other->tbox_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata NodeFaultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = NodeFaultInfo_descriptor_;
  metadata.reflection = NodeFaultInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaultLightStatus::kNodeLostInfoFieldNumber;
const int FaultLightStatus::kNodeFaultInfoFieldNumber;
#endif  // !_MSC_VER

FaultLightStatus::FaultLightStatus()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.FaultLightStatus)
}

void FaultLightStatus::InitAsDefaultInstance() {
  nodelostinfo_ = const_cast< ::gboss::NodeLostInfo*>(&::gboss::NodeLostInfo::default_instance());
  nodefaultinfo_ = const_cast< ::gboss::NodeFaultInfo*>(&::gboss::NodeFaultInfo::default_instance());
}

FaultLightStatus::FaultLightStatus(const FaultLightStatus& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.FaultLightStatus)
}

void FaultLightStatus::SharedCtor() {
  _cached_size_ = 0;
  nodelostinfo_ = NULL;
  nodefaultinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaultLightStatus::~FaultLightStatus() {
  // @@protoc_insertion_point(destructor:gboss.FaultLightStatus)
  SharedDtor();
}

void FaultLightStatus::SharedDtor() {
  if (this != default_instance_) {
    delete nodelostinfo_;
    delete nodefaultinfo_;
  }
}

void FaultLightStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FaultLightStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultLightStatus_descriptor_;
}

const FaultLightStatus& FaultLightStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

FaultLightStatus* FaultLightStatus::default_instance_ = NULL;

FaultLightStatus* FaultLightStatus::New() const {
  return new FaultLightStatus;
}

void FaultLightStatus::Clear() {
  if (_has_bits_[0 / 32] & 3) {
    if (has_nodelostinfo()) {
      if (nodelostinfo_ != NULL) nodelostinfo_->::gboss::NodeLostInfo::Clear();
    }
    if (has_nodefaultinfo()) {
      if (nodefaultinfo_ != NULL) nodefaultinfo_->::gboss::NodeFaultInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaultLightStatus::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.FaultLightStatus)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .gboss.NodeLostInfo nodeLostInfo = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodelostinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_nodeFaultInfo;
        break;
      }

      // optional .gboss.NodeFaultInfo nodeFaultInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_nodeFaultInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nodefaultinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.FaultLightStatus)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.FaultLightStatus)
  return false;
#undef DO_
}

void FaultLightStatus::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.FaultLightStatus)
  // optional .gboss.NodeLostInfo nodeLostInfo = 1;
  if (has_nodelostinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->nodelostinfo(), output);
  }

  // optional .gboss.NodeFaultInfo nodeFaultInfo = 2;
  if (has_nodefaultinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nodefaultinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.FaultLightStatus)
}

::google_public::protobuf::uint8* FaultLightStatus::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.FaultLightStatus)
  // optional .gboss.NodeLostInfo nodeLostInfo = 1;
  if (has_nodelostinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->nodelostinfo(), target);
  }

  // optional .gboss.NodeFaultInfo nodeFaultInfo = 2;
  if (has_nodefaultinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nodefaultinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.FaultLightStatus)
  return target;
}

int FaultLightStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .gboss.NodeLostInfo nodeLostInfo = 1;
    if (has_nodelostinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodelostinfo());
    }

    // optional .gboss.NodeFaultInfo nodeFaultInfo = 2;
    if (has_nodefaultinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nodefaultinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultLightStatus::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaultLightStatus* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FaultLightStatus*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaultLightStatus::MergeFrom(const FaultLightStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_nodelostinfo()) {
      mutable_nodelostinfo()->::gboss::NodeLostInfo::MergeFrom(from.nodelostinfo());
    }
    if (from.has_nodefaultinfo()) {
      mutable_nodefaultinfo()->::gboss::NodeFaultInfo::MergeFrom(from.nodefaultinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaultLightStatus::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultLightStatus::CopyFrom(const FaultLightStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultLightStatus::IsInitialized() const {

  return true;
}

void FaultLightStatus::Swap(FaultLightStatus* other) {
  if (other != this) {
    std::swap(nodelostinfo_, other->nodelostinfo_);
    std::swap(nodefaultinfo_, other->nodefaultinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FaultLightStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FaultLightStatus_descriptor_;
  metadata.reflection = FaultLightStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsBaseInfo::kGpsTimeFieldNumber;
const int GpsBaseInfo::kLocFieldNumber;
const int GpsBaseInfo::kLatFieldNumber;
const int GpsBaseInfo::kLngFieldNumber;
const int GpsBaseInfo::kSpeedFieldNumber;
const int GpsBaseInfo::kCourseFieldNumber;
const int GpsBaseInfo::kStatusFieldNumber;
const int GpsBaseInfo::kTotalDistanceFieldNumber;
const int GpsBaseInfo::kOilFieldNumber;
const int GpsBaseInfo::kOilPercentFieldNumber;
const int GpsBaseInfo::kTemperature1FieldNumber;
const int GpsBaseInfo::kTemperature2FieldNumber;
const int GpsBaseInfo::kAppendParamsFieldNumber;
const int GpsBaseInfo::kObdInfoFieldNumber;
const int GpsBaseInfo::kBaseStationsFieldNumber;
const int GpsBaseInfo::kAddressFieldNumber;
const int GpsBaseInfo::kYdwInfoFieldNumber;
const int GpsBaseInfo::kSignalFieldNumber;
const int GpsBaseInfo::kFaultLightStatusFieldNumber;
#endif  // !_MSC_VER

GpsBaseInfo::GpsBaseInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GpsBaseInfo)
}

void GpsBaseInfo::InitAsDefaultInstance() {
  obdinfo_ = const_cast< ::gboss::OBDInfo*>(&::gboss::OBDInfo::default_instance());
  address_ = const_cast< ::gboss::BaseStationAddress*>(&::gboss::BaseStationAddress::default_instance());
  ydwinfo_ = const_cast< ::gboss::YDWInfo*>(&::gboss::YDWInfo::default_instance());
  faultlightstatus_ = const_cast< ::gboss::FaultLightStatus*>(&::gboss::FaultLightStatus::default_instance());
}

GpsBaseInfo::GpsBaseInfo(const GpsBaseInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GpsBaseInfo)
}

void GpsBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  gpstime_ = GOOGLE_LONGLONG(0);
  loc_ = false;
  lat_ = 0;
  lng_ = 0;
  speed_ = 0;
  course_ = 0;
  totaldistance_ = 0;
  oil_ = 0;
  oilpercent_ = 0;
  temperature1_ = 0;
  temperature2_ = 0;
  obdinfo_ = NULL;
  address_ = NULL;
  ydwinfo_ = NULL;
  signal_ = 0;
  faultlightstatus_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsBaseInfo::~GpsBaseInfo() {
  // @@protoc_insertion_point(destructor:gboss.GpsBaseInfo)
  SharedDtor();
}

void GpsBaseInfo::SharedDtor() {
  if (this != default_instance_) {
    delete obdinfo_;
    delete address_;
    delete ydwinfo_;
    delete faultlightstatus_;
  }
}

void GpsBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GpsBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsBaseInfo_descriptor_;
}

const GpsBaseInfo& GpsBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

GpsBaseInfo* GpsBaseInfo::default_instance_ = NULL;

GpsBaseInfo* GpsBaseInfo::New() const {
  return new GpsBaseInfo;
}

void GpsBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GpsBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 191) {
    ZR_(gpstime_, speed_);
    ZR_(course_, totaldistance_);
  }
  if (_has_bits_[8 / 32] & 44800) {
    ZR_(oil_, temperature2_);
    if (has_obdinfo()) {
      if (obdinfo_ != NULL) obdinfo_->::gboss::OBDInfo::Clear();
    }
    if (has_address()) {
      if (address_ != NULL) address_->::gboss::BaseStationAddress::Clear();
    }
  }
  if (_has_bits_[16 / 32] & 458752) {
    if (has_ydwinfo()) {
      if (ydwinfo_ != NULL) ydwinfo_->::gboss::YDWInfo::Clear();
    }
    signal_ = 0;
    if (has_faultlightstatus()) {
      if (faultlightstatus_ != NULL) faultlightstatus_->::gboss::FaultLightStatus::Clear();
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  status_.Clear();
  appendparams_.Clear();
  basestations_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsBaseInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GpsBaseInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 gpsTime = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &gpstime_)));
          set_has_gpstime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_loc;
        break;
      }

      // required bool loc = 2;
      case 2: {
        if (tag == 16) {
         parse_loc:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google_public::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &loc_)));
          set_has_loc();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_lat;
        break;
      }

      // required int32 lat = 3;
      case 3: {
        if (tag == 24) {
         parse_lat:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lat_)));
          set_has_lat();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_lng;
        break;
      }

      // required int32 lng = 4;
      case 4: {
        if (tag == 32) {
         parse_lng:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lng_)));
          set_has_lng();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_speed;
        break;
      }

      // required int32 speed = 5;
      case 5: {
        if (tag == 40) {
         parse_speed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &speed_)));
          set_has_speed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_course;
        break;
      }

      // required int32 course = 6;
      case 6: {
        if (tag == 48) {
         parse_course:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &course_)));
          set_has_course();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // repeated int32 status = 7;
      case 7: {
        if (tag == 56) {
         parse_status:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_status())));
        } else if (tag == 58) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_status())));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_status;
        if (input->ExpectTag(64)) goto parse_totalDistance;
        break;
      }

      // optional int32 totalDistance = 8;
      case 8: {
        if (tag == 64) {
         parse_totalDistance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaldistance_)));
          set_has_totaldistance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_oil;
        break;
      }

      // optional int32 oil = 9;
      case 9: {
        if (tag == 72) {
         parse_oil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oil_)));
          set_has_oil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_oilPercent;
        break;
      }

      // optional int32 oilPercent = 10;
      case 10: {
        if (tag == 80) {
         parse_oilPercent:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &oilpercent_)));
          set_has_oilpercent();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_temperature1;
        break;
      }

      // optional int32 temperature1 = 11;
      case 11: {
        if (tag == 88) {
         parse_temperature1:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature1_)));
          set_has_temperature1();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_temperature2;
        break;
      }

      // optional int32 temperature2 = 12;
      case 12: {
        if (tag == 96) {
         parse_temperature2:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &temperature2_)));
          set_has_temperature2();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_appendParams;
        break;
      }

      // repeated .gboss.MapEntry appendParams = 13;
      case 13: {
        if (tag == 106) {
         parse_appendParams:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appendparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_appendParams;
        if (input->ExpectTag(114)) goto parse_obdInfo;
        break;
      }

      // optional .gboss.OBDInfo obdInfo = 14;
      case 14: {
        if (tag == 114) {
         parse_obdInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_obdinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_baseStations;
        break;
      }

      // repeated .gboss.BaseStationInfo baseStations = 15;
      case 15: {
        if (tag == 122) {
         parse_baseStations:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_basestations()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(122)) goto parse_baseStations;
        if (input->ExpectTag(130)) goto parse_address;
        break;
      }

      // optional .gboss.BaseStationAddress address = 16;
      case 16: {
        if (tag == 130) {
         parse_address:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_address()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(138)) goto parse_ydwInfo;
        break;
      }

      // optional .gboss.YDWInfo ydwInfo = 17;
      case 17: {
        if (tag == 138) {
         parse_ydwInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ydwinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_signal;
        break;
      }

      // optional int32 signal = 18;
      case 18: {
        if (tag == 144) {
         parse_signal:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signal_)));
          set_has_signal();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(154)) goto parse_faultLightStatus;
        break;
      }

      // optional .gboss.FaultLightStatus faultLightStatus = 19;
      case 19: {
        if (tag == 154) {
         parse_faultLightStatus:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_faultlightstatus()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GpsBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GpsBaseInfo)
  return false;
#undef DO_
}

void GpsBaseInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GpsBaseInfo)
  // required int64 gpsTime = 1;
  if (has_gpstime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(1, this->gpstime(), output);
  }

  // required bool loc = 2;
  if (has_loc()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBool(2, this->loc(), output);
  }

  // required int32 lat = 3;
  if (has_lat()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->lat(), output);
  }

  // required int32 lng = 4;
  if (has_lng()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->lng(), output);
  }

  // required int32 speed = 5;
  if (has_speed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->speed(), output);
  }

  // required int32 course = 6;
  if (has_course()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->course(), output);
  }

  // repeated int32 status = 7;
  for (int i = 0; i < this->status_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->status(i), output);
  }

  // optional int32 totalDistance = 8;
  if (has_totaldistance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->totaldistance(), output);
  }

  // optional int32 oil = 9;
  if (has_oil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->oil(), output);
  }

  // optional int32 oilPercent = 10;
  if (has_oilpercent()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->oilpercent(), output);
  }

  // optional int32 temperature1 = 11;
  if (has_temperature1()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(11, this->temperature1(), output);
  }

  // optional int32 temperature2 = 12;
  if (has_temperature2()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(12, this->temperature2(), output);
  }

  // repeated .gboss.MapEntry appendParams = 13;
  for (int i = 0; i < this->appendparams_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->appendparams(i), output);
  }

  // optional .gboss.OBDInfo obdInfo = 14;
  if (has_obdinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->obdinfo(), output);
  }

  // repeated .gboss.BaseStationInfo baseStations = 15;
  for (int i = 0; i < this->basestations_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->basestations(i), output);
  }

  // optional .gboss.BaseStationAddress address = 16;
  if (has_address()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->address(), output);
  }

  // optional .gboss.YDWInfo ydwInfo = 17;
  if (has_ydwinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->ydwinfo(), output);
  }

  // optional int32 signal = 18;
  if (has_signal()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(18, this->signal(), output);
  }

  // optional .gboss.FaultLightStatus faultLightStatus = 19;
  if (has_faultlightstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->faultlightstatus(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GpsBaseInfo)
}

::google_public::protobuf::uint8* GpsBaseInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GpsBaseInfo)
  // required int64 gpsTime = 1;
  if (has_gpstime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->gpstime(), target);
  }

  // required bool loc = 2;
  if (has_loc()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->loc(), target);
  }

  // required int32 lat = 3;
  if (has_lat()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lat(), target);
  }

  // required int32 lng = 4;
  if (has_lng()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lng(), target);
  }

  // required int32 speed = 5;
  if (has_speed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->speed(), target);
  }

  // required int32 course = 6;
  if (has_course()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->course(), target);
  }

  // repeated int32 status = 7;
  for (int i = 0; i < this->status_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->status(i), target);
  }

  // optional int32 totalDistance = 8;
  if (has_totaldistance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->totaldistance(), target);
  }

  // optional int32 oil = 9;
  if (has_oil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->oil(), target);
  }

  // optional int32 oilPercent = 10;
  if (has_oilpercent()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->oilpercent(), target);
  }

  // optional int32 temperature1 = 11;
  if (has_temperature1()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->temperature1(), target);
  }

  // optional int32 temperature2 = 12;
  if (has_temperature2()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->temperature2(), target);
  }

  // repeated .gboss.MapEntry appendParams = 13;
  for (int i = 0; i < this->appendparams_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->appendparams(i), target);
  }

  // optional .gboss.OBDInfo obdInfo = 14;
  if (has_obdinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->obdinfo(), target);
  }

  // repeated .gboss.BaseStationInfo baseStations = 15;
  for (int i = 0; i < this->basestations_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->basestations(i), target);
  }

  // optional .gboss.BaseStationAddress address = 16;
  if (has_address()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->address(), target);
  }

  // optional .gboss.YDWInfo ydwInfo = 17;
  if (has_ydwinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->ydwinfo(), target);
  }

  // optional int32 signal = 18;
  if (has_signal()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->signal(), target);
  }

  // optional .gboss.FaultLightStatus faultLightStatus = 19;
  if (has_faultlightstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->faultlightstatus(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GpsBaseInfo)
  return target;
}

int GpsBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 gpsTime = 1;
    if (has_gpstime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->gpstime());
    }

    // required bool loc = 2;
    if (has_loc()) {
      total_size += 1 + 1;
    }

    // required int32 lat = 3;
    if (has_lat()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lat());
    }

    // required int32 lng = 4;
    if (has_lng()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lng());
    }

    // required int32 speed = 5;
    if (has_speed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->speed());
    }

    // required int32 course = 6;
    if (has_course()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->course());
    }

    // optional int32 totalDistance = 8;
    if (has_totaldistance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totaldistance());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 oil = 9;
    if (has_oil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->oil());
    }

    // optional int32 oilPercent = 10;
    if (has_oilpercent()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->oilpercent());
    }

    // optional int32 temperature1 = 11;
    if (has_temperature1()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->temperature1());
    }

    // optional int32 temperature2 = 12;
    if (has_temperature2()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->temperature2());
    }

    // optional .gboss.OBDInfo obdInfo = 14;
    if (has_obdinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->obdinfo());
    }

    // optional .gboss.BaseStationAddress address = 16;
    if (has_address()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .gboss.YDWInfo ydwInfo = 17;
    if (has_ydwinfo()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ydwinfo());
    }

    // optional int32 signal = 18;
    if (has_signal()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->signal());
    }

    // optional .gboss.FaultLightStatus faultLightStatus = 19;
    if (has_faultlightstatus()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->faultlightstatus());
    }

  }
  // repeated int32 status = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->status_size(); i++) {
      data_size += ::google_public::protobuf::internal::WireFormatLite::
        Int32Size(this->status(i));
    }
    total_size += 1 * this->status_size() + data_size;
  }

  // repeated .gboss.MapEntry appendParams = 13;
  total_size += 1 * this->appendparams_size();
  for (int i = 0; i < this->appendparams_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appendparams(i));
  }

  // repeated .gboss.BaseStationInfo baseStations = 15;
  total_size += 1 * this->basestations_size();
  for (int i = 0; i < this->basestations_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->basestations(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsBaseInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsBaseInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GpsBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsBaseInfo::MergeFrom(const GpsBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  status_.MergeFrom(from.status_);
  appendparams_.MergeFrom(from.appendparams_);
  basestations_.MergeFrom(from.basestations_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_gpstime()) {
      set_gpstime(from.gpstime());
    }
    if (from.has_loc()) {
      set_loc(from.loc());
    }
    if (from.has_lat()) {
      set_lat(from.lat());
    }
    if (from.has_lng()) {
      set_lng(from.lng());
    }
    if (from.has_speed()) {
      set_speed(from.speed());
    }
    if (from.has_course()) {
      set_course(from.course());
    }
    if (from.has_totaldistance()) {
      set_totaldistance(from.totaldistance());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_oil()) {
      set_oil(from.oil());
    }
    if (from.has_oilpercent()) {
      set_oilpercent(from.oilpercent());
    }
    if (from.has_temperature1()) {
      set_temperature1(from.temperature1());
    }
    if (from.has_temperature2()) {
      set_temperature2(from.temperature2());
    }
    if (from.has_obdinfo()) {
      mutable_obdinfo()->::gboss::OBDInfo::MergeFrom(from.obdinfo());
    }
    if (from.has_address()) {
      mutable_address()->::gboss::BaseStationAddress::MergeFrom(from.address());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_ydwinfo()) {
      mutable_ydwinfo()->::gboss::YDWInfo::MergeFrom(from.ydwinfo());
    }
    if (from.has_signal()) {
      set_signal(from.signal());
    }
    if (from.has_faultlightstatus()) {
      mutable_faultlightstatus()->::gboss::FaultLightStatus::MergeFrom(from.faultlightstatus());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsBaseInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsBaseInfo::CopyFrom(const GpsBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  if (!::google_public::protobuf::internal::AllAreInitialized(this->appendparams())) return false;
  if (has_obdinfo()) {
    if (!this->obdinfo().IsInitialized()) return false;
  }
  if (!::google_public::protobuf::internal::AllAreInitialized(this->basestations())) return false;
  if (has_address()) {
    if (!this->address().IsInitialized()) return false;
  }
  if (has_ydwinfo()) {
    if (!this->ydwinfo().IsInitialized()) return false;
  }
  return true;
}

void GpsBaseInfo::Swap(GpsBaseInfo* other) {
  if (other != this) {
    std::swap(gpstime_, other->gpstime_);
    std::swap(loc_, other->loc_);
    std::swap(lat_, other->lat_);
    std::swap(lng_, other->lng_);
    std::swap(speed_, other->speed_);
    std::swap(course_, other->course_);
    status_.Swap(&other->status_);
    std::swap(totaldistance_, other->totaldistance_);
    std::swap(oil_, other->oil_);
    std::swap(oilpercent_, other->oilpercent_);
    std::swap(temperature1_, other->temperature1_);
    std::swap(temperature2_, other->temperature2_);
    appendparams_.Swap(&other->appendparams_);
    std::swap(obdinfo_, other->obdinfo_);
    basestations_.Swap(&other->basestations_);
    std::swap(address_, other->address_);
    std::swap(ydwinfo_, other->ydwinfo_);
    std::swap(signal_, other->signal_);
    std::swap(faultlightstatus_, other->faultlightstatus_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GpsBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GpsBaseInfo_descriptor_;
  metadata.reflection = GpsBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsRoadInfo::kNameFieldNumber;
const int GpsRoadInfo::kLevelFieldNumber;
const int GpsRoadInfo::kDistanceFieldNumber;
const int GpsRoadInfo::kIdFieldNumber;
const int GpsRoadInfo::kLatOnRoadFieldNumber;
const int GpsRoadInfo::kLngOnRoadFieldNumber;
#endif  // !_MSC_VER

GpsRoadInfo::GpsRoadInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GpsRoadInfo)
}

void GpsRoadInfo::InitAsDefaultInstance() {
}

GpsRoadInfo::GpsRoadInfo(const GpsRoadInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GpsRoadInfo)
}

void GpsRoadInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  level_ = 0;
  distance_ = 0;
  id_ = 0;
  latonroad_ = 0;
  lngonroad_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsRoadInfo::~GpsRoadInfo() {
  // @@protoc_insertion_point(destructor:gboss.GpsRoadInfo)
  SharedDtor();
}

void GpsRoadInfo::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GpsRoadInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GpsRoadInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsRoadInfo_descriptor_;
}

const GpsRoadInfo& GpsRoadInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

GpsRoadInfo* GpsRoadInfo::default_instance_ = NULL;

GpsRoadInfo* GpsRoadInfo::New() const {
  return new GpsRoadInfo;
}

void GpsRoadInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GpsRoadInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 63) {
    ZR_(level_, lngonroad_);
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsRoadInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GpsRoadInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // required int32 level = 2;
      case 2: {
        if (tag == 16) {
         parse_level:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_distance;
        break;
      }

      // required int32 distance = 3;
      case 3: {
        if (tag == 24) {
         parse_distance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_latOnRoad;
        break;
      }

      // optional int32 latOnRoad = 5;
      case 5: {
        if (tag == 40) {
         parse_latOnRoad:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &latonroad_)));
          set_has_latonroad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_lngOnRoad;
        break;
      }

      // optional int32 lngOnRoad = 6;
      case 6: {
        if (tag == 48) {
         parse_lngOnRoad:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lngonroad_)));
          set_has_lngonroad();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GpsRoadInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GpsRoadInfo)
  return false;
#undef DO_
}

void GpsRoadInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GpsRoadInfo)
  // required string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 level = 2;
  if (has_level()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // required int32 distance = 3;
  if (has_distance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->distance(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  // optional int32 latOnRoad = 5;
  if (has_latonroad()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->latonroad(), output);
  }

  // optional int32 lngOnRoad = 6;
  if (has_lngonroad()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->lngonroad(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GpsRoadInfo)
}

::google_public::protobuf::uint8* GpsRoadInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GpsRoadInfo)
  // required string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 level = 2;
  if (has_level()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // required int32 distance = 3;
  if (has_distance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->distance(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  // optional int32 latOnRoad = 5;
  if (has_latonroad()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->latonroad(), target);
  }

  // optional int32 lngOnRoad = 6;
  if (has_lngonroad()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lngonroad(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GpsRoadInfo)
  return target;
}

int GpsRoadInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 distance = 3;
    if (has_distance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 latOnRoad = 5;
    if (has_latonroad()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->latonroad());
    }

    // optional int32 lngOnRoad = 6;
    if (has_lngonroad()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->lngonroad());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsRoadInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsRoadInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GpsRoadInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsRoadInfo::MergeFrom(const GpsRoadInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_latonroad()) {
      set_latonroad(from.latonroad());
    }
    if (from.has_lngonroad()) {
      set_lngonroad(from.lngonroad());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsRoadInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsRoadInfo::CopyFrom(const GpsRoadInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsRoadInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GpsRoadInfo::Swap(GpsRoadInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(distance_, other->distance_);
    std::swap(id_, other->id_);
    std::swap(latonroad_, other->latonroad_);
    std::swap(lngonroad_, other->lngonroad_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GpsRoadInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GpsRoadInfo_descriptor_;
  metadata.reflection = GpsRoadInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsPointInfo::kNameFieldNumber;
const int GpsPointInfo::kTypeFieldNumber;
const int GpsPointInfo::kDistanceFieldNumber;
const int GpsPointInfo::kIdFieldNumber;
#endif  // !_MSC_VER

GpsPointInfo::GpsPointInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GpsPointInfo)
}

void GpsPointInfo::InitAsDefaultInstance() {
}

GpsPointInfo::GpsPointInfo(const GpsPointInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GpsPointInfo)
}

void GpsPointInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  distance_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsPointInfo::~GpsPointInfo() {
  // @@protoc_insertion_point(destructor:gboss.GpsPointInfo)
  SharedDtor();
}

void GpsPointInfo::SharedDtor() {
  if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GpsPointInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GpsPointInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsPointInfo_descriptor_;
}

const GpsPointInfo& GpsPointInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

GpsPointInfo* GpsPointInfo::default_instance_ = NULL;

GpsPointInfo* GpsPointInfo::New() const {
  return new GpsPointInfo;
}

void GpsPointInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<GpsPointInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 15) {
    ZR_(type_, id_);
    if (has_name()) {
      if (name_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        name_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsPointInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GpsPointInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->name().data(), this->name().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "name");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (tag == 16) {
         parse_type:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_distance;
        break;
      }

      // required int32 distance = 3;
      case 3: {
        if (tag == 24) {
         parse_distance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_id;
        break;
      }

      // optional int32 id = 4;
      case 4: {
        if (tag == 32) {
         parse_id:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GpsPointInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GpsPointInfo)
  return false;
#undef DO_
}

void GpsPointInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GpsPointInfo)
  // required string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 distance = 3;
  if (has_distance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->distance(), output);
  }

  // optional int32 id = 4;
  if (has_id()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GpsPointInfo)
}

::google_public::protobuf::uint8* GpsPointInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GpsPointInfo)
  // required string name = 1;
  if (has_name()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->name().data(), this->name().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "name");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 distance = 3;
  if (has_distance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->distance(), target);
  }

  // optional int32 id = 4;
  if (has_id()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GpsPointInfo)
  return target;
}

int GpsPointInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 distance = 3;
    if (has_distance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional int32 id = 4;
    if (has_id()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsPointInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsPointInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GpsPointInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsPointInfo::MergeFrom(const GpsPointInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsPointInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsPointInfo::CopyFrom(const GpsPointInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsPointInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GpsPointInfo::Swap(GpsPointInfo* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(distance_, other->distance_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GpsPointInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GpsPointInfo_descriptor_;
  metadata.reflection = GpsPointInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsReferPosition::kProvinceFieldNumber;
const int GpsReferPosition::kCityFieldNumber;
const int GpsReferPosition::kCountyFieldNumber;
const int GpsReferPosition::kRoadsFieldNumber;
const int GpsReferPosition::kPointsFieldNumber;
#endif  // !_MSC_VER

GpsReferPosition::GpsReferPosition()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GpsReferPosition)
}

void GpsReferPosition::InitAsDefaultInstance() {
}

GpsReferPosition::GpsReferPosition(const GpsReferPosition& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GpsReferPosition)
}

void GpsReferPosition::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  province_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  city_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  county_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsReferPosition::~GpsReferPosition() {
  // @@protoc_insertion_point(destructor:gboss.GpsReferPosition)
  SharedDtor();
}

void GpsReferPosition::SharedDtor() {
  if (province_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete province_;
  }
  if (city_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete city_;
  }
  if (county_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete county_;
  }
  if (this != default_instance_) {
  }
}

void GpsReferPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GpsReferPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsReferPosition_descriptor_;
}

const GpsReferPosition& GpsReferPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

GpsReferPosition* GpsReferPosition::default_instance_ = NULL;

GpsReferPosition* GpsReferPosition::New() const {
  return new GpsReferPosition;
}

void GpsReferPosition::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_province()) {
      if (province_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        province_->clear();
      }
    }
    if (has_city()) {
      if (city_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        city_->clear();
      }
    }
    if (has_county()) {
      if (county_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        county_->clear();
      }
    }
  }
  roads_.Clear();
  points_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsReferPosition::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GpsReferPosition)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string province = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_province()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->province().data(), this->province().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "province");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_city;
        break;
      }

      // required string city = 2;
      case 2: {
        if (tag == 18) {
         parse_city:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_city()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->city().data(), this->city().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "city");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_county;
        break;
      }

      // required string county = 3;
      case 3: {
        if (tag == 26) {
         parse_county:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_county()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->county().data(), this->county().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "county");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roads;
        break;
      }

      // repeated .gboss.GpsRoadInfo roads = 4;
      case 4: {
        if (tag == 34) {
         parse_roads:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roads()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_roads;
        if (input->ExpectTag(42)) goto parse_points;
        break;
      }

      // repeated .gboss.GpsPointInfo points = 5;
      case 5: {
        if (tag == 42) {
         parse_points:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_points;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GpsReferPosition)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GpsReferPosition)
  return false;
#undef DO_
}

void GpsReferPosition::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GpsReferPosition)
  // required string province = 1;
  if (has_province()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->province(), output);
  }

  // required string city = 2;
  if (has_city()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->city(), output);
  }

  // required string county = 3;
  if (has_county()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->county().data(), this->county().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "county");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->county(), output);
  }

  // repeated .gboss.GpsRoadInfo roads = 4;
  for (int i = 0; i < this->roads_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->roads(i), output);
  }

  // repeated .gboss.GpsPointInfo points = 5;
  for (int i = 0; i < this->points_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->points(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GpsReferPosition)
}

::google_public::protobuf::uint8* GpsReferPosition::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GpsReferPosition)
  // required string province = 1;
  if (has_province()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->province().data(), this->province().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "province");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->province(), target);
  }

  // required string city = 2;
  if (has_city()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->city().data(), this->city().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "city");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->city(), target);
  }

  // required string county = 3;
  if (has_county()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->county().data(), this->county().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "county");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->county(), target);
  }

  // repeated .gboss.GpsRoadInfo roads = 4;
  for (int i = 0; i < this->roads_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->roads(i), target);
  }

  // repeated .gboss.GpsPointInfo points = 5;
  for (int i = 0; i < this->points_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->points(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GpsReferPosition)
  return target;
}

int GpsReferPosition::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string province = 1;
    if (has_province()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->province());
    }

    // required string city = 2;
    if (has_city()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->city());
    }

    // required string county = 3;
    if (has_county()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->county());
    }

  }
  // repeated .gboss.GpsRoadInfo roads = 4;
  total_size += 1 * this->roads_size();
  for (int i = 0; i < this->roads_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roads(i));
  }

  // repeated .gboss.GpsPointInfo points = 5;
  total_size += 1 * this->points_size();
  for (int i = 0; i < this->points_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->points(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsReferPosition::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsReferPosition* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GpsReferPosition*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsReferPosition::MergeFrom(const GpsReferPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  roads_.MergeFrom(from.roads_);
  points_.MergeFrom(from.points_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_province()) {
      set_province(from.province());
    }
    if (from.has_city()) {
      set_city(from.city());
    }
    if (from.has_county()) {
      set_county(from.county());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsReferPosition::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsReferPosition::CopyFrom(const GpsReferPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsReferPosition::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (!::google_public::protobuf::internal::AllAreInitialized(this->roads())) return false;
  if (!::google_public::protobuf::internal::AllAreInitialized(this->points())) return false;
  return true;
}

void GpsReferPosition::Swap(GpsReferPosition* other) {
  if (other != this) {
    std::swap(province_, other->province_);
    std::swap(city_, other->city_);
    std::swap(county_, other->county_);
    roads_.Swap(&other->roads_);
    points_.Swap(&other->points_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GpsReferPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GpsReferPosition_descriptor_;
  metadata.reflection = GpsReferPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GpsInfo::kCallLetterFieldNumber;
const int GpsInfo::kBaseInfoFieldNumber;
const int GpsInfo::kReferPositionFieldNumber;
const int GpsInfo::kContentFieldNumber;
const int GpsInfo::kHistoryFieldNumber;
#endif  // !_MSC_VER

GpsInfo::GpsInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.GpsInfo)
}

void GpsInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::gboss::GpsBaseInfo*>(&::gboss::GpsBaseInfo::default_instance());
  referposition_ = const_cast< ::gboss::GpsReferPosition*>(&::gboss::GpsReferPosition::default_instance());
}

GpsInfo::GpsInfo(const GpsInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.GpsInfo)
}

void GpsInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  baseinfo_ = NULL;
  referposition_ = NULL;
  content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  history_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GpsInfo::~GpsInfo() {
  // @@protoc_insertion_point(destructor:gboss.GpsInfo)
  SharedDtor();
}

void GpsInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete referposition_;
  }
}

void GpsInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* GpsInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GpsInfo_descriptor_;
}

const GpsInfo& GpsInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

GpsInfo* GpsInfo::default_instance_ = NULL;

GpsInfo* GpsInfo::New() const {
  return new GpsInfo;
}

void GpsInfo::Clear() {
  if (_has_bits_[0 / 32] & 31) {
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::gboss::GpsBaseInfo::Clear();
    }
    if (has_referposition()) {
      if (referposition_ != NULL) referposition_->::gboss::GpsReferPosition::Clear();
    }
    if (has_content()) {
      if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    history_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GpsInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.GpsInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_baseInfo;
        break;
      }

      // required .gboss.GpsBaseInfo baseInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_baseInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_referPosition;
        break;
      }

      // optional .gboss.GpsReferPosition referPosition = 3;
      case 3: {
        if (tag == 26) {
         parse_referPosition:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_history;
        break;
      }

      // optional int32 history = 5;
      case 5: {
        if (tag == 40) {
         parse_history:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.GpsInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.GpsInfo)
  return false;
#undef DO_
}

void GpsInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.GpsInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required .gboss.GpsBaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  // optional .gboss.GpsReferPosition referPosition = 3;
  if (has_referposition()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->referposition(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // optional int32 history = 5;
  if (has_history()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.GpsInfo)
}

::google_public::protobuf::uint8* GpsInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.GpsInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required .gboss.GpsBaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  // optional .gboss.GpsReferPosition referPosition = 3;
  if (has_referposition()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->referposition(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional int32 history = 5;
  if (has_history()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.GpsInfo)
  return target;
}

int GpsInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required .gboss.GpsBaseInfo baseInfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .gboss.GpsReferPosition referPosition = 3;
    if (has_referposition()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referposition());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int32 history = 5;
    if (has_history()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->history());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GpsInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GpsInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const GpsInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GpsInfo::MergeFrom(const GpsInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::gboss::GpsBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_referposition()) {
      mutable_referposition()->::gboss::GpsReferPosition::MergeFrom(from.referposition());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_history()) {
      set_history(from.history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GpsInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GpsInfo::CopyFrom(const GpsInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GpsInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_referposition()) {
    if (!this->referposition().IsInitialized()) return false;
  }
  return true;
}

void GpsInfo::Swap(GpsInfo* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(referposition_, other->referposition_);
    std::swap(content_, other->content_);
    std::swap(history_, other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata GpsInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = GpsInfo_descriptor_;
  metadata.reflection = GpsInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlarmInfo::kCallLetterFieldNumber;
const int AlarmInfo::kBaseInfoFieldNumber;
const int AlarmInfo::kReferPositionFieldNumber;
const int AlarmInfo::kContentFieldNumber;
const int AlarmInfo::kHistoryFieldNumber;
const int AlarmInfo::kUnittypeFieldNumber;
const int AlarmInfo::kTriggerFieldNumber;
#endif  // !_MSC_VER

AlarmInfo::AlarmInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.AlarmInfo)
}

void AlarmInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::gboss::GpsBaseInfo*>(&::gboss::GpsBaseInfo::default_instance());
  referposition_ = const_cast< ::gboss::GpsReferPosition*>(&::gboss::GpsReferPosition::default_instance());
}

AlarmInfo::AlarmInfo(const AlarmInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.AlarmInfo)
}

void AlarmInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  baseinfo_ = NULL;
  referposition_ = NULL;
  content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  history_ = 0;
  unittype_ = 0;
  trigger_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlarmInfo::~AlarmInfo() {
  // @@protoc_insertion_point(destructor:gboss.AlarmInfo)
  SharedDtor();
}

void AlarmInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete referposition_;
  }
}

void AlarmInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* AlarmInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlarmInfo_descriptor_;
}

const AlarmInfo& AlarmInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

AlarmInfo* AlarmInfo::default_instance_ = NULL;

AlarmInfo* AlarmInfo::New() const {
  return new AlarmInfo;
}

void AlarmInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AlarmInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 127) {
    ZR_(history_, trigger_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::gboss::GpsBaseInfo::Clear();
    }
    if (has_referposition()) {
      if (referposition_ != NULL) referposition_->::gboss::GpsReferPosition::Clear();
    }
    if (has_content()) {
      if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlarmInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.AlarmInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_baseInfo;
        break;
      }

      // required .gboss.GpsBaseInfo baseInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_baseInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_referPosition;
        break;
      }

      // optional .gboss.GpsReferPosition referPosition = 3;
      case 3: {
        if (tag == 26) {
         parse_referPosition:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (tag == 34) {
         parse_content:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_history;
        break;
      }

      // optional int32 history = 5;
      case 5: {
        if (tag == 40) {
         parse_history:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_unittype;
        break;
      }

      // optional int32 unittype = 6;
      case 6: {
        if (tag == 48) {
         parse_unittype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_trigger;
        break;
      }

      // optional int32 trigger = 7;
      case 7: {
        if (tag == 56) {
         parse_trigger:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &trigger_)));
          set_has_trigger();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.AlarmInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.AlarmInfo)
  return false;
#undef DO_
}

void AlarmInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.AlarmInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required .gboss.GpsBaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  // optional .gboss.GpsReferPosition referPosition = 3;
  if (has_referposition()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->referposition(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->content(), output);
  }

  // optional int32 history = 5;
  if (has_history()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->history(), output);
  }

  // optional int32 unittype = 6;
  if (has_unittype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->unittype(), output);
  }

  // optional int32 trigger = 7;
  if (has_trigger()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->trigger(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.AlarmInfo)
}

::google_public::protobuf::uint8* AlarmInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.AlarmInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required .gboss.GpsBaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  // optional .gboss.GpsReferPosition referPosition = 3;
  if (has_referposition()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->referposition(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional int32 history = 5;
  if (has_history()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->history(), target);
  }

  // optional int32 unittype = 6;
  if (has_unittype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->unittype(), target);
  }

  // optional int32 trigger = 7;
  if (has_trigger()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->trigger(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.AlarmInfo)
  return target;
}

int AlarmInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required .gboss.GpsBaseInfo baseInfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .gboss.GpsReferPosition referPosition = 3;
    if (has_referposition()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referposition());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int32 history = 5;
    if (has_history()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->history());
    }

    // optional int32 unittype = 6;
    if (has_unittype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->unittype());
    }

    // optional int32 trigger = 7;
    if (has_trigger()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->trigger());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlarmInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlarmInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const AlarmInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlarmInfo::MergeFrom(const AlarmInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::gboss::GpsBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_referposition()) {
      mutable_referposition()->::gboss::GpsReferPosition::MergeFrom(from.referposition());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_history()) {
      set_history(from.history());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_trigger()) {
      set_trigger(from.trigger());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlarmInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlarmInfo::CopyFrom(const AlarmInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlarmInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_referposition()) {
    if (!this->referposition().IsInitialized()) return false;
  }
  return true;
}

void AlarmInfo::Swap(AlarmInfo* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(referposition_, other->referposition_);
    std::swap(content_, other->content_);
    std::swap(history_, other->history_);
    std::swap(unittype_, other->unittype_);
    std::swap(trigger_, other->trigger_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata AlarmInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = AlarmInfo_descriptor_;
  metadata.reflection = AlarmInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UnitVersion::kCallLetterFieldNumber;
const int UnitVersion::kVersionFieldNumber;
const int UnitVersion::kResultFieldNumber;
#endif  // !_MSC_VER

UnitVersion::UnitVersion()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.UnitVersion)
}

void UnitVersion::InitAsDefaultInstance() {
}

UnitVersion::UnitVersion(const UnitVersion& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.UnitVersion)
}

void UnitVersion::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  version_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UnitVersion::~UnitVersion() {
  // @@protoc_insertion_point(destructor:gboss.UnitVersion)
  SharedDtor();
}

void UnitVersion::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (version_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete version_;
  }
  if (this != default_instance_) {
  }
}

void UnitVersion::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* UnitVersion::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UnitVersion_descriptor_;
}

const UnitVersion& UnitVersion::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

UnitVersion* UnitVersion::default_instance_ = NULL;

UnitVersion* UnitVersion::New() const {
  return new UnitVersion;
}

void UnitVersion::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        version_->clear();
      }
    }
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UnitVersion::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.UnitVersion)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_version;
        break;
      }

      // required string version = 2;
      case 2: {
        if (tag == 18) {
         parse_version:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->version().data(), this->version().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "version");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_result;
        break;
      }

      // optional int32 result = 3;
      case 3: {
        if (tag == 24) {
         parse_result:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.UnitVersion)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.UnitVersion)
  return false;
#undef DO_
}

void UnitVersion::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.UnitVersion)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required string version = 2;
  if (has_version()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // optional int32 result = 3;
  if (has_result()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.UnitVersion)
}

::google_public::protobuf::uint8* UnitVersion::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.UnitVersion)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required string version = 2;
  if (has_version()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->version().data(), this->version().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "version");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->version(), target);
  }

  // optional int32 result = 3;
  if (has_result()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.UnitVersion)
  return target;
}

int UnitVersion::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required string version = 2;
    if (has_version()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional int32 result = 3;
    if (has_result()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UnitVersion::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UnitVersion* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const UnitVersion*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UnitVersion::MergeFrom(const UnitVersion& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UnitVersion::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UnitVersion::CopyFrom(const UnitVersion& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UnitVersion::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void UnitVersion::Swap(UnitVersion* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(version_, other->version_);
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata UnitVersion::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = UnitVersion_descriptor_;
  metadata.reflection = UnitVersion_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateDataBaseInfo::kPriceFieldNumber;
const int OperateDataBaseInfo::kCountTimeFieldNumber;
const int OperateDataBaseInfo::kOperateMoneyFieldNumber;
const int OperateDataBaseInfo::kOperateMileFieldNumber;
const int OperateDataBaseInfo::kNullMileFieldNumber;
const int OperateDataBaseInfo::kOverSpeedMileFieldNumber;
const int OperateDataBaseInfo::kOverSpeedCountFieldNumber;
const int OperateDataBaseInfo::kPowerOffCountFieldNumber;
const int OperateDataBaseInfo::kPowerOffTimeFieldNumber;
const int OperateDataBaseInfo::kSequenceNoFieldNumber;
const int OperateDataBaseInfo::kAppendParamsFieldNumber;
const int OperateDataBaseInfo::kPerpriceFieldNumber;
const int OperateDataBaseInfo::kLicensenoFieldNumber;
#endif  // !_MSC_VER

OperateDataBaseInfo::OperateDataBaseInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.OperateDataBaseInfo)
}

void OperateDataBaseInfo::InitAsDefaultInstance() {
}

OperateDataBaseInfo::OperateDataBaseInfo(const OperateDataBaseInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.OperateDataBaseInfo)
}

void OperateDataBaseInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  price_ = 0;
  counttime_ = 0;
  operatemoney_ = 0;
  operatemile_ = 0;
  nullmile_ = 0;
  overspeedmile_ = 0;
  overspeedcount_ = 0;
  poweroffcount_ = 0;
  powerofftime_ = 0;
  sequenceno_ = 0;
  perprice_ = 0;
  licenseno_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateDataBaseInfo::~OperateDataBaseInfo() {
  // @@protoc_insertion_point(destructor:gboss.OperateDataBaseInfo)
  SharedDtor();
}

void OperateDataBaseInfo::SharedDtor() {
  if (licenseno_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete licenseno_;
  }
  if (this != default_instance_) {
  }
}

void OperateDataBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OperateDataBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateDataBaseInfo_descriptor_;
}

const OperateDataBaseInfo& OperateDataBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

OperateDataBaseInfo* OperateDataBaseInfo::default_instance_ = NULL;

OperateDataBaseInfo* OperateDataBaseInfo::New() const {
  return new OperateDataBaseInfo;
}

void OperateDataBaseInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<OperateDataBaseInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(price_, poweroffcount_);
  }
  if (_has_bits_[8 / 32] & 6912) {
    ZR_(powerofftime_, sequenceno_);
    perprice_ = 0;
    if (has_licenseno()) {
      if (licenseno_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        licenseno_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  appendparams_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateDataBaseInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.OperateDataBaseInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 price = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &price_)));
          set_has_price();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_countTime;
        break;
      }

      // required int32 countTime = 2;
      case 2: {
        if (tag == 16) {
         parse_countTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counttime_)));
          set_has_counttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_operateMoney;
        break;
      }

      // required int32 operateMoney = 3;
      case 3: {
        if (tag == 24) {
         parse_operateMoney:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatemoney_)));
          set_has_operatemoney();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_operateMile;
        break;
      }

      // required int32 operateMile = 4;
      case 4: {
        if (tag == 32) {
         parse_operateMile:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &operatemile_)));
          set_has_operatemile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_nullMile;
        break;
      }

      // optional int32 nullMile = 5;
      case 5: {
        if (tag == 40) {
         parse_nullMile:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nullmile_)));
          set_has_nullmile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_overSpeedMile;
        break;
      }

      // optional int32 overSpeedMile = 6;
      case 6: {
        if (tag == 48) {
         parse_overSpeedMile:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overspeedmile_)));
          set_has_overspeedmile();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_overSpeedCount;
        break;
      }

      // optional int32 overSpeedCount = 7;
      case 7: {
        if (tag == 56) {
         parse_overSpeedCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overspeedcount_)));
          set_has_overspeedcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_powerOffCount;
        break;
      }

      // optional int32 powerOffCount = 8;
      case 8: {
        if (tag == 64) {
         parse_powerOffCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &poweroffcount_)));
          set_has_poweroffcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_powerOffTime;
        break;
      }

      // optional int32 powerOffTime = 9;
      case 9: {
        if (tag == 72) {
         parse_powerOffTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powerofftime_)));
          set_has_powerofftime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_sequenceNo;
        break;
      }

      // optional int32 sequenceNo = 10;
      case 10: {
        if (tag == 80) {
         parse_sequenceNo:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sequenceno_)));
          set_has_sequenceno();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_appendParams;
        break;
      }

      // repeated .gboss.MapEntry appendParams = 11;
      case 11: {
        if (tag == 90) {
         parse_appendParams:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_appendparams()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_appendParams;
        if (input->ExpectTag(96)) goto parse_perprice;
        break;
      }

      // optional int32 perprice = 12;
      case 12: {
        if (tag == 96) {
         parse_perprice:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &perprice_)));
          set_has_perprice();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(106)) goto parse_licenseno;
        break;
      }

      // optional string licenseno = 13;
      case 13: {
        if (tag == 106) {
         parse_licenseno:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_licenseno()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->licenseno().data(), this->licenseno().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "licenseno");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.OperateDataBaseInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.OperateDataBaseInfo)
  return false;
#undef DO_
}

void OperateDataBaseInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.OperateDataBaseInfo)
  // required int32 price = 1;
  if (has_price()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->price(), output);
  }

  // required int32 countTime = 2;
  if (has_counttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(2, this->counttime(), output);
  }

  // required int32 operateMoney = 3;
  if (has_operatemoney()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->operatemoney(), output);
  }

  // required int32 operateMile = 4;
  if (has_operatemile()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->operatemile(), output);
  }

  // optional int32 nullMile = 5;
  if (has_nullmile()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->nullmile(), output);
  }

  // optional int32 overSpeedMile = 6;
  if (has_overspeedmile()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->overspeedmile(), output);
  }

  // optional int32 overSpeedCount = 7;
  if (has_overspeedcount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->overspeedcount(), output);
  }

  // optional int32 powerOffCount = 8;
  if (has_poweroffcount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->poweroffcount(), output);
  }

  // optional int32 powerOffTime = 9;
  if (has_powerofftime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->powerofftime(), output);
  }

  // optional int32 sequenceNo = 10;
  if (has_sequenceno()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->sequenceno(), output);
  }

  // repeated .gboss.MapEntry appendParams = 11;
  for (int i = 0; i < this->appendparams_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->appendparams(i), output);
  }

  // optional int32 perprice = 12;
  if (has_perprice()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(12, this->perprice(), output);
  }

  // optional string licenseno = 13;
  if (has_licenseno()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->licenseno().data(), this->licenseno().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "licenseno");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      13, this->licenseno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.OperateDataBaseInfo)
}

::google_public::protobuf::uint8* OperateDataBaseInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.OperateDataBaseInfo)
  // required int32 price = 1;
  if (has_price()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->price(), target);
  }

  // required int32 countTime = 2;
  if (has_counttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counttime(), target);
  }

  // required int32 operateMoney = 3;
  if (has_operatemoney()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->operatemoney(), target);
  }

  // required int32 operateMile = 4;
  if (has_operatemile()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->operatemile(), target);
  }

  // optional int32 nullMile = 5;
  if (has_nullmile()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->nullmile(), target);
  }

  // optional int32 overSpeedMile = 6;
  if (has_overspeedmile()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->overspeedmile(), target);
  }

  // optional int32 overSpeedCount = 7;
  if (has_overspeedcount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->overspeedcount(), target);
  }

  // optional int32 powerOffCount = 8;
  if (has_poweroffcount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->poweroffcount(), target);
  }

  // optional int32 powerOffTime = 9;
  if (has_powerofftime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->powerofftime(), target);
  }

  // optional int32 sequenceNo = 10;
  if (has_sequenceno()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sequenceno(), target);
  }

  // repeated .gboss.MapEntry appendParams = 11;
  for (int i = 0; i < this->appendparams_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->appendparams(i), target);
  }

  // optional int32 perprice = 12;
  if (has_perprice()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->perprice(), target);
  }

  // optional string licenseno = 13;
  if (has_licenseno()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->licenseno().data(), this->licenseno().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "licenseno");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->licenseno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.OperateDataBaseInfo)
  return target;
}

int OperateDataBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 price = 1;
    if (has_price()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->price());
    }

    // required int32 countTime = 2;
    if (has_counttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->counttime());
    }

    // required int32 operateMoney = 3;
    if (has_operatemoney()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->operatemoney());
    }

    // required int32 operateMile = 4;
    if (has_operatemile()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->operatemile());
    }

    // optional int32 nullMile = 5;
    if (has_nullmile()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->nullmile());
    }

    // optional int32 overSpeedMile = 6;
    if (has_overspeedmile()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->overspeedmile());
    }

    // optional int32 overSpeedCount = 7;
    if (has_overspeedcount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->overspeedcount());
    }

    // optional int32 powerOffCount = 8;
    if (has_poweroffcount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->poweroffcount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 powerOffTime = 9;
    if (has_powerofftime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->powerofftime());
    }

    // optional int32 sequenceNo = 10;
    if (has_sequenceno()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->sequenceno());
    }

    // optional int32 perprice = 12;
    if (has_perprice()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->perprice());
    }

    // optional string licenseno = 13;
    if (has_licenseno()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->licenseno());
    }

  }
  // repeated .gboss.MapEntry appendParams = 11;
  total_size += 1 * this->appendparams_size();
  for (int i = 0; i < this->appendparams_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->appendparams(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateDataBaseInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateDataBaseInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OperateDataBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateDataBaseInfo::MergeFrom(const OperateDataBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  appendparams_.MergeFrom(from.appendparams_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_price()) {
      set_price(from.price());
    }
    if (from.has_counttime()) {
      set_counttime(from.counttime());
    }
    if (from.has_operatemoney()) {
      set_operatemoney(from.operatemoney());
    }
    if (from.has_operatemile()) {
      set_operatemile(from.operatemile());
    }
    if (from.has_nullmile()) {
      set_nullmile(from.nullmile());
    }
    if (from.has_overspeedmile()) {
      set_overspeedmile(from.overspeedmile());
    }
    if (from.has_overspeedcount()) {
      set_overspeedcount(from.overspeedcount());
    }
    if (from.has_poweroffcount()) {
      set_poweroffcount(from.poweroffcount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_powerofftime()) {
      set_powerofftime(from.powerofftime());
    }
    if (from.has_sequenceno()) {
      set_sequenceno(from.sequenceno());
    }
    if (from.has_perprice()) {
      set_perprice(from.perprice());
    }
    if (from.has_licenseno()) {
      set_licenseno(from.licenseno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateDataBaseInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateDataBaseInfo::CopyFrom(const OperateDataBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateDataBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (!::google_public::protobuf::internal::AllAreInitialized(this->appendparams())) return false;
  return true;
}

void OperateDataBaseInfo::Swap(OperateDataBaseInfo* other) {
  if (other != this) {
    std::swap(price_, other->price_);
    std::swap(counttime_, other->counttime_);
    std::swap(operatemoney_, other->operatemoney_);
    std::swap(operatemile_, other->operatemile_);
    std::swap(nullmile_, other->nullmile_);
    std::swap(overspeedmile_, other->overspeedmile_);
    std::swap(overspeedcount_, other->overspeedcount_);
    std::swap(poweroffcount_, other->poweroffcount_);
    std::swap(powerofftime_, other->powerofftime_);
    std::swap(sequenceno_, other->sequenceno_);
    appendparams_.Swap(&other->appendparams_);
    std::swap(perprice_, other->perprice_);
    std::swap(licenseno_, other->licenseno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OperateDataBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OperateDataBaseInfo_descriptor_;
  metadata.reflection = OperateDataBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperateData::kCallLetterFieldNumber;
const int OperateData::kBaseInfoFieldNumber;
const int OperateData::kStartGpsFieldNumber;
const int OperateData::kStartPoiFieldNumber;
const int OperateData::kStopGpsFieldNumber;
const int OperateData::kStopPoiFieldNumber;
const int OperateData::kContentFieldNumber;
const int OperateData::kHistoryFieldNumber;
#endif  // !_MSC_VER

OperateData::OperateData()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.OperateData)
}

void OperateData::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::gboss::OperateDataBaseInfo*>(&::gboss::OperateDataBaseInfo::default_instance());
  startgps_ = const_cast< ::gboss::GpsBaseInfo*>(&::gboss::GpsBaseInfo::default_instance());
  startpoi_ = const_cast< ::gboss::GpsReferPosition*>(&::gboss::GpsReferPosition::default_instance());
  stopgps_ = const_cast< ::gboss::GpsBaseInfo*>(&::gboss::GpsBaseInfo::default_instance());
  stoppoi_ = const_cast< ::gboss::GpsReferPosition*>(&::gboss::GpsReferPosition::default_instance());
}

OperateData::OperateData(const OperateData& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.OperateData)
}

void OperateData::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  baseinfo_ = NULL;
  startgps_ = NULL;
  startpoi_ = NULL;
  stopgps_ = NULL;
  stoppoi_ = NULL;
  content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  history_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperateData::~OperateData() {
  // @@protoc_insertion_point(destructor:gboss.OperateData)
  SharedDtor();
}

void OperateData::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete startgps_;
    delete startpoi_;
    delete stopgps_;
    delete stoppoi_;
  }
}

void OperateData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* OperateData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperateData_descriptor_;
}

const OperateData& OperateData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

OperateData* OperateData::default_instance_ = NULL;

OperateData* OperateData::New() const {
  return new OperateData;
}

void OperateData::Clear() {
  if (_has_bits_[0 / 32] & 255) {
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::gboss::OperateDataBaseInfo::Clear();
    }
    if (has_startgps()) {
      if (startgps_ != NULL) startgps_->::gboss::GpsBaseInfo::Clear();
    }
    if (has_startpoi()) {
      if (startpoi_ != NULL) startpoi_->::gboss::GpsReferPosition::Clear();
    }
    if (has_stopgps()) {
      if (stopgps_ != NULL) stopgps_->::gboss::GpsBaseInfo::Clear();
    }
    if (has_stoppoi()) {
      if (stoppoi_ != NULL) stoppoi_->::gboss::GpsReferPosition::Clear();
    }
    if (has_content()) {
      if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    history_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperateData::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.OperateData)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_baseInfo;
        break;
      }

      // required .gboss.OperateDataBaseInfo baseInfo = 2;
      case 2: {
        if (tag == 18) {
         parse_baseInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_startGps;
        break;
      }

      // required .gboss.GpsBaseInfo startGps = 3;
      case 3: {
        if (tag == 26) {
         parse_startGps:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startgps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_startPoi;
        break;
      }

      // optional .gboss.GpsReferPosition startPoi = 4;
      case 4: {
        if (tag == 34) {
         parse_startPoi:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startpoi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_stopGps;
        break;
      }

      // required .gboss.GpsBaseInfo stopGps = 5;
      case 5: {
        if (tag == 42) {
         parse_stopGps:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stopgps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(50)) goto parse_stopPoi;
        break;
      }

      // optional .gboss.GpsReferPosition stopPoi = 6;
      case 6: {
        if (tag == 50) {
         parse_stopPoi:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_stoppoi()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(58)) goto parse_content;
        break;
      }

      // optional bytes content = 7;
      case 7: {
        if (tag == 58) {
         parse_content:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_history;
        break;
      }

      // optional int32 history = 8;
      case 8: {
        if (tag == 64) {
         parse_history:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.OperateData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.OperateData)
  return false;
#undef DO_
}

void OperateData::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.OperateData)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required .gboss.OperateDataBaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  // required .gboss.GpsBaseInfo startGps = 3;
  if (has_startgps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->startgps(), output);
  }

  // optional .gboss.GpsReferPosition startPoi = 4;
  if (has_startpoi()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->startpoi(), output);
  }

  // required .gboss.GpsBaseInfo stopGps = 5;
  if (has_stopgps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->stopgps(), output);
  }

  // optional .gboss.GpsReferPosition stopPoi = 6;
  if (has_stoppoi()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->stoppoi(), output);
  }

  // optional bytes content = 7;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->content(), output);
  }

  // optional int32 history = 8;
  if (has_history()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.OperateData)
}

::google_public::protobuf::uint8* OperateData::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.OperateData)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required .gboss.OperateDataBaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  // required .gboss.GpsBaseInfo startGps = 3;
  if (has_startgps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->startgps(), target);
  }

  // optional .gboss.GpsReferPosition startPoi = 4;
  if (has_startpoi()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->startpoi(), target);
  }

  // required .gboss.GpsBaseInfo stopGps = 5;
  if (has_stopgps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->stopgps(), target);
  }

  // optional .gboss.GpsReferPosition stopPoi = 6;
  if (has_stoppoi()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->stoppoi(), target);
  }

  // optional bytes content = 7;
  if (has_content()) {
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->content(), target);
  }

  // optional int32 history = 8;
  if (has_history()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.OperateData)
  return target;
}

int OperateData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required .gboss.OperateDataBaseInfo baseInfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // required .gboss.GpsBaseInfo startGps = 3;
    if (has_startgps()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startgps());
    }

    // optional .gboss.GpsReferPosition startPoi = 4;
    if (has_startpoi()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startpoi());
    }

    // required .gboss.GpsBaseInfo stopGps = 5;
    if (has_stopgps()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stopgps());
    }

    // optional .gboss.GpsReferPosition stopPoi = 6;
    if (has_stoppoi()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->stoppoi());
    }

    // optional bytes content = 7;
    if (has_content()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional int32 history = 8;
    if (has_history()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->history());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperateData::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperateData* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const OperateData*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperateData::MergeFrom(const OperateData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::gboss::OperateDataBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_startgps()) {
      mutable_startgps()->::gboss::GpsBaseInfo::MergeFrom(from.startgps());
    }
    if (from.has_startpoi()) {
      mutable_startpoi()->::gboss::GpsReferPosition::MergeFrom(from.startpoi());
    }
    if (from.has_stopgps()) {
      mutable_stopgps()->::gboss::GpsBaseInfo::MergeFrom(from.stopgps());
    }
    if (from.has_stoppoi()) {
      mutable_stoppoi()->::gboss::GpsReferPosition::MergeFrom(from.stoppoi());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_history()) {
      set_history(from.history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperateData::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperateData::CopyFrom(const OperateData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperateData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000017) != 0x00000017) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_startgps()) {
    if (!this->startgps().IsInitialized()) return false;
  }
  if (has_startpoi()) {
    if (!this->startpoi().IsInitialized()) return false;
  }
  if (has_stopgps()) {
    if (!this->stopgps().IsInitialized()) return false;
  }
  if (has_stoppoi()) {
    if (!this->stoppoi().IsInitialized()) return false;
  }
  return true;
}

void OperateData::Swap(OperateData* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(startgps_, other->startgps_);
    std::swap(startpoi_, other->startpoi_);
    std::swap(stopgps_, other->stopgps_);
    std::swap(stoppoi_, other->stoppoi_);
    std::swap(content_, other->content_);
    std::swap(history_, other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata OperateData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = OperateData_descriptor_;
  metadata.reflection = OperateData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ShortMessage::kCallLetterFieldNumber;
const int ShortMessage::kMsgFieldNumber;
const int ShortMessage::kRecvTimeFieldNumber;
#endif  // !_MSC_VER

ShortMessage::ShortMessage()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.ShortMessage)
}

void ShortMessage::InitAsDefaultInstance() {
}

ShortMessage::ShortMessage(const ShortMessage& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.ShortMessage)
}

void ShortMessage::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  msg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  recvtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ShortMessage::~ShortMessage() {
  // @@protoc_insertion_point(destructor:gboss.ShortMessage)
  SharedDtor();
}

void ShortMessage::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (msg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ShortMessage::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ShortMessage::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ShortMessage_descriptor_;
}

const ShortMessage& ShortMessage::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

ShortMessage* ShortMessage::default_instance_ = NULL;

ShortMessage* ShortMessage::New() const {
  return new ShortMessage;
}

void ShortMessage::Clear() {
  if (_has_bits_[0 / 32] & 7) {
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        msg_->clear();
      }
    }
    recvtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ShortMessage::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.ShortMessage)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (tag == 18) {
         parse_msg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->msg().data(), this->msg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "msg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_recvTime;
        break;
      }

      // optional int64 recvTime = 3;
      case 3: {
        if (tag == 24) {
         parse_recvTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &recvtime_)));
          set_has_recvtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.ShortMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.ShortMessage)
  return false;
#undef DO_
}

void ShortMessage::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.ShortMessage)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->msg(), output);
  }

  // optional int64 recvTime = 3;
  if (has_recvtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(3, this->recvtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.ShortMessage)
}

::google_public::protobuf::uint8* ShortMessage::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.ShortMessage)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->msg().data(), this->msg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "msg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // optional int64 recvTime = 3;
  if (has_recvtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->recvtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.ShortMessage)
  return target;
}

int ShortMessage::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // optional int64 recvTime = 3;
    if (has_recvtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->recvtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ShortMessage::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ShortMessage* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ShortMessage*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ShortMessage::MergeFrom(const ShortMessage& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_recvtime()) {
      set_recvtime(from.recvtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ShortMessage::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ShortMessage::CopyFrom(const ShortMessage& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ShortMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ShortMessage::Swap(ShortMessage* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(msg_, other->msg_);
    std::swap(recvtime_, other->recvtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ShortMessage::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ShortMessage_descriptor_;
  metadata.reflection = ShortMessage_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TravelInfo::kCallLetterFieldNumber;
const int TravelInfo::kStartTimeFieldNumber;
const int TravelInfo::kEndTimeFieldNumber;
const int TravelInfo::kDistanceFieldNumber;
const int TravelInfo::kMaxSpeedFieldNumber;
const int TravelInfo::kOverSpeedTimeFieldNumber;
const int TravelInfo::kQuickBrakeCountFieldNumber;
const int TravelInfo::kEmergencyBrakeCountFieldNumber;
const int TravelInfo::kQuickSpeedUpCountFieldNumber;
const int TravelInfo::kEmergencySpeedUpCountFieldNumber;
const int TravelInfo::kAverageSpeedFieldNumber;
const int TravelInfo::kMaxWaterTemperatureFieldNumber;
const int TravelInfo::kMaxRotationSpeedFieldNumber;
const int TravelInfo::kVoltageFieldNumber;
const int TravelInfo::kTotalOilFieldNumber;
const int TravelInfo::kAverageOilFieldNumber;
const int TravelInfo::kTiredDrivingTimeFieldNumber;
const int TravelInfo::kSerialNumberFieldNumber;
const int TravelInfo::kAverageRotationSpeedFieldNumber;
const int TravelInfo::kMaxOilFieldNumber;
const int TravelInfo::kIdleTimeFieldNumber;
const int TravelInfo::kStartGpsFieldNumber;
const int TravelInfo::kStartReferPosFieldNumber;
const int TravelInfo::kEndGpsFieldNumber;
const int TravelInfo::kEndReferPosFieldNumber;
const int TravelInfo::kHistoryFieldNumber;
#endif  // !_MSC_VER

TravelInfo::TravelInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.TravelInfo)
}

void TravelInfo::InitAsDefaultInstance() {
  startgps_ = const_cast< ::gboss::GpsBaseInfo*>(&::gboss::GpsBaseInfo::default_instance());
  startreferpos_ = const_cast< ::gboss::GpsReferPosition*>(&::gboss::GpsReferPosition::default_instance());
  endgps_ = const_cast< ::gboss::GpsBaseInfo*>(&::gboss::GpsBaseInfo::default_instance());
  endreferpos_ = const_cast< ::gboss::GpsReferPosition*>(&::gboss::GpsReferPosition::default_instance());
}

TravelInfo::TravelInfo(const TravelInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.TravelInfo)
}

void TravelInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  distance_ = 0;
  maxspeed_ = 0;
  overspeedtime_ = 0;
  quickbrakecount_ = 0;
  emergencybrakecount_ = 0;
  quickspeedupcount_ = 0;
  emergencyspeedupcount_ = 0;
  averagespeed_ = 0;
  maxwatertemperature_ = 0;
  maxrotationspeed_ = 0;
  voltage_ = 0;
  totaloil_ = 0;
  averageoil_ = 0;
  tireddrivingtime_ = 0;
  serialnumber_ = 0;
  averagerotationspeed_ = 0;
  maxoil_ = 0;
  idletime_ = 0;
  startgps_ = NULL;
  startreferpos_ = NULL;
  endgps_ = NULL;
  endreferpos_ = NULL;
  history_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TravelInfo::~TravelInfo() {
  // @@protoc_insertion_point(destructor:gboss.TravelInfo)
  SharedDtor();
}

void TravelInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (this != default_instance_) {
    delete startgps_;
    delete startreferpos_;
    delete endgps_;
    delete endreferpos_;
  }
}

void TravelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* TravelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TravelInfo_descriptor_;
}

const TravelInfo& TravelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

TravelInfo* TravelInfo::default_instance_ = NULL;

TravelInfo* TravelInfo::New() const {
  return new TravelInfo;
}

void TravelInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<TravelInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(starttime_, emergencybrakecount_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 65280) {
    ZR_(quickspeedupcount_, averageoil_);
  }
  if (_has_bits_[16 / 32] & 16711680) {
    ZR_(tireddrivingtime_, idletime_);
    if (has_startgps()) {
      if (startgps_ != NULL) startgps_->::gboss::GpsBaseInfo::Clear();
    }
    if (has_startreferpos()) {
      if (startreferpos_ != NULL) startreferpos_->::gboss::GpsReferPosition::Clear();
    }
    if (has_endgps()) {
      if (endgps_ != NULL) endgps_->::gboss::GpsBaseInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & 50331648) {
    if (has_endreferpos()) {
      if (endreferpos_ != NULL) endreferpos_->::gboss::GpsReferPosition::Clear();
    }
    history_ = 0;
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TravelInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.TravelInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(16383);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_startTime;
        break;
      }

      // required int64 startTime = 2;
      case 2: {
        if (tag == 16) {
         parse_startTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // required int64 endTime = 3;
      case 3: {
        if (tag == 24) {
         parse_endTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_distance;
        break;
      }

      // optional int32 distance = 4;
      case 4: {
        if (tag == 32) {
         parse_distance:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_maxSpeed;
        break;
      }

      // optional int32 maxSpeed = 5;
      case 5: {
        if (tag == 40) {
         parse_maxSpeed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxspeed_)));
          set_has_maxspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_overSpeedTime;
        break;
      }

      // optional int32 overSpeedTime = 6;
      case 6: {
        if (tag == 48) {
         parse_overSpeedTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &overspeedtime_)));
          set_has_overspeedtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_quickBrakeCount;
        break;
      }

      // optional int32 quickBrakeCount = 7;
      case 7: {
        if (tag == 56) {
         parse_quickBrakeCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quickbrakecount_)));
          set_has_quickbrakecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_emergencyBrakeCount;
        break;
      }

      // optional int32 emergencyBrakeCount = 8;
      case 8: {
        if (tag == 64) {
         parse_emergencyBrakeCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergencybrakecount_)));
          set_has_emergencybrakecount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_quickSpeedUpCount;
        break;
      }

      // optional int32 quickSpeedUpCount = 9;
      case 9: {
        if (tag == 72) {
         parse_quickSpeedUpCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quickspeedupcount_)));
          set_has_quickspeedupcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_emergencySpeedUpCount;
        break;
      }

      // optional int32 emergencySpeedUpCount = 10;
      case 10: {
        if (tag == 80) {
         parse_emergencySpeedUpCount:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &emergencyspeedupcount_)));
          set_has_emergencyspeedupcount();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_averageSpeed;
        break;
      }

      // optional int32 averageSpeed = 11;
      case 11: {
        if (tag == 88) {
         parse_averageSpeed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averagespeed_)));
          set_has_averagespeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_maxWaterTemperature;
        break;
      }

      // optional int32 maxWaterTemperature = 12;
      case 12: {
        if (tag == 96) {
         parse_maxWaterTemperature:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxwatertemperature_)));
          set_has_maxwatertemperature();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_maxRotationSpeed;
        break;
      }

      // optional int32 maxRotationSpeed = 13;
      case 13: {
        if (tag == 104) {
         parse_maxRotationSpeed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxrotationspeed_)));
          set_has_maxrotationspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_voltage;
        break;
      }

      // optional int32 voltage = 14;
      case 14: {
        if (tag == 112) {
         parse_voltage:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &voltage_)));
          set_has_voltage();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(120)) goto parse_totalOil;
        break;
      }

      // optional int32 totalOil = 15;
      case 15: {
        if (tag == 120) {
         parse_totalOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaloil_)));
          set_has_totaloil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(128)) goto parse_averageOil;
        break;
      }

      // optional int32 averageOil = 16;
      case 16: {
        if (tag == 128) {
         parse_averageOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averageoil_)));
          set_has_averageoil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(136)) goto parse_tiredDrivingTime;
        break;
      }

      // optional int32 tiredDrivingTime = 17;
      case 17: {
        if (tag == 136) {
         parse_tiredDrivingTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tireddrivingtime_)));
          set_has_tireddrivingtime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(144)) goto parse_serialNumber;
        break;
      }

      // optional int32 serialNumber = 18;
      case 18: {
        if (tag == 144) {
         parse_serialNumber:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serialnumber_)));
          set_has_serialnumber();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(152)) goto parse_averageRotationSpeed;
        break;
      }

      // optional int32 averageRotationSpeed = 19;
      case 19: {
        if (tag == 152) {
         parse_averageRotationSpeed:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &averagerotationspeed_)));
          set_has_averagerotationspeed();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(160)) goto parse_maxOil;
        break;
      }

      // optional int32 maxOil = 20;
      case 20: {
        if (tag == 160) {
         parse_maxOil:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxoil_)));
          set_has_maxoil();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(168)) goto parse_idleTime;
        break;
      }

      // optional int32 idleTime = 21;
      case 21: {
        if (tag == 168) {
         parse_idleTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idletime_)));
          set_has_idletime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(178)) goto parse_startGps;
        break;
      }

      // optional .gboss.GpsBaseInfo startGps = 22;
      case 22: {
        if (tag == 178) {
         parse_startGps:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startgps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(186)) goto parse_startReferPos;
        break;
      }

      // optional .gboss.GpsReferPosition startReferPos = 23;
      case 23: {
        if (tag == 186) {
         parse_startReferPos:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_startreferpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(194)) goto parse_endGps;
        break;
      }

      // optional .gboss.GpsBaseInfo endGps = 24;
      case 24: {
        if (tag == 194) {
         parse_endGps:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endgps()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(202)) goto parse_endReferPos;
        break;
      }

      // optional .gboss.GpsReferPosition endReferPos = 25;
      case 25: {
        if (tag == 202) {
         parse_endReferPos:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endreferpos()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(208)) goto parse_history;
        break;
      }

      // optional int32 history = 26;
      case 26: {
        if (tag == 208) {
         parse_history:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.TravelInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.TravelInfo)
  return false;
#undef DO_
}

void TravelInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.TravelInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int64 startTime = 2;
  if (has_starttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(2, this->starttime(), output);
  }

  // required int64 endTime = 3;
  if (has_endtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int32 distance = 4;
  if (has_distance()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->distance(), output);
  }

  // optional int32 maxSpeed = 5;
  if (has_maxspeed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxspeed(), output);
  }

  // optional int32 overSpeedTime = 6;
  if (has_overspeedtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->overspeedtime(), output);
  }

  // optional int32 quickBrakeCount = 7;
  if (has_quickbrakecount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->quickbrakecount(), output);
  }

  // optional int32 emergencyBrakeCount = 8;
  if (has_emergencybrakecount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->emergencybrakecount(), output);
  }

  // optional int32 quickSpeedUpCount = 9;
  if (has_quickspeedupcount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->quickspeedupcount(), output);
  }

  // optional int32 emergencySpeedUpCount = 10;
  if (has_emergencyspeedupcount()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->emergencyspeedupcount(), output);
  }

  // optional int32 averageSpeed = 11;
  if (has_averagespeed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(11, this->averagespeed(), output);
  }

  // optional int32 maxWaterTemperature = 12;
  if (has_maxwatertemperature()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(12, this->maxwatertemperature(), output);
  }

  // optional int32 maxRotationSpeed = 13;
  if (has_maxrotationspeed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(13, this->maxrotationspeed(), output);
  }

  // optional int32 voltage = 14;
  if (has_voltage()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(14, this->voltage(), output);
  }

  // optional int32 totalOil = 15;
  if (has_totaloil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(15, this->totaloil(), output);
  }

  // optional int32 averageOil = 16;
  if (has_averageoil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(16, this->averageoil(), output);
  }

  // optional int32 tiredDrivingTime = 17;
  if (has_tireddrivingtime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(17, this->tireddrivingtime(), output);
  }

  // optional int32 serialNumber = 18;
  if (has_serialnumber()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(18, this->serialnumber(), output);
  }

  // optional int32 averageRotationSpeed = 19;
  if (has_averagerotationspeed()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(19, this->averagerotationspeed(), output);
  }

  // optional int32 maxOil = 20;
  if (has_maxoil()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(20, this->maxoil(), output);
  }

  // optional int32 idleTime = 21;
  if (has_idletime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(21, this->idletime(), output);
  }

  // optional .gboss.GpsBaseInfo startGps = 22;
  if (has_startgps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->startgps(), output);
  }

  // optional .gboss.GpsReferPosition startReferPos = 23;
  if (has_startreferpos()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->startreferpos(), output);
  }

  // optional .gboss.GpsBaseInfo endGps = 24;
  if (has_endgps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->endgps(), output);
  }

  // optional .gboss.GpsReferPosition endReferPos = 25;
  if (has_endreferpos()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->endreferpos(), output);
  }

  // optional int32 history = 26;
  if (has_history()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(26, this->history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.TravelInfo)
}

::google_public::protobuf::uint8* TravelInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.TravelInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int64 startTime = 2;
  if (has_starttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->starttime(), target);
  }

  // required int64 endTime = 3;
  if (has_endtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int32 distance = 4;
  if (has_distance()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->distance(), target);
  }

  // optional int32 maxSpeed = 5;
  if (has_maxspeed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxspeed(), target);
  }

  // optional int32 overSpeedTime = 6;
  if (has_overspeedtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->overspeedtime(), target);
  }

  // optional int32 quickBrakeCount = 7;
  if (has_quickbrakecount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->quickbrakecount(), target);
  }

  // optional int32 emergencyBrakeCount = 8;
  if (has_emergencybrakecount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->emergencybrakecount(), target);
  }

  // optional int32 quickSpeedUpCount = 9;
  if (has_quickspeedupcount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->quickspeedupcount(), target);
  }

  // optional int32 emergencySpeedUpCount = 10;
  if (has_emergencyspeedupcount()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->emergencyspeedupcount(), target);
  }

  // optional int32 averageSpeed = 11;
  if (has_averagespeed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->averagespeed(), target);
  }

  // optional int32 maxWaterTemperature = 12;
  if (has_maxwatertemperature()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->maxwatertemperature(), target);
  }

  // optional int32 maxRotationSpeed = 13;
  if (has_maxrotationspeed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->maxrotationspeed(), target);
  }

  // optional int32 voltage = 14;
  if (has_voltage()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->voltage(), target);
  }

  // optional int32 totalOil = 15;
  if (has_totaloil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->totaloil(), target);
  }

  // optional int32 averageOil = 16;
  if (has_averageoil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->averageoil(), target);
  }

  // optional int32 tiredDrivingTime = 17;
  if (has_tireddrivingtime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->tireddrivingtime(), target);
  }

  // optional int32 serialNumber = 18;
  if (has_serialnumber()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->serialnumber(), target);
  }

  // optional int32 averageRotationSpeed = 19;
  if (has_averagerotationspeed()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->averagerotationspeed(), target);
  }

  // optional int32 maxOil = 20;
  if (has_maxoil()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->maxoil(), target);
  }

  // optional int32 idleTime = 21;
  if (has_idletime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->idletime(), target);
  }

  // optional .gboss.GpsBaseInfo startGps = 22;
  if (has_startgps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->startgps(), target);
  }

  // optional .gboss.GpsReferPosition startReferPos = 23;
  if (has_startreferpos()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->startreferpos(), target);
  }

  // optional .gboss.GpsBaseInfo endGps = 24;
  if (has_endgps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->endgps(), target);
  }

  // optional .gboss.GpsReferPosition endReferPos = 25;
  if (has_endreferpos()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->endreferpos(), target);
  }

  // optional int32 history = 26;
  if (has_history()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.TravelInfo)
  return target;
}

int TravelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int64 startTime = 2;
    if (has_starttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // required int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 distance = 4;
    if (has_distance()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

    // optional int32 maxSpeed = 5;
    if (has_maxspeed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxspeed());
    }

    // optional int32 overSpeedTime = 6;
    if (has_overspeedtime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->overspeedtime());
    }

    // optional int32 quickBrakeCount = 7;
    if (has_quickbrakecount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->quickbrakecount());
    }

    // optional int32 emergencyBrakeCount = 8;
    if (has_emergencybrakecount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->emergencybrakecount());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 quickSpeedUpCount = 9;
    if (has_quickspeedupcount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->quickspeedupcount());
    }

    // optional int32 emergencySpeedUpCount = 10;
    if (has_emergencyspeedupcount()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->emergencyspeedupcount());
    }

    // optional int32 averageSpeed = 11;
    if (has_averagespeed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->averagespeed());
    }

    // optional int32 maxWaterTemperature = 12;
    if (has_maxwatertemperature()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxwatertemperature());
    }

    // optional int32 maxRotationSpeed = 13;
    if (has_maxrotationspeed()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxrotationspeed());
    }

    // optional int32 voltage = 14;
    if (has_voltage()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->voltage());
    }

    // optional int32 totalOil = 15;
    if (has_totaloil()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->totaloil());
    }

    // optional int32 averageOil = 16;
    if (has_averageoil()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->averageoil());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 tiredDrivingTime = 17;
    if (has_tireddrivingtime()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tireddrivingtime());
    }

    // optional int32 serialNumber = 18;
    if (has_serialnumber()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->serialnumber());
    }

    // optional int32 averageRotationSpeed = 19;
    if (has_averagerotationspeed()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->averagerotationspeed());
    }

    // optional int32 maxOil = 20;
    if (has_maxoil()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->maxoil());
    }

    // optional int32 idleTime = 21;
    if (has_idletime()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->idletime());
    }

    // optional .gboss.GpsBaseInfo startGps = 22;
    if (has_startgps()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startgps());
    }

    // optional .gboss.GpsReferPosition startReferPos = 23;
    if (has_startreferpos()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->startreferpos());
    }

    // optional .gboss.GpsBaseInfo endGps = 24;
    if (has_endgps()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endgps());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .gboss.GpsReferPosition endReferPos = 25;
    if (has_endreferpos()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endreferpos());
    }

    // optional int32 history = 26;
    if (has_history()) {
      total_size += 2 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->history());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TravelInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TravelInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const TravelInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TravelInfo::MergeFrom(const TravelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
    if (from.has_maxspeed()) {
      set_maxspeed(from.maxspeed());
    }
    if (from.has_overspeedtime()) {
      set_overspeedtime(from.overspeedtime());
    }
    if (from.has_quickbrakecount()) {
      set_quickbrakecount(from.quickbrakecount());
    }
    if (from.has_emergencybrakecount()) {
      set_emergencybrakecount(from.emergencybrakecount());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_quickspeedupcount()) {
      set_quickspeedupcount(from.quickspeedupcount());
    }
    if (from.has_emergencyspeedupcount()) {
      set_emergencyspeedupcount(from.emergencyspeedupcount());
    }
    if (from.has_averagespeed()) {
      set_averagespeed(from.averagespeed());
    }
    if (from.has_maxwatertemperature()) {
      set_maxwatertemperature(from.maxwatertemperature());
    }
    if (from.has_maxrotationspeed()) {
      set_maxrotationspeed(from.maxrotationspeed());
    }
    if (from.has_voltage()) {
      set_voltage(from.voltage());
    }
    if (from.has_totaloil()) {
      set_totaloil(from.totaloil());
    }
    if (from.has_averageoil()) {
      set_averageoil(from.averageoil());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_tireddrivingtime()) {
      set_tireddrivingtime(from.tireddrivingtime());
    }
    if (from.has_serialnumber()) {
      set_serialnumber(from.serialnumber());
    }
    if (from.has_averagerotationspeed()) {
      set_averagerotationspeed(from.averagerotationspeed());
    }
    if (from.has_maxoil()) {
      set_maxoil(from.maxoil());
    }
    if (from.has_idletime()) {
      set_idletime(from.idletime());
    }
    if (from.has_startgps()) {
      mutable_startgps()->::gboss::GpsBaseInfo::MergeFrom(from.startgps());
    }
    if (from.has_startreferpos()) {
      mutable_startreferpos()->::gboss::GpsReferPosition::MergeFrom(from.startreferpos());
    }
    if (from.has_endgps()) {
      mutable_endgps()->::gboss::GpsBaseInfo::MergeFrom(from.endgps());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_endreferpos()) {
      mutable_endreferpos()->::gboss::GpsReferPosition::MergeFrom(from.endreferpos());
    }
    if (from.has_history()) {
      set_history(from.history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TravelInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TravelInfo::CopyFrom(const TravelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TravelInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_startgps()) {
    if (!this->startgps().IsInitialized()) return false;
  }
  if (has_startreferpos()) {
    if (!this->startreferpos().IsInitialized()) return false;
  }
  if (has_endgps()) {
    if (!this->endgps().IsInitialized()) return false;
  }
  if (has_endreferpos()) {
    if (!this->endreferpos().IsInitialized()) return false;
  }
  return true;
}

void TravelInfo::Swap(TravelInfo* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(distance_, other->distance_);
    std::swap(maxspeed_, other->maxspeed_);
    std::swap(overspeedtime_, other->overspeedtime_);
    std::swap(quickbrakecount_, other->quickbrakecount_);
    std::swap(emergencybrakecount_, other->emergencybrakecount_);
    std::swap(quickspeedupcount_, other->quickspeedupcount_);
    std::swap(emergencyspeedupcount_, other->emergencyspeedupcount_);
    std::swap(averagespeed_, other->averagespeed_);
    std::swap(maxwatertemperature_, other->maxwatertemperature_);
    std::swap(maxrotationspeed_, other->maxrotationspeed_);
    std::swap(voltage_, other->voltage_);
    std::swap(totaloil_, other->totaloil_);
    std::swap(averageoil_, other->averageoil_);
    std::swap(tireddrivingtime_, other->tireddrivingtime_);
    std::swap(serialnumber_, other->serialnumber_);
    std::swap(averagerotationspeed_, other->averagerotationspeed_);
    std::swap(maxoil_, other->maxoil_);
    std::swap(idletime_, other->idletime_);
    std::swap(startgps_, other->startgps_);
    std::swap(startreferpos_, other->startreferpos_);
    std::swap(endgps_, other->endgps_);
    std::swap(endreferpos_, other->endreferpos_);
    std::swap(history_, other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata TravelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = TravelInfo_descriptor_;
  metadata.reflection = TravelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaultDefine::kFaultTypeFieldNumber;
const int FaultDefine::kFaultCodeFieldNumber;
#endif  // !_MSC_VER

FaultDefine::FaultDefine()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.FaultDefine)
}

void FaultDefine::InitAsDefaultInstance() {
}

FaultDefine::FaultDefine(const FaultDefine& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.FaultDefine)
}

void FaultDefine::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  faulttype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaultDefine::~FaultDefine() {
  // @@protoc_insertion_point(destructor:gboss.FaultDefine)
  SharedDtor();
}

void FaultDefine::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FaultDefine::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FaultDefine::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultDefine_descriptor_;
}

const FaultDefine& FaultDefine::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

FaultDefine* FaultDefine::default_instance_ = NULL;

FaultDefine* FaultDefine::New() const {
  return new FaultDefine;
}

void FaultDefine::Clear() {
  faulttype_ = 0;
  faultcode_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaultDefine::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.FaultDefine)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 faultType = 1;
      case 1: {
        if (tag == 8) {
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faulttype_)));
          set_has_faulttype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faultCode;
        break;
      }

      // repeated string faultCode = 2;
      case 2: {
        if (tag == 18) {
         parse_faultCode:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_faultcode()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->faultcode(this->faultcode_size() - 1).data(),
            this->faultcode(this->faultcode_size() - 1).length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "faultcode");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_faultCode;
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.FaultDefine)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.FaultDefine)
  return false;
#undef DO_
}

void FaultDefine::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.FaultDefine)
  // optional int32 faultType = 1;
  if (has_faulttype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(1, this->faulttype(), output);
  }

  // repeated string faultCode = 2;
  for (int i = 0; i < this->faultcode_size(); i++) {
  ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
    this->faultcode(i).data(), this->faultcode(i).length(),
    ::google_public::protobuf::internal::WireFormat::SERIALIZE,
    "faultcode");
    ::google_public::protobuf::internal::WireFormatLite::WriteString(
      2, this->faultcode(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.FaultDefine)
}

::google_public::protobuf::uint8* FaultDefine::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.FaultDefine)
  // optional int32 faultType = 1;
  if (has_faulttype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->faulttype(), target);
  }

  // repeated string faultCode = 2;
  for (int i = 0; i < this->faultcode_size(); i++) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->faultcode(i).data(), this->faultcode(i).length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "faultcode");
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->faultcode(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.FaultDefine)
  return target;
}

int FaultDefine::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 faultType = 1;
    if (has_faulttype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->faulttype());
    }

  }
  // repeated string faultCode = 2;
  total_size += 1 * this->faultcode_size();
  for (int i = 0; i < this->faultcode_size(); i++) {
    total_size += ::google_public::protobuf::internal::WireFormatLite::StringSize(
      this->faultcode(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultDefine::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaultDefine* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FaultDefine*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaultDefine::MergeFrom(const FaultDefine& from) {
  GOOGLE_CHECK_NE(&from, this);
  faultcode_.MergeFrom(from.faultcode_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_faulttype()) {
      set_faulttype(from.faulttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaultDefine::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultDefine::CopyFrom(const FaultDefine& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultDefine::IsInitialized() const {

  return true;
}

void FaultDefine::Swap(FaultDefine* other) {
  if (other != this) {
    std::swap(faulttype_, other->faulttype_);
    faultcode_.Swap(&other->faultcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FaultDefine::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FaultDefine_descriptor_;
  metadata.reflection = FaultDefine_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FaultInfo::kCallLetterFieldNumber;
const int FaultInfo::kFaultTimeFieldNumber;
const int FaultInfo::kFaultsFieldNumber;
const int FaultInfo::kUnitTypeFieldNumber;
const int FaultInfo::kHistoryFieldNumber;
#endif  // !_MSC_VER

FaultInfo::FaultInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.FaultInfo)
}

void FaultInfo::InitAsDefaultInstance() {
}

FaultInfo::FaultInfo(const FaultInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.FaultInfo)
}

void FaultInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  faulttime_ = GOOGLE_LONGLONG(0);
  unittype_ = 0;
  history_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FaultInfo::~FaultInfo() {
  // @@protoc_insertion_point(destructor:gboss.FaultInfo)
  SharedDtor();
}

void FaultInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (this != default_instance_) {
  }
}

void FaultInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* FaultInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FaultInfo_descriptor_;
}

const FaultInfo& FaultInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

FaultInfo* FaultInfo::default_instance_ = NULL;

FaultInfo* FaultInfo::New() const {
  return new FaultInfo;
}

void FaultInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<FaultInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 27) {
    ZR_(unittype_, history_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    faulttime_ = GOOGLE_LONGLONG(0);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  faults_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FaultInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.FaultInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_faultTime;
        break;
      }

      // required int64 faultTime = 2;
      case 2: {
        if (tag == 16) {
         parse_faultTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &faulttime_)));
          set_has_faulttime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faults;
        break;
      }

      // repeated .gboss.FaultDefine faults = 3;
      case 3: {
        if (tag == 26) {
         parse_faults:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_faults()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_faults;
        if (input->ExpectTag(32)) goto parse_unitType;
        break;
      }

      // optional int32 unitType = 4;
      case 4: {
        if (tag == 32) {
         parse_unitType:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &unittype_)));
          set_has_unittype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_history;
        break;
      }

      // optional int32 history = 5;
      case 5: {
        if (tag == 40) {
         parse_history:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &history_)));
          set_has_history();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.FaultInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.FaultInfo)
  return false;
#undef DO_
}

void FaultInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.FaultInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int64 faultTime = 2;
  if (has_faulttime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(2, this->faulttime(), output);
  }

  // repeated .gboss.FaultDefine faults = 3;
  for (int i = 0; i < this->faults_size(); i++) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->faults(i), output);
  }

  // optional int32 unitType = 4;
  if (has_unittype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->unittype(), output);
  }

  // optional int32 history = 5;
  if (has_history()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->history(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.FaultInfo)
}

::google_public::protobuf::uint8* FaultInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.FaultInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int64 faultTime = 2;
  if (has_faulttime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->faulttime(), target);
  }

  // repeated .gboss.FaultDefine faults = 3;
  for (int i = 0; i < this->faults_size(); i++) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->faults(i), target);
  }

  // optional int32 unitType = 4;
  if (has_unittype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->unittype(), target);
  }

  // optional int32 history = 5;
  if (has_history()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->history(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.FaultInfo)
  return target;
}

int FaultInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int64 faultTime = 2;
    if (has_faulttime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->faulttime());
    }

    // optional int32 unitType = 4;
    if (has_unittype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->unittype());
    }

    // optional int32 history = 5;
    if (has_history()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->history());
    }

  }
  // repeated .gboss.FaultDefine faults = 3;
  total_size += 1 * this->faults_size();
  for (int i = 0; i < this->faults_size(); i++) {
    total_size +=
      ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->faults(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FaultInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FaultInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const FaultInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FaultInfo::MergeFrom(const FaultInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  faults_.MergeFrom(from.faults_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_faulttime()) {
      set_faulttime(from.faulttime());
    }
    if (from.has_unittype()) {
      set_unittype(from.unittype());
    }
    if (from.has_history()) {
      set_history(from.history());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FaultInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FaultInfo::CopyFrom(const FaultInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FaultInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void FaultInfo::Swap(FaultInfo* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(faulttime_, other->faulttime_);
    faults_.Swap(&other->faults_);
    std::swap(unittype_, other->unittype_);
    std::swap(history_, other->history_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata FaultInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = FaultInfo_descriptor_;
  metadata.reflection = FaultInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AppNoticeInfo::kCallLetterFieldNumber;
const int AppNoticeInfo::kTitleFieldNumber;
const int AppNoticeInfo::kContentFieldNumber;
const int AppNoticeInfo::kBaseInfoFieldNumber;
const int AppNoticeInfo::kReferPositionFieldNumber;
const int AppNoticeInfo::kCmdIdFieldNumber;
const int AppNoticeInfo::kCmdretcodeFieldNumber;
const int AppNoticeInfo::kCmdretmsgFieldNumber;
const int AppNoticeInfo::kNoticetypeFieldNumber;
const int AppNoticeInfo::kAlarmstatusFieldNumber;
const int AppNoticeInfo::kCmdsnFieldNumber;
#endif  // !_MSC_VER

AppNoticeInfo::AppNoticeInfo()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.AppNoticeInfo)
}

void AppNoticeInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::gboss::GpsBaseInfo*>(&::gboss::GpsBaseInfo::default_instance());
  referposition_ = const_cast< ::gboss::GpsReferPosition*>(&::gboss::GpsReferPosition::default_instance());
}

AppNoticeInfo::AppNoticeInfo(const AppNoticeInfo& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.AppNoticeInfo)
}

void AppNoticeInfo::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  title_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  content_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  baseinfo_ = NULL;
  referposition_ = NULL;
  cmdid_ = 0;
  cmdretcode_ = 0;
  cmdretmsg_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  noticetype_ = 0;
  alarmstatus_ = 0;
  cmdsn_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AppNoticeInfo::~AppNoticeInfo() {
  // @@protoc_insertion_point(destructor:gboss.AppNoticeInfo)
  SharedDtor();
}

void AppNoticeInfo::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (title_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete title_;
  }
  if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete content_;
  }
  if (cmdretmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdretmsg_;
  }
  if (cmdsn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete cmdsn_;
  }
  if (this != default_instance_) {
    delete baseinfo_;
    delete referposition_;
  }
}

void AppNoticeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* AppNoticeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AppNoticeInfo_descriptor_;
}

const AppNoticeInfo& AppNoticeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

AppNoticeInfo* AppNoticeInfo::default_instance_ = NULL;

AppNoticeInfo* AppNoticeInfo::New() const {
  return new AppNoticeInfo;
}

void AppNoticeInfo::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<AppNoticeInfo*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(cmdid_, cmdretcode_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
    if (has_title()) {
      if (title_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        title_->clear();
      }
    }
    if (has_content()) {
      if (content_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        content_->clear();
      }
    }
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::gboss::GpsBaseInfo::Clear();
    }
    if (has_referposition()) {
      if (referposition_ != NULL) referposition_->::gboss::GpsReferPosition::Clear();
    }
    if (has_cmdretmsg()) {
      if (cmdretmsg_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmdretmsg_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 1792) {
    ZR_(noticetype_, alarmstatus_);
    if (has_cmdsn()) {
      if (cmdsn_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        cmdsn_->clear();
      }
    }
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AppNoticeInfo::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.AppNoticeInfo)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_title;
        break;
      }

      // required string title = 2;
      case 2: {
        if (tag == 18) {
         parse_title:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->title().data(), this->title().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "title");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // required string content = 3;
      case 3: {
        if (tag == 26) {
         parse_content:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_content()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->content().data(), this->content().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "content");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(34)) goto parse_baseInfo;
        break;
      }

      // optional .gboss.GpsBaseInfo baseInfo = 4;
      case 4: {
        if (tag == 34) {
         parse_baseInfo:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_referPosition;
        break;
      }

      // optional .gboss.GpsReferPosition referPosition = 5;
      case 5: {
        if (tag == 42) {
         parse_referPosition:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_referposition()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_cmdId;
        break;
      }

      // optional int32 cmdId = 6;
      case 6: {
        if (tag == 48) {
         parse_cmdId:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdid_)));
          set_has_cmdid();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_cmdretcode;
        break;
      }

      // optional int32 cmdretcode = 7;
      case 7: {
        if (tag == 56) {
         parse_cmdretcode:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cmdretcode_)));
          set_has_cmdretcode();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(66)) goto parse_cmdretmsg;
        break;
      }

      // optional string cmdretmsg = 8;
      case 8: {
        if (tag == 66) {
         parse_cmdretmsg:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdretmsg()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdretmsg().data(), this->cmdretmsg().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "cmdretmsg");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_noticetype;
        break;
      }

      // optional int32 noticetype = 9;
      case 9: {
        if (tag == 72) {
         parse_noticetype:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &noticetype_)));
          set_has_noticetype();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_alarmstatus;
        break;
      }

      // optional int32 alarmstatus = 10;
      case 10: {
        if (tag == 80) {
         parse_alarmstatus:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alarmstatus_)));
          set_has_alarmstatus();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(90)) goto parse_cmdsn;
        break;
      }

      // optional string cmdsn = 11;
      case 11: {
        if (tag == 90) {
         parse_cmdsn:
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmdsn()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->cmdsn().data(), this->cmdsn().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "cmdsn");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.AppNoticeInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.AppNoticeInfo)
  return false;
#undef DO_
}

void AppNoticeInfo::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.AppNoticeInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required string title = 2;
  if (has_title()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // required string content = 3;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->content(), output);
  }

  // optional .gboss.GpsBaseInfo baseInfo = 4;
  if (has_baseinfo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->baseinfo(), output);
  }

  // optional .gboss.GpsReferPosition referPosition = 5;
  if (has_referposition()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->referposition(), output);
  }

  // optional int32 cmdId = 6;
  if (has_cmdid()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->cmdid(), output);
  }

  // optional int32 cmdretcode = 7;
  if (has_cmdretcode()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->cmdretcode(), output);
  }

  // optional string cmdretmsg = 8;
  if (has_cmdretmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdretmsg().data(), this->cmdretmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "cmdretmsg");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->cmdretmsg(), output);
  }

  // optional int32 noticetype = 9;
  if (has_noticetype()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->noticetype(), output);
  }

  // optional int32 alarmstatus = 10;
  if (has_alarmstatus()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->alarmstatus(), output);
  }

  // optional string cmdsn = 11;
  if (has_cmdsn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdsn().data(), this->cmdsn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "cmdsn");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      11, this->cmdsn(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.AppNoticeInfo)
}

::google_public::protobuf::uint8* AppNoticeInfo::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.AppNoticeInfo)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required string title = 2;
  if (has_title()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->title().data(), this->title().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "title");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->title(), target);
  }

  // required string content = 3;
  if (has_content()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->content().data(), this->content().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "content");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->content(), target);
  }

  // optional .gboss.GpsBaseInfo baseInfo = 4;
  if (has_baseinfo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->baseinfo(), target);
  }

  // optional .gboss.GpsReferPosition referPosition = 5;
  if (has_referposition()) {
    target = ::google_public::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->referposition(), target);
  }

  // optional int32 cmdId = 6;
  if (has_cmdid()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->cmdid(), target);
  }

  // optional int32 cmdretcode = 7;
  if (has_cmdretcode()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cmdretcode(), target);
  }

  // optional string cmdretmsg = 8;
  if (has_cmdretmsg()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdretmsg().data(), this->cmdretmsg().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "cmdretmsg");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->cmdretmsg(), target);
  }

  // optional int32 noticetype = 9;
  if (has_noticetype()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->noticetype(), target);
  }

  // optional int32 alarmstatus = 10;
  if (has_alarmstatus()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->alarmstatus(), target);
  }

  // optional string cmdsn = 11;
  if (has_cmdsn()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->cmdsn().data(), this->cmdsn().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "cmdsn");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->cmdsn(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.AppNoticeInfo)
  return target;
}

int AppNoticeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required string title = 2;
    if (has_title()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->title());
    }

    // required string content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->content());
    }

    // optional .gboss.GpsBaseInfo baseInfo = 4;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .gboss.GpsReferPosition referPosition = 5;
    if (has_referposition()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->referposition());
    }

    // optional int32 cmdId = 6;
    if (has_cmdid()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdid());
    }

    // optional int32 cmdretcode = 7;
    if (has_cmdretcode()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->cmdretcode());
    }

    // optional string cmdretmsg = 8;
    if (has_cmdretmsg()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->cmdretmsg());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 noticetype = 9;
    if (has_noticetype()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->noticetype());
    }

    // optional int32 alarmstatus = 10;
    if (has_alarmstatus()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->alarmstatus());
    }

    // optional string cmdsn = 11;
    if (has_cmdsn()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->cmdsn());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AppNoticeInfo::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AppNoticeInfo* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const AppNoticeInfo*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AppNoticeInfo::MergeFrom(const AppNoticeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_title()) {
      set_title(from.title());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::gboss::GpsBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_referposition()) {
      mutable_referposition()->::gboss::GpsReferPosition::MergeFrom(from.referposition());
    }
    if (from.has_cmdid()) {
      set_cmdid(from.cmdid());
    }
    if (from.has_cmdretcode()) {
      set_cmdretcode(from.cmdretcode());
    }
    if (from.has_cmdretmsg()) {
      set_cmdretmsg(from.cmdretmsg());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_noticetype()) {
      set_noticetype(from.noticetype());
    }
    if (from.has_alarmstatus()) {
      set_alarmstatus(from.alarmstatus());
    }
    if (from.has_cmdsn()) {
      set_cmdsn(from.cmdsn());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AppNoticeInfo::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AppNoticeInfo::CopyFrom(const AppNoticeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AppNoticeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_referposition()) {
    if (!this->referposition().IsInitialized()) return false;
  }
  return true;
}

void AppNoticeInfo::Swap(AppNoticeInfo* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(title_, other->title_);
    std::swap(content_, other->content_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(referposition_, other->referposition_);
    std::swap(cmdid_, other->cmdid_);
    std::swap(cmdretcode_, other->cmdretcode_);
    std::swap(cmdretmsg_, other->cmdretmsg_);
    std::swap(noticetype_, other->noticetype_);
    std::swap(alarmstatus_, other->alarmstatus_);
    std::swap(cmdsn_, other->cmdsn_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata AppNoticeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = AppNoticeInfo_descriptor_;
  metadata.reflection = AppNoticeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ECUConfig::kCallLetterFieldNumber;
const int ECUConfig::kUpdateTimeFieldNumber;
const int ECUConfig::kAbsFieldNumber;
const int ECUConfig::kEspFieldNumber;
const int ECUConfig::kSrsFieldNumber;
const int ECUConfig::kEmsFieldNumber;
const int ECUConfig::kImmoFieldNumber;
const int ECUConfig::kPepsFieldNumber;
const int ECUConfig::kBcmFieldNumber;
const int ECUConfig::kTcuFieldNumber;
const int ECUConfig::kTpmsFieldNumber;
const int ECUConfig::kApmFieldNumber;
const int ECUConfig::kIcmFieldNumber;
const int ECUConfig::kEpsFieldNumber;
#endif  // !_MSC_VER

ECUConfig::ECUConfig()
  : ::google_public::protobuf::Message() {
  SharedCtor();
  // @@protoc_insertion_point(constructor:gboss.ECUConfig)
}

void ECUConfig::InitAsDefaultInstance() {
}

ECUConfig::ECUConfig(const ECUConfig& from)
  : ::google_public::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:gboss.ECUConfig)
}

void ECUConfig::SharedCtor() {
  ::google_public::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  callletter_ = const_cast< ::std::string*>(&::google_public::protobuf::internal::GetEmptyStringAlreadyInited());
  updatetime_ = GOOGLE_LONGLONG(0);
  abs_ = 0;
  esp_ = 0;
  srs_ = 0;
  ems_ = 0;
  immo_ = 0;
  peps_ = 0;
  bcm_ = 0;
  tcu_ = 0;
  tpms_ = 0;
  apm_ = 0;
  icm_ = 0;
  eps_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ECUConfig::~ECUConfig() {
  // @@protoc_insertion_point(destructor:gboss.ECUConfig)
  SharedDtor();
}

void ECUConfig::SharedDtor() {
  if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
    delete callletter_;
  }
  if (this != default_instance_) {
  }
}

void ECUConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google_public::protobuf::Descriptor* ECUConfig::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ECUConfig_descriptor_;
}

const ECUConfig& ECUConfig::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_GBoss_2eproto();
  return *default_instance_;
}

ECUConfig* ECUConfig::default_instance_ = NULL;

ECUConfig* ECUConfig::New() const {
  return new ECUConfig;
}

void ECUConfig::Clear() {
#define OFFSET_OF_FIELD_(f) (reinterpret_cast<char*>(      \
  &reinterpret_cast<ECUConfig*>(16)->f) - \
   reinterpret_cast<char*>(16))

#define ZR_(first, last) do {                              \
    size_t f = OFFSET_OF_FIELD_(first);                    \
    size_t n = OFFSET_OF_FIELD_(last) - f + sizeof(last);  \
    ::memset(&first, 0, n);                                \
  } while (0)

  if (_has_bits_[0 / 32] & 255) {
    ZR_(updatetime_, peps_);
    if (has_callletter()) {
      if (callletter_ != &::google_public::protobuf::internal::GetEmptyStringAlreadyInited()) {
        callletter_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & 16128) {
    ZR_(bcm_, eps_);
  }

#undef OFFSET_OF_FIELD_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ECUConfig::MergePartialFromCodedStream(
    ::google_public::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google_public::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:gboss.ECUConfig)
  for (;;) {
    ::std::pair< ::google_public::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google_public::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string callLetter = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google_public::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_callletter()));
          ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->callletter().data(), this->callletter().length(),
            ::google_public::protobuf::internal::WireFormat::PARSE,
            "callletter");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(16)) goto parse_updateTime;
        break;
      }

      // required int64 updateTime = 2;
      case 2: {
        if (tag == 16) {
         parse_updateTime:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int64, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(24)) goto parse_abs;
        break;
      }

      // optional int32 abs = 3;
      case 3: {
        if (tag == 24) {
         parse_abs:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &abs_)));
          set_has_abs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_esp;
        break;
      }

      // optional int32 esp = 4;
      case 4: {
        if (tag == 32) {
         parse_esp:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &esp_)));
          set_has_esp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(40)) goto parse_srs;
        break;
      }

      // optional int32 srs = 5;
      case 5: {
        if (tag == 40) {
         parse_srs:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &srs_)));
          set_has_srs();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(48)) goto parse_ems;
        break;
      }

      // optional int32 ems = 6;
      case 6: {
        if (tag == 48) {
         parse_ems:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ems_)));
          set_has_ems();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(56)) goto parse_immo;
        break;
      }

      // optional int32 immo = 7;
      case 7: {
        if (tag == 56) {
         parse_immo:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &immo_)));
          set_has_immo();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(64)) goto parse_peps;
        break;
      }

      // optional int32 peps = 8;
      case 8: {
        if (tag == 64) {
         parse_peps:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &peps_)));
          set_has_peps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(72)) goto parse_bcm;
        break;
      }

      // optional int32 bcm = 9;
      case 9: {
        if (tag == 72) {
         parse_bcm:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bcm_)));
          set_has_bcm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(80)) goto parse_tcu;
        break;
      }

      // optional int32 tcu = 10;
      case 10: {
        if (tag == 80) {
         parse_tcu:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tcu_)));
          set_has_tcu();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(88)) goto parse_tpms;
        break;
      }

      // optional int32 tpms = 11;
      case 11: {
        if (tag == 88) {
         parse_tpms:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tpms_)));
          set_has_tpms();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(96)) goto parse_apm;
        break;
      }

      // optional int32 apm = 12;
      case 12: {
        if (tag == 96) {
         parse_apm:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &apm_)));
          set_has_apm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(104)) goto parse_icm;
        break;
      }

      // optional int32 icm = 13;
      case 13: {
        if (tag == 104) {
         parse_icm:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &icm_)));
          set_has_icm();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(112)) goto parse_eps;
        break;
      }

      // optional int32 eps = 14;
      case 14: {
        if (tag == 112) {
         parse_eps:
          DO_((::google_public::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google_public::protobuf::int32, ::google_public::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eps_)));
          set_has_eps();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google_public::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google_public::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google_public::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:gboss.ECUConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:gboss.ECUConfig)
  return false;
#undef DO_
}

void ECUConfig::SerializeWithCachedSizes(
    ::google_public::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:gboss.ECUConfig)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    ::google_public::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->callletter(), output);
  }

  // required int64 updateTime = 2;
  if (has_updatetime()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt64(2, this->updatetime(), output);
  }

  // optional int32 abs = 3;
  if (has_abs()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(3, this->abs(), output);
  }

  // optional int32 esp = 4;
  if (has_esp()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(4, this->esp(), output);
  }

  // optional int32 srs = 5;
  if (has_srs()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(5, this->srs(), output);
  }

  // optional int32 ems = 6;
  if (has_ems()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(6, this->ems(), output);
  }

  // optional int32 immo = 7;
  if (has_immo()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(7, this->immo(), output);
  }

  // optional int32 peps = 8;
  if (has_peps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(8, this->peps(), output);
  }

  // optional int32 bcm = 9;
  if (has_bcm()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(9, this->bcm(), output);
  }

  // optional int32 tcu = 10;
  if (has_tcu()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(10, this->tcu(), output);
  }

  // optional int32 tpms = 11;
  if (has_tpms()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(11, this->tpms(), output);
  }

  // optional int32 apm = 12;
  if (has_apm()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(12, this->apm(), output);
  }

  // optional int32 icm = 13;
  if (has_icm()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(13, this->icm(), output);
  }

  // optional int32 eps = 14;
  if (has_eps()) {
    ::google_public::protobuf::internal::WireFormatLite::WriteInt32(14, this->eps(), output);
  }

  if (!unknown_fields().empty()) {
    ::google_public::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:gboss.ECUConfig)
}

::google_public::protobuf::uint8* ECUConfig::SerializeWithCachedSizesToArray(
    ::google_public::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:gboss.ECUConfig)
  // required string callLetter = 1;
  if (has_callletter()) {
    ::google_public::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->callletter().data(), this->callletter().length(),
      ::google_public::protobuf::internal::WireFormat::SERIALIZE,
      "callletter");
    target =
      ::google_public::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->callletter(), target);
  }

  // required int64 updateTime = 2;
  if (has_updatetime()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->updatetime(), target);
  }

  // optional int32 abs = 3;
  if (has_abs()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->abs(), target);
  }

  // optional int32 esp = 4;
  if (has_esp()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->esp(), target);
  }

  // optional int32 srs = 5;
  if (has_srs()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->srs(), target);
  }

  // optional int32 ems = 6;
  if (has_ems()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ems(), target);
  }

  // optional int32 immo = 7;
  if (has_immo()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->immo(), target);
  }

  // optional int32 peps = 8;
  if (has_peps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->peps(), target);
  }

  // optional int32 bcm = 9;
  if (has_bcm()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->bcm(), target);
  }

  // optional int32 tcu = 10;
  if (has_tcu()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->tcu(), target);
  }

  // optional int32 tpms = 11;
  if (has_tpms()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->tpms(), target);
  }

  // optional int32 apm = 12;
  if (has_apm()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->apm(), target);
  }

  // optional int32 icm = 13;
  if (has_icm()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->icm(), target);
  }

  // optional int32 eps = 14;
  if (has_eps()) {
    target = ::google_public::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->eps(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google_public::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:gboss.ECUConfig)
  return target;
}

int ECUConfig::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string callLetter = 1;
    if (has_callletter()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::StringSize(
          this->callletter());
    }

    // required int64 updateTime = 2;
    if (has_updatetime()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

    // optional int32 abs = 3;
    if (has_abs()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->abs());
    }

    // optional int32 esp = 4;
    if (has_esp()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->esp());
    }

    // optional int32 srs = 5;
    if (has_srs()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->srs());
    }

    // optional int32 ems = 6;
    if (has_ems()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->ems());
    }

    // optional int32 immo = 7;
    if (has_immo()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->immo());
    }

    // optional int32 peps = 8;
    if (has_peps()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->peps());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 bcm = 9;
    if (has_bcm()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->bcm());
    }

    // optional int32 tcu = 10;
    if (has_tcu()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tcu());
    }

    // optional int32 tpms = 11;
    if (has_tpms()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->tpms());
    }

    // optional int32 apm = 12;
    if (has_apm()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->apm());
    }

    // optional int32 icm = 13;
    if (has_icm()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->icm());
    }

    // optional int32 eps = 14;
    if (has_eps()) {
      total_size += 1 +
        ::google_public::protobuf::internal::WireFormatLite::Int32Size(
          this->eps());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google_public::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ECUConfig::MergeFrom(const ::google_public::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ECUConfig* source =
    ::google_public::protobuf::internal::dynamic_cast_if_available<const ECUConfig*>(
      &from);
  if (source == NULL) {
    ::google_public::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ECUConfig::MergeFrom(const ECUConfig& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_callletter()) {
      set_callletter(from.callletter());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
    if (from.has_abs()) {
      set_abs(from.abs());
    }
    if (from.has_esp()) {
      set_esp(from.esp());
    }
    if (from.has_srs()) {
      set_srs(from.srs());
    }
    if (from.has_ems()) {
      set_ems(from.ems());
    }
    if (from.has_immo()) {
      set_immo(from.immo());
    }
    if (from.has_peps()) {
      set_peps(from.peps());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_bcm()) {
      set_bcm(from.bcm());
    }
    if (from.has_tcu()) {
      set_tcu(from.tcu());
    }
    if (from.has_tpms()) {
      set_tpms(from.tpms());
    }
    if (from.has_apm()) {
      set_apm(from.apm());
    }
    if (from.has_icm()) {
      set_icm(from.icm());
    }
    if (from.has_eps()) {
      set_eps(from.eps());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ECUConfig::CopyFrom(const ::google_public::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ECUConfig::CopyFrom(const ECUConfig& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ECUConfig::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ECUConfig::Swap(ECUConfig* other) {
  if (other != this) {
    std::swap(callletter_, other->callletter_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(abs_, other->abs_);
    std::swap(esp_, other->esp_);
    std::swap(srs_, other->srs_);
    std::swap(ems_, other->ems_);
    std::swap(immo_, other->immo_);
    std::swap(peps_, other->peps_);
    std::swap(bcm_, other->bcm_);
    std::swap(tcu_, other->tcu_);
    std::swap(tpms_, other->tpms_);
    std::swap(apm_, other->apm_);
    std::swap(icm_, other->icm_);
    std::swap(eps_, other->eps_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google_public::protobuf::Metadata ECUConfig::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google_public::protobuf::Metadata metadata;
  metadata.descriptor = ECUConfig_descriptor_;
  metadata.reflection = ECUConfig_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace gboss

// @@protoc_insertion_point(global_scope)
